
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="106" loc="Φ.org.eolang.tuple-at-with-error" name="tuple-at-with-error" original-name="tuple-at-with-error" pos="0"> 
//   <o base=".eq" line="107" loc="Φ.org.eolang.tuple-at-with-error.φ" name="@" pos="2"> 
//     <o base="org.eolang.try" line="108" loc="Φ.org.eolang.tuple-at-with-error.φ.ρ" pos="4"> 
//       <o base="tuple-at-with-error$t0$t0$a0" cut="110" line="109" loc="Φ.org.eolang.tuple-at-with-error.φ.ρ.α0" pos="6" ref="109"/>
//       <o base="tuple-at-with-error$t0$t0$a1" cut="118" line="113" loc="Φ.org.eolang.tuple-at-with-error.φ.ρ.α1" pos="6" ref="113"/>
//       <o base="org.eolang.nop" line="115" loc="Φ.org.eolang.tuple-at-with-error.φ.ρ.α2" pos="6"/>
//     </o>
//     <o base="org.eolang.string" data="string" line="116" loc="Φ.org.eolang.tuple-at-with-error.φ.α0" pos="4">Can't #at(20) the 21th element of the tuple, there are just 4 of them</o>
//   </o>
// </o>
@XmirObject(name = "tuple-at-with-errorTest", oname = "tuple-at-with-error", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOtuple_at_with_errorTest extends PhDefault {
    
  public EOtuple_at_with_errorTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("try").get();
        ret_base = new PhLocated(ret_base, 108, 4, "Φ.org.eolang.tuple-at-with-error.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOω1t0$EOt0$EOa0(rho);
          ret_base_1 = new PhLocated(ret_base_1, 109, 6, "Φ.org.eolang.tuple-at-with-error.φ.ρ.α0");
        Phi ret_base_2 = new EOω1t0$EOt0$EOa1(rho);
          ret_base_2 = new PhLocated(ret_base_2, 113, 6, "Φ.org.eolang.tuple-at-with-error.φ.ρ.α1");
        Phi ret_base_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
          ret_base_3 = new PhLocated(ret_base_3, 115, 6, "Φ.org.eolang.tuple-at-with-error.φ.ρ.α2");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
        ret_base = new PhWith(ret_base, 2, ret_base_3);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 107, 2, "Φ.org.eolang.tuple-at-with-error.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 116, 4, "Φ.org.eolang.tuple-at-with-error.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("Can't #at(20) the 21th element of the tuple, there are just 4 of them"));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtuple_at_with_errorTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="109" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0" name="tuple-at-with-error$t0$t0$a0" parent="tuple-at-with-error" pos="6"> 
//   <o base=".at" line="110" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ" name="@" pos="8"> 
//     <o base="org.eolang.tuple" data="tuple" line="111" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ" pos="10"> 
//       <o base="org.eolang.int" data="int" line="111" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α0" pos="12">1</o>
//       <o base="org.eolang.int" data="int" line="111" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α1" pos="14">2</o>
//       <o base="org.eolang.int" data="int" line="111" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α2" pos="16">3</o>
//       <o base="org.eolang.int" data="int" line="111" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α3" pos="18">4</o>
//     </o>
//     <o base="org.eolang.int" data="int" line="112" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.α0" pos="10">20</o>
//   </o>
// </o>
@XmirObject(name = "ω1t0$t0$a0", oname = "ω1t0$t0$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOω1t0$EOt0$EOa0 extends PhDefault {
    
  public EOω1t0$EOt0$EOa0(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret_base = new PhLocated(ret_base, 111, 10, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ");
        Phi[] ret_base_a = new Phi[4];
        Phi ret_base_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_a0 = new PhLocated(ret_base_a0, 111, 12, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α0");
          ret_base_a0 = new PhWith(ret_base_a0, "Δ", new Data.Value<>(1L));
        ret_base_a[0] = ret_base_a0;
        Phi ret_base_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_a1 = new PhLocated(ret_base_a1, 111, 14, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α1");
          ret_base_a1 = new PhWith(ret_base_a1, "Δ", new Data.Value<>(2L));
        ret_base_a[1] = ret_base_a1;
        Phi ret_base_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_a2 = new PhLocated(ret_base_a2, 111, 16, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α2");
          ret_base_a2 = new PhWith(ret_base_a2, "Δ", new Data.Value<>(3L));
        ret_base_a[2] = ret_base_a2;
        Phi ret_base_a3 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_a3 = new PhLocated(ret_base_a3, 111, 18, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.ρ.α3");
          ret_base_a3 = new PhWith(ret_base_a3, "Δ", new Data.Value<>(4L));
        ret_base_a[3] = ret_base_a3;
        ret_base = new PhWith(new PhCopy(ret_base), "Δ", new Data.Value<Phi[]>(ret_base_a));
      Phi ret = new PhMethod(ret_base, "at");
        ret = new PhLocated(ret, 110, 8, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 112, 10, "Φ.org.eolang.tuple-at-with-error$t0$t0$a0.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(20L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}

// <o abstract="" ancestors="1" line="113" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a1" name="tuple-at-with-error$t0$t0$a1" parent="tuple-at-with-error" pos="6"> 
//   <o line="113" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a1.e" name="e" pos="7"/>
//   <o base="e" line="114" loc="Φ.org.eolang.tuple-at-with-error$t0$t0$a1.φ" name="@" pos="8" ref="113"/>
// </o>
@XmirObject(name = "ω1t0$t0$a1", oname = "ω1t0$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOω1t0$EOt0$EOa1 extends PhDefault {
    
  public EOω1t0$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("e", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "e");
        ret = new PhLocated(ret, 114, 8, "Φ.org.eolang.tuple-at-with-error$t0$t0$a1.φ");
      return ret;
    })));
  }
}
}
