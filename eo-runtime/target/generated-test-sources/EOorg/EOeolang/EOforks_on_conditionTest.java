
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="55" loc="Φ.org.eolang.forks-on-condition" name="forks-on-condition" original-name="forks-on-condition" pos="0"> 
//   <o base="org.eolang.hamcrest.assert-that" line="56" loc="Φ.org.eolang.forks-on-condition.φ" name="@" pos="2"> 
//     <o base=".if" line="57" loc="Φ.org.eolang.forks-on-condition.φ.α0" pos="4"> 
//       <o base=".eq" line="58" loc="Φ.org.eolang.forks-on-condition.φ.α0.ρ" pos="7"> 
//         <o base="org.eolang.int" data="int" line="58" loc="Φ.org.eolang.forks-on-condition.φ.α0.ρ.ρ" pos="6">5</o>
//         <o base="org.eolang.int" data="int" line="58" loc="Φ.org.eolang.forks-on-condition.φ.α0.ρ.α0" pos="11">8</o>
//       </o>
//       <o base="org.eolang.int" data="int" line="59" loc="Φ.org.eolang.forks-on-condition.φ.α0.α0" pos="6">123</o>
//       <o base="org.eolang.int" data="int" line="60" loc="Φ.org.eolang.forks-on-condition.φ.α0.α1" pos="6">42</o>
//     </o>
//     <o base=".equal-to" line="61" loc="Φ.org.eolang.forks-on-condition.φ.α1" pos="5"> 
//       <o base="$" line="61" loc="Φ.org.eolang.forks-on-condition.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="61" loc="Φ.org.eolang.forks-on-condition.φ.α1.α0" pos="15">42</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "forks-on-conditionTest", oname = "forks-on-condition", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bool-tests.eo")
public final class EOforks_on_conditionTest extends PhDefault {
  public EOforks_on_conditionTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 56, 2, "Φ.org.eolang.forks-on-condition.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1_base_base = new PhLocated(ret_1_base_base, 58, 6, "Φ.org.eolang.forks-on-condition.φ.α0.ρ.ρ");
          ret_1_base_base = new PhWith(ret_1_base_base, "Δ", new Data.Value<>(5L));
        Phi ret_1_base = new PhMethod(ret_1_base_base, "eq");
          ret_1_base = new PhLocated(ret_1_base, 58, 7, "Φ.org.eolang.forks-on-condition.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_1 = new PhLocated(ret_1_base_1, 58, 11, "Φ.org.eolang.forks-on-condition.φ.α0.ρ.α0");
            ret_1_base_1 = new PhWith(ret_1_base_1, "Δ", new Data.Value<>(8L));
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "if");
          ret_1 = new PhLocated(ret_1, 57, 4, "Φ.org.eolang.forks-on-condition.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 59, 6, "Φ.org.eolang.forks-on-condition.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(123L));
          Phi ret_1_2 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_2 = new PhLocated(ret_1_2, 60, 6, "Φ.org.eolang.forks-on-condition.φ.α0.α1");
            ret_1_2 = new PhWith(ret_1_2, "Δ", new Data.Value<>(42L));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 61, 4, "Φ.org.eolang.forks-on-condition.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 61, 5, "Φ.org.eolang.forks-on-condition.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 61, 15, "Φ.org.eolang.forks-on-condition.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(42L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOforks_on_conditionTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
