
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="48" loc="Φ.org.eolang.forks-on-condition" name="forks-on-condition" original-name="forks-on-condition" pos="0"> 
//   <o base=".eq" line="49" loc="Φ.org.eolang.forks-on-condition.φ" name="@" pos="2"> 
//     <o base=".if" line="50" loc="Φ.org.eolang.forks-on-condition.φ.ρ" pos="4"> 
//       <o base=".eq" line="51" loc="Φ.org.eolang.forks-on-condition.φ.ρ.ρ" pos="7"> 
//         <o base="org.eolang.int" data="int" line="51" loc="Φ.org.eolang.forks-on-condition.φ.ρ.ρ.ρ" pos="6">5</o>
//         <o base="org.eolang.int" data="int" line="51" loc="Φ.org.eolang.forks-on-condition.φ.ρ.ρ.α0" pos="11">8</o>
//       </o>
//       <o base="org.eolang.int" data="int" line="52" loc="Φ.org.eolang.forks-on-condition.φ.ρ.α0" pos="6">123</o>
//       <o base="org.eolang.int" data="int" line="53" loc="Φ.org.eolang.forks-on-condition.φ.ρ.α1" pos="6">42</o>
//     </o>
//     <o base="org.eolang.int" data="int" line="54" loc="Φ.org.eolang.forks-on-condition.φ.α0" pos="4">42</o>
//   </o>
// </o>
@XmirObject(name = "forks-on-conditionTest", oname = "forks-on-condition", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bool-tests.eo")
public final class EOforks_on_conditionTest extends PhDefault {
    
  public EOforks_on_conditionTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new EOorg.EOeolang.EOint(Phi.Φ);
        ret_base_base_base = new PhLocated(ret_base_base_base, 51, 6, "Φ.org.eolang.forks-on-condition.φ.ρ.ρ.ρ");
        ret_base_base_base = new PhWith(ret_base_base_base, "Δ", new Data.Value<>(5L));
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eq");
        ret_base_base = new PhLocated(ret_base_base, 51, 7, "Φ.org.eolang.forks-on-condition.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_base_1 = new PhLocated(ret_base_base_1, 51, 11, "Φ.org.eolang.forks-on-condition.φ.ρ.ρ.α0");
          ret_base_base_1 = new PhWith(ret_base_base_1, "Δ", new Data.Value<>(8L));
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "if");
        ret_base = new PhLocated(ret_base, 50, 4, "Φ.org.eolang.forks-on-condition.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 52, 6, "Φ.org.eolang.forks-on-condition.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(123L));
        Phi ret_base_2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_2 = new PhLocated(ret_base_2, 53, 6, "Φ.org.eolang.forks-on-condition.φ.ρ.α1");
          ret_base_2 = new PhWith(ret_base_2, "Δ", new Data.Value<>(42L));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 49, 2, "Φ.org.eolang.forks-on-condition.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 54, 4, "Φ.org.eolang.forks-on-condition.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(42L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOforks_on_conditionTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
