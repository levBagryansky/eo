
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOmath;

import org.eolang.*;

// <o abstract="" ancestors="1" line="76" loc="Φ.org.eolang.math.number$is-infinite" name="number$is-infinite" original-name="is-infinite" parent="number" pos="2"> 
//   <o base=".or" line="78" loc="Φ.org.eolang.math.number$is-infinite.φ" name="@" pos="4"> 
//     <o base=".eq" line="79" loc="Φ.org.eolang.math.number$is-infinite.φ.ρ" pos="6"> 
//       <o base="value" cut="1" line="80" loc="Φ.org.eolang.math.number$is-infinite.φ.ρ.ρ" ref="80"/>
//       <o base="org.eolang.positive-infinity" line="81" loc="Φ.org.eolang.math.number$is-infinite.φ.ρ.α0" pos="8"/>
//     </o>
//     <o base=".eq" line="82" loc="Φ.org.eolang.math.number$is-infinite.φ.α0" pos="6"> 
//       <o base="value" line="83" loc="Φ.org.eolang.math.number$is-infinite.φ.α0.ρ" pos="8" ref="80"/>
//       <o base="org.eolang.negative-infinity" line="84" loc="Φ.org.eolang.math.number$is-infinite.φ.α0.α0" pos="8"/>
//     </o>
//   </o>
//   <o base=".n" const="" line="80" loc="Φ.org.eolang.math.number$is-infinite.value" name="value" pos="9"> 
//     <o base="^" line="80" loc="Φ.org.eolang.math.number$is-infinite.value.ρ" pos="8"/>
//   </o>
// </o>
@XmirObject(name = "number$is-infinite", oname = "is-infinite", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/math/number.eo")
public final class EOnumber$EOis_infinite extends PhDefault {
  public EOnumber$EOis_infinite(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(rho, "value");
      Phi ret_base = new PhMethod(ret_base_base, "eq");
        ret_base = new PhLocated(ret_base, 79, 6, "Φ.org.eolang.math.number$is-infinite.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("positive-infinity").get();
          ret_base_1 = new PhLocated(ret_base_1, 81, 8, "Φ.org.eolang.math.number$is-infinite.φ.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "or");
        ret = new PhLocated(ret, 78, 4, "Φ.org.eolang.math.number$is-infinite.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "value");
          ret_1_base = new PhLocated(ret_1_base, 83, 8, "Φ.org.eolang.math.number$is-infinite.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 82, 6, "Φ.org.eolang.math.number$is-infinite.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("negative-infinity").get();
            ret_1_1 = new PhLocated(ret_1_1, 84, 8, "Φ.org.eolang.math.number$is-infinite.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("value", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "ρ");
        ret_base = new PhLocated(ret_base, 80, 8, "Φ.org.eolang.math.number$is-infinite.value.ρ");
      Phi ret = new PhMethod(ret_base, "n");
        ret = new PhLocated(ret, 80, 9, "Φ.org.eolang.math.number$is-infinite.value");
      ret = new PhConst(ret);
      return ret;
    })));
  }
}
