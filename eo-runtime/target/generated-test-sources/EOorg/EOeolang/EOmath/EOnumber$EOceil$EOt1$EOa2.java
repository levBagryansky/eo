
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOmath;

import org.eolang.*;

// <o abstract="" ancestors="2" line="187" loc="Φ.org.eolang.math.number$ceil$t1$a2" name="number$ceil$t1$a2" parent="number$ceil" pos="6"> 
//   <o base="as-int" const="" line="188" loc="Φ.org.eolang.math.number$ceil$t1$a2.self-as-int" name="self-as-int" pos="8" ref="187.393.467"/>
//   <o base=".if" line="189" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ" name="@" pos="8"> 
//     <o base=".lte" line="190" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ" pos="15"> 
//       <o base="value" line="190" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ.ρ" pos="10" ref="187.175.467"/>
//       <o base="org.eolang.float" data="float" line="190" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ.α0" pos="20">0.0</o>
//     </o>
//     <o base="self-as-int" line="191" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.α0" pos="10" ref="188"/>
//     <o base=".plus" line="192" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.α1" pos="21"> 
//       <o base="self-as-int" line="192" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.α1.ρ" pos="10" ref="188"/>
//       <o base="org.eolang.int" data="int" line="192" loc="Φ.org.eolang.math.number$ceil$t1$a2.φ.α1.α0" pos="27">1</o>
//     </o>
//   </o>
//   <o level="1" line="187.175.467" loc="Φ.org.eolang.math.number$ceil$t1$a2.value" name="value"/>
//   <o level="2" line="187.37.467" loc="Φ.org.eolang.math.number$ceil$t1$a2.is-int" name="is-int"/>
//   <o level="2" line="187.69.467" loc="Φ.org.eolang.math.number$ceil$t1$a2.is-nan" name="is-nan"/>
//   <o level="2" line="187.393.467" loc="Φ.org.eolang.math.number$ceil$t1$a2.as-int" name="as-int"/>
// </o>
@XmirObject(name = "number$ceil$t1$a2", oname = "number$ceil$t1$a2", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/math/number.eo")
public final class EOnumber$EOceil$EOt1$EOa2 extends PhDefault {
  public EOnumber$EOceil$EOt1$EOa2(final Phi sigma) {
    super(sigma);
    this.add("self-as-int", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(new PhMethod(new PhMethod(rho, "σ"), "σ"), "as-int");
        ret = new PhLocated(ret, 188, 8, "Φ.org.eolang.math.number$ceil$t1$a2.self-as-int");
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(new PhMethod(rho, "σ"), "value");
        ret_base_base = new PhLocated(ret_base_base, 190, 10, "Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "lte");
        ret_base = new PhLocated(ret_base, 190, 15, "Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 190, 20, "Φ.org.eolang.math.number$ceil$t1$a2.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(0.0d));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "if");
        ret = new PhLocated(ret, 189, 8, "Φ.org.eolang.math.number$ceil$t1$a2.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "self-as-int");
          ret_1 = new PhLocated(ret_1, 191, 10, "Φ.org.eolang.math.number$ceil$t1$a2.φ.α0");
        Phi ret_2_base = new PhMethod(rho, "self-as-int");
          ret_2_base = new PhLocated(ret_2_base, 192, 10, "Φ.org.eolang.math.number$ceil$t1$a2.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "plus");
          ret_2 = new PhLocated(ret_2, 192, 21, "Φ.org.eolang.math.number$ceil$t1$a2.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 192, 27, "Φ.org.eolang.math.number$ceil$t1$a2.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(1L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }
}
