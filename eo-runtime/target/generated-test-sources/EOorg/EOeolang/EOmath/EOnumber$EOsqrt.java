
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOmath;

import org.eolang.*;

// <o abstract="" ancestors="1" line="337" loc="Φ.org.eolang.math.number$sqrt" name="number$sqrt" original-name="sqrt" parent="number" pos="2"> 
//   <o base="as-float" const="" line="338" loc="Φ.org.eolang.math.number$sqrt.value" name="value" pos="4" ref="337.390.465"/>
//   <o base="number" line="339" loc="Φ.org.eolang.math.number$sqrt.φ" name="@" pos="4" ref="34"> 
//     <o base="org.eolang.switch" line="340" loc="Φ.org.eolang.math.number$sqrt.φ.α0" pos="6"> 
//       <o base="org.eolang.tuple" data="tuple" line="341" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α0" pos="8"> 
//         <o base="is-nan" line="342" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α0.α0" pos="10" ref="337.69.465"/>
//         <o base="org.eolang.nan" line="343" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α0.α1" pos="10"/>
//       </o>
//       <o base="org.eolang.tuple" data="tuple" line="344" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α1" pos="8"> 
//         <o base=".eq" line="345" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0" pos="10"> 
//           <o base="org.eolang.positive-infinity" line="346" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0.ρ" pos="12"/>
//           <o base="n" line="347" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0.α0" pos="12" ref="337.34.465"/>
//         </o>
//         <o base="org.eolang.positive-infinity" line="348" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α1.α1" pos="10"/>
//       </o>
//       <o base="org.eolang.tuple" data="tuple" line="349" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α2" pos="8"> 
//         <o base=".eq" line="350" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0" pos="10"> 
//           <o base="org.eolang.negative-infinity" line="351" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0.ρ" pos="12"/>
//           <o base="n" line="352" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0.α0" pos="12" ref="337.34.465"/>
//         </o>
//         <o base="org.eolang.nan" line="353" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α2.α1" pos="10"/>
//       </o>
//       <o base="org.eolang.tuple" data="tuple" line="354" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3" pos="8"> 
//         <o base=".lt" line="355" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0" pos="10"> 
//           <o base="n" line="356" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.ρ" pos="12" ref="337.34.465"/>
//           <o base=".minus" line="357" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0" pos="13"> 
//             <o base="n" line="357" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0.ρ" pos="12" ref="337.34.465"/>
//             <o base="n" line="357" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0.α0" pos="20" ref="337.34.465"/>
//           </o>
//         </o>
//         <o base="org.eolang.nan" line="358" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α3.α1" pos="10"/>
//       </o>
//       <o base="org.eolang.tuple" data="tuple" line="359" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α4" pos="8"> 
//         <o base="org.eolang.bool" data="bool" line="360" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α4.α0" pos="10">TRUE</o>
//         <o base="babylonian-method" line="361" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α4.α1" pos="10" ref="363"> 
//           <o base="value" line="362" loc="Φ.org.eolang.math.number$sqrt.φ.α0.α4.α1.α0" pos="12" ref="338"/>
//         </o>
//       </o>
//     </o>
//   </o>
//   <o base="number$sqrt$babylonian-method" cut="416" line="363" loc="Φ.org.eolang.math.number$sqrt.babylonian-method" name="babylonian-method" pos="4" ref="363"> 
//     <o as="n" base="n" level="2" loc="Φ.org.eolang.math.number$sqrt.babylonian-method.α0" ref="337.34.465"/>
//     <o as="is-nan" base="is-nan" level="2" loc="Φ.org.eolang.math.number$sqrt.babylonian-method.α1" ref="337.69.465"/>
//     <o as="as-float" base="as-float" level="2" loc="Φ.org.eolang.math.number$sqrt.babylonian-method.α2" ref="337.390.465"/>
//   </o>
//   <o level="1" line="337.34.465" loc="Φ.org.eolang.math.number$sqrt.n" name="n"/>
//   <o level="1" line="337.69.465" loc="Φ.org.eolang.math.number$sqrt.is-nan" name="is-nan"/>
//   <o level="1" line="337.390.465" loc="Φ.org.eolang.math.number$sqrt.as-float" name="as-float"/>
// </o>
@XmirObject(name = "number$sqrt", oname = "sqrt", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/math/number.eo")
public final class EOnumber$EOsqrt extends PhDefault {
  public EOnumber$EOsqrt(final Phi sigma) {
    super(sigma);
    this.add("value", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(new PhMethod(rho, "σ"), "as-float");
        ret = new PhLocated(ret, 338, 4, "Φ.org.eolang.math.number$sqrt.value");
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("math").get().attr("number").get();
        ret = new PhLocated(ret, 339, 4, "Φ.org.eolang.math.number$sqrt.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("switch").get();
          ret_1 = new PhLocated(ret_1, 340, 6, "Φ.org.eolang.math.number$sqrt.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_1 = new PhLocated(ret_1_1, 341, 8, "Φ.org.eolang.math.number$sqrt.φ.α0.α0");
            Phi[] ret_1_1_a = new Phi[2];
            Phi ret_1_1_a0 = new PhMethod(new PhMethod(rho, "σ"), "is-nan");
              ret_1_1_a0 = new PhLocated(ret_1_1_a0, 342, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α0.α0");
            ret_1_1_a[0] = ret_1_1_a0;
            Phi ret_1_1_a1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nan").get();
              ret_1_1_a1 = new PhLocated(ret_1_1_a1, 343, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α0.α1");
            ret_1_1_a[1] = ret_1_1_a1;
            ret_1_1 = new PhWith(new PhCopy(ret_1_1), "Δ", new Data.Value<Phi[]>(ret_1_1_a));
          Phi ret_1_2 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_2 = new PhLocated(ret_1_2, 344, 8, "Φ.org.eolang.math.number$sqrt.φ.α0.α1");
            Phi[] ret_1_2_a = new Phi[2];
            Phi ret_1_2_a0_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("positive-infinity").get();
              ret_1_2_a0_base = new PhLocated(ret_1_2_a0_base, 346, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0.ρ");
            Phi ret_1_2_a0 = new PhMethod(ret_1_2_a0_base, "eq");
              ret_1_2_a0 = new PhLocated(ret_1_2_a0, 345, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0");
            ret_1_2_a0 = new PhCopy(ret_1_2_a0);
              Phi ret_1_2_a0_1 = new PhMethod(new PhMethod(rho, "σ"), "n");
                ret_1_2_a0_1 = new PhLocated(ret_1_2_a0_1, 347, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α1.α0.α0");
              ret_1_2_a0 = new PhWith(ret_1_2_a0, 0, ret_1_2_a0_1);
            ret_1_2_a[0] = ret_1_2_a0;
            Phi ret_1_2_a1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("positive-infinity").get();
              ret_1_2_a1 = new PhLocated(ret_1_2_a1, 348, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α1.α1");
            ret_1_2_a[1] = ret_1_2_a1;
            ret_1_2 = new PhWith(new PhCopy(ret_1_2), "Δ", new Data.Value<Phi[]>(ret_1_2_a));
          Phi ret_1_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_3 = new PhLocated(ret_1_3, 349, 8, "Φ.org.eolang.math.number$sqrt.φ.α0.α2");
            Phi[] ret_1_3_a = new Phi[2];
            Phi ret_1_3_a0_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("negative-infinity").get();
              ret_1_3_a0_base = new PhLocated(ret_1_3_a0_base, 351, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0.ρ");
            Phi ret_1_3_a0 = new PhMethod(ret_1_3_a0_base, "eq");
              ret_1_3_a0 = new PhLocated(ret_1_3_a0, 350, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0");
            ret_1_3_a0 = new PhCopy(ret_1_3_a0);
              Phi ret_1_3_a0_1 = new PhMethod(new PhMethod(rho, "σ"), "n");
                ret_1_3_a0_1 = new PhLocated(ret_1_3_a0_1, 352, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α2.α0.α0");
              ret_1_3_a0 = new PhWith(ret_1_3_a0, 0, ret_1_3_a0_1);
            ret_1_3_a[0] = ret_1_3_a0;
            Phi ret_1_3_a1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nan").get();
              ret_1_3_a1 = new PhLocated(ret_1_3_a1, 353, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α2.α1");
            ret_1_3_a[1] = ret_1_3_a1;
            ret_1_3 = new PhWith(new PhCopy(ret_1_3), "Δ", new Data.Value<Phi[]>(ret_1_3_a));
          Phi ret_1_4 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_4 = new PhLocated(ret_1_4, 354, 8, "Φ.org.eolang.math.number$sqrt.φ.α0.α3");
            Phi[] ret_1_4_a = new Phi[2];
            Phi ret_1_4_a0_base = new PhMethod(new PhMethod(rho, "σ"), "n");
              ret_1_4_a0_base = new PhLocated(ret_1_4_a0_base, 356, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.ρ");
            Phi ret_1_4_a0 = new PhMethod(ret_1_4_a0_base, "lt");
              ret_1_4_a0 = new PhLocated(ret_1_4_a0, 355, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0");
            ret_1_4_a0 = new PhCopy(ret_1_4_a0);
              Phi ret_1_4_a0_1_base = new PhMethod(new PhMethod(rho, "σ"), "n");
                ret_1_4_a0_1_base = new PhLocated(ret_1_4_a0_1_base, 357, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0.ρ");
              Phi ret_1_4_a0_1 = new PhMethod(ret_1_4_a0_1_base, "minus");
                ret_1_4_a0_1 = new PhLocated(ret_1_4_a0_1, 357, 13, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0");
              ret_1_4_a0_1 = new PhCopy(ret_1_4_a0_1);
                Phi ret_1_4_a0_1_1 = new PhMethod(new PhMethod(rho, "σ"), "n");
                  ret_1_4_a0_1_1 = new PhLocated(ret_1_4_a0_1_1, 357, 20, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α0.α0.α0");
                ret_1_4_a0_1 = new PhWith(ret_1_4_a0_1, 0, ret_1_4_a0_1_1);
              ret_1_4_a0 = new PhWith(ret_1_4_a0, 0, ret_1_4_a0_1);
            ret_1_4_a[0] = ret_1_4_a0;
            Phi ret_1_4_a1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nan").get();
              ret_1_4_a1 = new PhLocated(ret_1_4_a1, 358, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α3.α1");
            ret_1_4_a[1] = ret_1_4_a1;
            ret_1_4 = new PhWith(new PhCopy(ret_1_4), "Δ", new Data.Value<Phi[]>(ret_1_4_a));
          Phi ret_1_5 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_5 = new PhLocated(ret_1_5, 359, 8, "Φ.org.eolang.math.number$sqrt.φ.α0.α4");
            Phi[] ret_1_5_a = new Phi[2];
            Phi ret_1_5_a0 = new EOorg.EOeolang.EObool(Phi.Φ);
              ret_1_5_a0 = new PhLocated(ret_1_5_a0, 360, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α4.α0");
              ret_1_5_a0 = new PhWith(ret_1_5_a0, "Δ", new Data.Value<>(Boolean.TRUE));
            ret_1_5_a[0] = ret_1_5_a0;
            Phi ret_1_5_a1 = new PhMethod(rho, "babylonian-method");
              ret_1_5_a1 = new PhLocated(ret_1_5_a1, 361, 10, "Φ.org.eolang.math.number$sqrt.φ.α0.α4.α1");
            ret_1_5_a1 = new PhCopy(ret_1_5_a1);
              Phi ret_1_5_a1_1 = new PhMethod(rho, "value");
                ret_1_5_a1_1 = new PhLocated(ret_1_5_a1_1, 362, 12, "Φ.org.eolang.math.number$sqrt.φ.α0.α4.α1.α0");
              ret_1_5_a1 = new PhWith(ret_1_5_a1, 0, ret_1_5_a1_1);
            ret_1_5_a[1] = ret_1_5_a1;
            ret_1_5 = new PhWith(new PhCopy(ret_1_5), "Δ", new Data.Value<Phi[]>(ret_1_5_a));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
          ret_1 = new PhWith(ret_1, 2, ret_1_3);
          ret_1 = new PhWith(ret_1, 3, ret_1_4);
          ret_1 = new PhWith(ret_1, 4, ret_1_5);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("babylonian-method", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOnumber$EOsqrt$EObabylonian_method(rho);
        ret = new PhLocated(ret, 363, 4, "Φ.org.eolang.math.number$sqrt.babylonian-method");
      return ret;
    })));
  }
}
