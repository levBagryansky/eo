
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="273" loc="Φ.org.eolang.standard-root-and-root" name="standard-root-and-root" original-name="standard-root-and-root" pos="0"> 
//   <o base=".stdout" line="274" loc="Φ.org.eolang.standard-root-and-root.stand-root" name="stand-root" pos="7"> 
//     <o base=".io" line="274" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ" pos="4"> 
//       <o base=".eolang" line="274" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ" pos="2"> 
//         <o base=".org" line="274" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ" pos="2"> 
//           <o base="Q" line="274" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ.ρ" pos="2"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="275" loc="Φ.org.eolang.standard-root-and-root.stand-root.α0" pos="4">one</o>
//   </o>
//   <o base=".stdout" line="276" loc="Φ.org.eolang.standard-root-and-root.root" name="root" pos="17"> 
//     <o base=".io" line="276" loc="Φ.org.eolang.standard-root-and-root.root.ρ" pos="14"> 
//       <o base=".eolang" line="276" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ" pos="7"> 
//         <o base=".org" line="276" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ" pos="3"> 
//           <o base="Q" line="276" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ.ρ" pos="2"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="277" loc="Φ.org.eolang.standard-root-and-root.root.α0" pos="4">one</o>
//   </o>
//   <o base=".eq" line="278" loc="Φ.org.eolang.standard-root-and-root.φ" name="@" pos="2"> 
//     <o base="root" line="279" loc="Φ.org.eolang.standard-root-and-root.φ.ρ" pos="4" ref="276"/>
//     <o base="stand-root" line="280" loc="Φ.org.eolang.standard-root-and-root.φ.α0" pos="4" ref="274"/>
//   </o>
// </o>
@XmirObject(name = "standard-root-and-rootTest", oname = "standard-root-and-root", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOstandard_root_and_rootTest extends PhDefault {
    
  public EOstandard_root_and_rootTest() {
    this.add("stand-root", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 274, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 274, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 274, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "io");
        ret_base = new PhLocated(ret_base, 274, 4, "Φ.org.eolang.standard-root-and-root.stand-root.ρ");
      Phi ret = new PhMethod(ret_base, "stdout");
        ret = new PhLocated(ret, 274, 7, "Φ.org.eolang.standard-root-and-root.stand-root");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 275, 4, "Φ.org.eolang.standard-root-and-root.stand-root.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("one"));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("root", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 276, 2, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 276, 3, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 276, 7, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "io");
        ret_base = new PhLocated(ret_base, 276, 14, "Φ.org.eolang.standard-root-and-root.root.ρ");
      Phi ret = new PhMethod(ret_base, "stdout");
        ret = new PhLocated(ret, 276, 17, "Φ.org.eolang.standard-root-and-root.root");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 277, 4, "Φ.org.eolang.standard-root-and-root.root.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("one"));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "root");
        ret_base = new PhLocated(ret_base, 279, 4, "Φ.org.eolang.standard-root-and-root.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 278, 2, "Φ.org.eolang.standard-root-and-root.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "stand-root");
          ret_1 = new PhLocated(ret_1, 280, 4, "Φ.org.eolang.standard-root-and-root.φ.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOstandard_root_and_rootTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
