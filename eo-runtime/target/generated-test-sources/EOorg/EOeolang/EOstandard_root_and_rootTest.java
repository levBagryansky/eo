
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="282" loc="Φ.org.eolang.standard-root-and-root" name="standard-root-and-root" original-name="standard-root-and-root" pos="0"> 
//   <o base=".sprintf" line="283" loc="Φ.org.eolang.standard-root-and-root.stand-root" name="stand-root" pos="8"> 
//     <o base=".txt" line="283" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ" pos="4"> 
//       <o base=".eolang" line="283" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ" pos="2"> 
//         <o base=".org" line="283" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ" pos="2"> 
//           <o base="Q" line="283" loc="Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ.ρ" pos="2"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="284" loc="Φ.org.eolang.standard-root-and-root.stand-root.α0" pos="4">one %s</o>
//     <o base="org.eolang.string" data="string" line="285" loc="Φ.org.eolang.standard-root-and-root.stand-root.α1" pos="4">two</o>
//   </o>
//   <o base=".sprintf" line="286" loc="Φ.org.eolang.standard-root-and-root.root" name="root" pos="18"> 
//     <o base=".txt" line="286" loc="Φ.org.eolang.standard-root-and-root.root.ρ" pos="14"> 
//       <o base=".eolang" line="286" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ" pos="7"> 
//         <o base=".org" line="286" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ" pos="3"> 
//           <o base="Q" line="286" loc="Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ.ρ" pos="2"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="287" loc="Φ.org.eolang.standard-root-and-root.root.α0" pos="4">%s two</o>
//     <o base="org.eolang.string" data="string" line="288" loc="Φ.org.eolang.standard-root-and-root.root.α1" pos="4">one</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="289" loc="Φ.org.eolang.standard-root-and-root.φ" name="@" pos="2"> 
//     <o base="root" line="290" loc="Φ.org.eolang.standard-root-and-root.φ.α0" pos="4" ref="286"/>
//     <o base=".equal-to" line="291" loc="Φ.org.eolang.standard-root-and-root.φ.α1" pos="5"> 
//       <o base="$" line="291" loc="Φ.org.eolang.standard-root-and-root.φ.α1.ρ" pos="4"/>
//       <o base="stand-root" line="291" loc="Φ.org.eolang.standard-root-and-root.φ.α1.α0" pos="15" ref="283"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "standard-root-and-rootTest", oname = "standard-root-and-root", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOstandard_root_and_rootTest extends PhDefault {
  public EOstandard_root_and_rootTest() {
    this.add("stand-root", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 283, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 283, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 283, 2, "Φ.org.eolang.standard-root-and-root.stand-root.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "txt");
        ret_base = new PhLocated(ret_base, 283, 4, "Φ.org.eolang.standard-root-and-root.stand-root.ρ");
      Phi ret = new PhMethod(ret_base, "sprintf");
        ret = new PhLocated(ret, 283, 8, "Φ.org.eolang.standard-root-and-root.stand-root");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 284, 4, "Φ.org.eolang.standard-root-and-root.stand-root.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("one %s"));
        Phi ret_2 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 285, 4, "Φ.org.eolang.standard-root-and-root.stand-root.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>("two"));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("root", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 286, 2, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 286, 3, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 286, 7, "Φ.org.eolang.standard-root-and-root.root.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "txt");
        ret_base = new PhLocated(ret_base, 286, 14, "Φ.org.eolang.standard-root-and-root.root.ρ");
      Phi ret = new PhMethod(ret_base, "sprintf");
        ret = new PhLocated(ret, 286, 18, "Φ.org.eolang.standard-root-and-root.root");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 287, 4, "Φ.org.eolang.standard-root-and-root.root.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("%s two"));
        Phi ret_2 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 288, 4, "Φ.org.eolang.standard-root-and-root.root.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>("one"));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 289, 2, "Φ.org.eolang.standard-root-and-root.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "root");
          ret_1 = new PhLocated(ret_1, 290, 4, "Φ.org.eolang.standard-root-and-root.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 291, 4, "Φ.org.eolang.standard-root-and-root.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 291, 5, "Φ.org.eolang.standard-root-and-root.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new PhMethod(rho, "stand-root");
            ret_2_1 = new PhLocated(ret_2_1, 291, 15, "Φ.org.eolang.standard-root-and-root.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOstandard_root_and_rootTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
