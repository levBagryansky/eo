
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="120" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity" name="positive-infinity-gt-positive-infinity" original-name="positive-infinity-gt-positive-infinity" pos="0"> 
//   <o base="org.eolang.positive-infinity" line="121" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity.pos-inf" name="pos-inf" pos="2"/>
//   <o base=".not" line="122" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity.φ" name="@" pos="2"> 
//     <o base=".gt" line="123" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ" pos="4"> 
//       <o base="pos-inf" line="124" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ.ρ" pos="6" ref="121"/>
//       <o base="pos-inf" line="125" loc="Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ.α0" pos="6" ref="121"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "positive-infinity-gt-positive-infinityTest", oname = "positive-infinity-gt-positive-infinity", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/positive-infinity-tests.eo")
public final class EOpositive_infinity_gt_positive_infinityTest extends PhDefault {
    
  public EOpositive_infinity_gt_positive_infinityTest() {
    this.add("pos-inf", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("positive-infinity").get();
        ret = new PhLocated(ret, 121, 2, "Φ.org.eolang.positive-infinity-gt-positive-infinity.pos-inf");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(rho, "pos-inf");
        ret_base_base = new PhLocated(ret_base_base, 124, 6, "Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "gt");
        ret_base = new PhLocated(ret_base, 123, 4, "Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "pos-inf");
          ret_base_1 = new PhLocated(ret_base_1, 125, 6, "Φ.org.eolang.positive-infinity-gt-positive-infinity.φ.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "not");
        ret = new PhLocated(ret, 122, 2, "Φ.org.eolang.positive-infinity-gt-positive-infinity.φ");
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOpositive_infinity_gt_positive_infinityTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
