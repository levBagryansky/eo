
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="300" loc="Φ.org.eolang.compares-two-foreign-objects" name="compares-two-foreign-objects" original-name="compares-two-foreign-objects" pos="0"> 
//   <o base=".<" line="301" loc="Φ.org.eolang.compares-two-foreign-objects.vtx" name="vtx" pos="8"> 
//     <o base="org.eolang.io.stdout" line="301" loc="Φ.org.eolang.compares-two-foreign-objects.vtx.ρ" pos="2"/>
//   </o>
//   <o base="org.eolang.nop" line="302" loc="Φ.org.eolang.compares-two-foreign-objects.φ" name="@" pos="2"> 
//     <o base=".and" line="303" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0" pos="4"> 
//       <o base=".eq" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ" pos="9"> 
//         <o base="vtx" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.ρ" pos="6" ref="301"/>
//         <o base=".<" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0" pos="25"> 
//           <o base=".stdout" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ" pos="18"> 
//             <o base=".io" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ" pos="15"> 
//               <o base=".eolang" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ" pos="13"> 
//                 <o base=".org" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ.ρ" pos="13"> 
//                   <o base="Q" line="304" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ.ρ.ρ" pos="13"/>
//                 </o>
//               </o>
//             </o>
//           </o>
//         </o>
//       </o>
//       <o base=".eq" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0" pos="9"> 
//         <o base="vtx" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.ρ" pos="6" ref="301"/>
//         <o base=".<" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0" pos="35"> 
//           <o base=".stdout" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ" pos="28"> 
//             <o base=".io" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ" pos="25"> 
//               <o base=".eolang" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ" pos="18"> 
//                 <o base=".org" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ.ρ" pos="14"> 
//                   <o base="Q" line="305" loc="Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ.ρ.ρ" pos="13"/>
//                 </o>
//               </o>
//             </o>
//           </o>
//         </o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "compares-two-foreign-objectsTest", oname = "compares-two-foreign-objects", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOcompares_two_foreign_objectsTest extends PhDefault {
    
  public EOcompares_two_foreign_objectsTest() {
    this.add("vtx", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("io").get().attr("stdout").get();
        ret_base = new PhLocated(ret_base, 301, 2, "Φ.org.eolang.compares-two-foreign-objects.vtx.ρ");
      Phi ret = new PhMethod(ret_base, "ν");
        ret = new PhLocated(ret, 301, 8, "Φ.org.eolang.compares-two-foreign-objects.vtx");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
        ret = new PhLocated(ret, 302, 2, "Φ.org.eolang.compares-two-foreign-objects.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "vtx");
          ret_1_base_base = new PhLocated(ret_1_base_base, 304, 6, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "eq");
          ret_1_base = new PhLocated(ret_1_base, 304, 9, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1_base_base_base_base_base = Phi.Φ;
            ret_1_base_1_base_base_base_base_base = new PhLocated(ret_1_base_1_base_base_base_base_base, 304, 13, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ.ρ.ρ");
          Phi ret_1_base_1_base_base_base_base = new PhMethod(ret_1_base_1_base_base_base_base_base, "org");
            ret_1_base_1_base_base_base_base = new PhLocated(ret_1_base_1_base_base_base_base, 304, 13, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ.ρ");
          Phi ret_1_base_1_base_base_base = new PhMethod(ret_1_base_1_base_base_base_base, "eolang");
            ret_1_base_1_base_base_base = new PhLocated(ret_1_base_1_base_base_base, 304, 13, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ.ρ");
          Phi ret_1_base_1_base_base = new PhMethod(ret_1_base_1_base_base_base, "io");
            ret_1_base_1_base_base = new PhLocated(ret_1_base_1_base_base, 304, 15, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ.ρ");
          Phi ret_1_base_1_base = new PhMethod(ret_1_base_1_base_base, "stdout");
            ret_1_base_1_base = new PhLocated(ret_1_base_1_base, 304, 18, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0.ρ");
          Phi ret_1_base_1 = new PhMethod(ret_1_base_1_base, "ν");
            ret_1_base_1 = new PhLocated(ret_1_base_1, 304, 25, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.ρ.α0");
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "and");
          ret_1 = new PhLocated(ret_1, 303, 4, "Φ.org.eolang.compares-two-foreign-objects.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "vtx");
            ret_1_1_base = new PhLocated(ret_1_1_base, 305, 6, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "eq");
            ret_1_1 = new PhLocated(ret_1_1, 305, 9, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1_base_base_base_base_base = Phi.Φ;
              ret_1_1_1_base_base_base_base_base = new PhLocated(ret_1_1_1_base_base_base_base_base, 305, 13, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ.ρ.ρ");
            Phi ret_1_1_1_base_base_base_base = new PhMethod(ret_1_1_1_base_base_base_base_base, "org");
              ret_1_1_1_base_base_base_base = new PhLocated(ret_1_1_1_base_base_base_base, 305, 14, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ.ρ");
            Phi ret_1_1_1_base_base_base = new PhMethod(ret_1_1_1_base_base_base_base, "eolang");
              ret_1_1_1_base_base_base = new PhLocated(ret_1_1_1_base_base_base, 305, 18, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ.ρ");
            Phi ret_1_1_1_base_base = new PhMethod(ret_1_1_1_base_base_base, "io");
              ret_1_1_1_base_base = new PhLocated(ret_1_1_1_base_base, 305, 25, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ.ρ");
            Phi ret_1_1_1_base = new PhMethod(ret_1_1_1_base_base, "stdout");
              ret_1_1_1_base = new PhLocated(ret_1_1_1_base, 305, 28, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0.ρ");
            Phi ret_1_1_1 = new PhMethod(ret_1_1_1_base, "ν");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 305, 35, "Φ.org.eolang.compares-two-foreign-objects.φ.α0.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcompares_two_foreign_objectsTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
