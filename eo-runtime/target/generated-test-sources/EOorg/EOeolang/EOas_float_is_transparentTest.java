
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="425" loc="Φ.org.eolang.as-float-is-transparent" name="as-float-is-transparent" original-name="as-float-is-transparent" pos="0"> 
//   <o base=".as-bytes" line="426" loc="Φ.org.eolang.as-float-is-transparent.b" name="b" pos="6"> 
//     <o base="org.eolang.float" data="float" line="426" loc="Φ.org.eolang.as-float-is-transparent.b.ρ" pos="2">33.0</o>
//   </o>
//   <o base="org.eolang.nop" line="427" loc="Φ.org.eolang.as-float-is-transparent.φ" name="@" pos="2"> 
//     <o base=".eq" line="428" loc="Φ.org.eolang.as-float-is-transparent.φ.α0" pos="4"> 
//       <o base=".<" line="429" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.ρ" pos="25"> 
//         <o base=".as-bytes" line="429" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ" pos="16"> 
//           <o base=".as-float" line="429" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ.ρ" pos="7"> 
//             <o base="b" line="429" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ.ρ.ρ" pos="6" ref="426"/>
//           </o>
//         </o>
//       </o>
//       <o base=".<" line="430" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.α0" pos="7"> 
//         <o base="b" line="430" loc="Φ.org.eolang.as-float-is-transparent.φ.α0.α0.ρ" pos="6" ref="426"/>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "as-float-is-transparentTest", oname = "as-float-is-transparent", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bytes-tests.eo")
public final class EOas_float_is_transparentTest extends PhDefault {
    
  public EOas_float_is_transparentTest() {
    this.add("b", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
        ret_base = new PhLocated(ret_base, 426, 2, "Φ.org.eolang.as-float-is-transparent.b.ρ");
        ret_base = new PhWith(ret_base, "Δ", new Data.Value<>(33.0d));
      Phi ret = new PhMethod(ret_base, "as-bytes");
        ret = new PhLocated(ret, 426, 6, "Φ.org.eolang.as-float-is-transparent.b");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
        ret = new PhLocated(ret, 427, 2, "Φ.org.eolang.as-float-is-transparent.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base_base_base = new PhMethod(rho, "b");
          ret_1_base_base_base_base = new PhLocated(ret_1_base_base_base_base, 429, 6, "Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ.ρ.ρ");
        Phi ret_1_base_base_base = new PhMethod(ret_1_base_base_base_base, "as-float");
          ret_1_base_base_base = new PhLocated(ret_1_base_base_base, 429, 7, "Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ.ρ");
        Phi ret_1_base_base = new PhMethod(ret_1_base_base_base, "as-bytes");
          ret_1_base_base = new PhLocated(ret_1_base_base, 429, 16, "Φ.org.eolang.as-float-is-transparent.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "ν");
          ret_1_base = new PhLocated(ret_1_base, 429, 25, "Φ.org.eolang.as-float-is-transparent.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 428, 4, "Φ.org.eolang.as-float-is-transparent.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "b");
            ret_1_1_base = new PhLocated(ret_1_1_base, 430, 6, "Φ.org.eolang.as-float-is-transparent.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "ν");
            ret_1_1 = new PhLocated(ret_1_1, 430, 7, "Φ.org.eolang.as-float-is-transparent.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOas_float_is_transparentTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
