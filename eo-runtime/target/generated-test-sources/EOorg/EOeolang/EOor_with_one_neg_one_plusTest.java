
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="192" loc="Φ.org.eolang.or-with-one-neg-one-plus" name="or-with-one-neg-one-plus" original-name="or-with-one-neg-one-plus" pos="0"> 
//   <o base=".not" line="193" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ" name="@" pos="2"> 
//     <o base=".eq" line="194" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ" pos="4"> 
//       <o base=".or" line="195" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ" pos="17"> 
//         <o base=".as-bytes" line="195" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.ρ" pos="8"> 
//           <o base="org.eolang.int" data="int" line="195" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.ρ.ρ" pos="6">-7</o>
//         </o>
//         <o base=".as-bytes" line="195" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.α0" pos="24" scope="scope-01f1e5cf-4269-4839-847b-c86567c2cea8"> 
//           <o base="org.eolang.int" data="int" line="195" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.α0.ρ" pos="22" scope="scope-01f1e5cf-4269-4839-847b-c86567c2cea8">23</o>
//         </o>
//       </o>
//       <o base=".as-bytes" line="196" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.α0" pos="7"> 
//         <o base="org.eolang.int" data="int" line="196" loc="Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.α0.ρ" pos="6">0</o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "or-with-one-neg-one-plusTest", oname = "or-with-one-neg-one-plus", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bytes-tests.eo")
public final class EOor_with_one_neg_one_plusTest extends PhDefault {
    
  public EOor_with_one_neg_one_plusTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = new EOorg.EOeolang.EOint(Phi.Φ);
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 195, 6, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.ρ.ρ");
        ret_base_base_base_base = new PhWith(ret_base_base_base_base, "Δ", new Data.Value<>(-7L));
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "as-bytes");
        ret_base_base_base = new PhLocated(ret_base_base_base, 195, 8, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "or");
        ret_base_base = new PhLocated(ret_base_base, 195, 17, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1_base = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_base_1_base = new PhLocated(ret_base_base_1_base, 195, 22, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.α0.ρ");
          ret_base_base_1_base = new PhWith(ret_base_base_1_base, "Δ", new Data.Value<>(23L));
        Phi ret_base_base_1 = new PhMethod(ret_base_base_1_base, "as-bytes");
          ret_base_base_1 = new PhLocated(ret_base_base_1, 195, 24, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.ρ.α0");
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "eq");
        ret_base = new PhLocated(ret_base, 194, 4, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1_base = new PhLocated(ret_base_1_base, 196, 6, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.α0.ρ");
          ret_base_1_base = new PhWith(ret_base_1_base, "Δ", new Data.Value<>(0L));
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "as-bytes");
          ret_base_1 = new PhLocated(ret_base_1, 196, 7, "Φ.org.eolang.or-with-one-neg-one-plus.φ.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "not");
        ret = new PhLocated(ret, 193, 2, "Φ.org.eolang.or-with-one-neg-one-plus.φ");
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOor_with_one_neg_one_plusTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
