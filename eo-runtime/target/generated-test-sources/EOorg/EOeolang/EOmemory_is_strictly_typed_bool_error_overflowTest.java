
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="99" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow" name="memory-is-strictly-typed-bool-error-overflow" original-name="memory-is-strictly-typed-bool-error-overflow" pos="0"> 
//   <o base="org.eolang.memory" line="100" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.m" name="m" pos="2"> 
//     <o base="org.eolang.bool" data="bool" line="100" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.m.α0" pos="9">FALSE</o>
//   </o>
//   <o base="org.eolang.nop" line="101" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ" name="@" pos="2"> 
//     <o base="org.eolang.hamcrest.assert-that" line="102" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0" pos="4"> 
//       <o base="org.eolang.try" line="103" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0" pos="6"> 
//         <o base="memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0" cut="102" line="104" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α0" pos="8" ref="104"> 
//           <o as="m" base="m" level="1" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α0.α0" ref="100"/>
//         </o>
//         <o base="memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1" cut="106" line="106" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α1" pos="8" ref="106"/>
//         <o base="org.eolang.nop" line="108" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α2" pos="8"/>
//       </o>
//       <o base=".equal-to" line="109" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1" pos="7"> 
//         <o base="$" line="109" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1.ρ" pos="6"/>
//         <o base="org.eolang.string" data="string" line="109" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1.α0" pos="17">Not enough memory to write: expected <1> byte, got <2^61></o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "memory-is-strictly-typed-bool-error-overflowTest", oname = "memory-is-strictly-typed-bool-error-overflow", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/memory-tests.eo")
public final class EOmemory_is_strictly_typed_bool_error_overflowTest extends PhDefault {
  public EOmemory_is_strictly_typed_bool_error_overflowTest() {
    this.add("m", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 100, 2, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.m");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 100, 9, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.m.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.FALSE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
        ret = new PhLocated(ret, 101, 2, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
          ret_1 = new PhLocated(ret_1, 102, 4, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("try").get();
            ret_1_1 = new PhLocated(ret_1_1, 103, 6, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1 = new EOω1t1$EOt0$EOt0$EOa0(rho);
              ret_1_1_1 = new PhLocated(ret_1_1_1, 104, 8, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α0");
            Phi ret_1_1_2 = new EOω1t1$EOt0$EOt0$EOa1(rho);
              ret_1_1_2 = new PhLocated(ret_1_1_2, 106, 8, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α1");
            Phi ret_1_1_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
              ret_1_1_3 = new PhLocated(ret_1_1_3, 108, 8, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α0.α2");
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
            ret_1_1 = new PhWith(ret_1_1, 1, ret_1_1_2);
            ret_1_1 = new PhWith(ret_1_1, 2, ret_1_1_3);
          Phi ret_1_2_base = rho;
            ret_1_2_base = new PhLocated(ret_1_2_base, 109, 6, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1.ρ");
          Phi ret_1_2 = new PhMethod(ret_1_2_base, "equal-to");
            ret_1_2 = new PhLocated(ret_1_2, 109, 7, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1");
          ret_1_2 = new PhCopy(ret_1_2);
            Phi ret_1_2_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
              ret_1_2_1 = new PhLocated(ret_1_2_1, 109, 17, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow.φ.α0.α1.α0");
              ret_1_2_1 = new PhWith(ret_1_2_1, "Δ", new Data.Value<>("Not enough memory to write: expected <1> byte, got <2^61>"));
            ret_1_2 = new PhWith(ret_1_2, 0, ret_1_2_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmemory_is_strictly_typed_bool_error_overflowTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="104" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0" name="memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0" parent="memory-is-strictly-typed-bool-error-overflow" pos="8"> 
//   <o base=".write" line="105" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ" name="@" pos="11"> 
//     <o base="m" line="105" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ.ρ" pos="10" ref="104.100.462"/>
//     <o base="org.eolang.float" data="float" line="105" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ.α0" pos="18">8.612486788E7</o>
//   </o>
//   <o level="1" line="104.100.462" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.m" name="m"/>
// </o>
@XmirObject(name = "ω1t1$t0$t0$a0", oname = "ω1t1$t0$t0$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/memory-tests.eo")
public final class EOω1t1$EOt0$EOt0$EOa0 extends PhDefault {
  public EOω1t1$EOt0$EOt0$EOa0(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(new PhMethod(rho, "σ"), "m");
        ret_base = new PhLocated(ret_base, 105, 10, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ.ρ");
      Phi ret = new PhMethod(ret_base, "write");
        ret = new PhLocated(ret, 105, 11, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 105, 18, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a0.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(8.612486788E7d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}

// <o abstract="" ancestors="1" line="106" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1" name="memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1" parent="memory-is-strictly-typed-bool-error-overflow" pos="8"> 
//   <o line="106" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1.e" name="e" pos="9"/>
//   <o base="e" line="107" loc="Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1.φ" name="@" pos="10" ref="106"/>
// </o>
@XmirObject(name = "ω1t1$t0$t0$a1", oname = "ω1t1$t0$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/memory-tests.eo")
public final class EOω1t1$EOt0$EOt0$EOa1 extends PhDefault {
  public EOω1t1$EOt0$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("e", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "e");
        ret = new PhLocated(ret, 107, 10, "Φ.org.eolang.memory-is-strictly-typed-bool-error-overflow$t1$t0$t0$a1.φ");
      return ret;
    })));
  }
}
}
