
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="76" loc="Φ.org.eolang.try-without-error-block" name="try-without-error-block" original-name="try-without-error-block" pos="0"> 
//   <o base="org.eolang.hamcrest.assert-that" line="77" loc="Φ.org.eolang.try-without-error-block.φ" name="@" pos="2"> 
//     <o base="org.eolang.try" line="78" loc="Φ.org.eolang.try-without-error-block.φ.α0" pos="4"> 
//       <o base="try-without-error-block$t0$t0$a0" cut="58" line="79" loc="Φ.org.eolang.try-without-error-block.φ.α0.α0" pos="6" ref="79"/>
//       <o base="try-without-error-block$t0$t0$a1" cut="62" line="81" loc="Φ.org.eolang.try-without-error-block.φ.α0.α1" pos="6" ref="81"/>
//       <o base="org.eolang.nop" line="83" loc="Φ.org.eolang.try-without-error-block.φ.α0.α2" pos="6"/>
//     </o>
//     <o base=".equal-to" line="84" loc="Φ.org.eolang.try-without-error-block.φ.α1" pos="5"> 
//       <o base="$" line="84" loc="Φ.org.eolang.try-without-error-block.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="84" loc="Φ.org.eolang.try-without-error-block.φ.α1.α0" pos="15">32</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "try-without-error-blockTest", oname = "try-without-error-block", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/try-tests.eo")
public final class EOtry_without_error_blockTest extends PhDefault {
  public EOtry_without_error_blockTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 77, 2, "Φ.org.eolang.try-without-error-block.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("try").get();
          ret_1 = new PhLocated(ret_1, 78, 4, "Φ.org.eolang.try-without-error-block.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOω1t0$EOt0$EOa0(rho);
            ret_1_1 = new PhLocated(ret_1_1, 79, 6, "Φ.org.eolang.try-without-error-block.φ.α0.α0");
          Phi ret_1_2 = new EOω1t0$EOt0$EOa1(rho);
            ret_1_2 = new PhLocated(ret_1_2, 81, 6, "Φ.org.eolang.try-without-error-block.φ.α0.α1");
          Phi ret_1_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
            ret_1_3 = new PhLocated(ret_1_3, 83, 6, "Φ.org.eolang.try-without-error-block.φ.α0.α2");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
          ret_1 = new PhWith(ret_1, 2, ret_1_3);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 84, 4, "Φ.org.eolang.try-without-error-block.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 84, 5, "Φ.org.eolang.try-without-error-block.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 84, 15, "Φ.org.eolang.try-without-error-block.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(32L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtry_without_error_blockTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="79" loc="Φ.org.eolang.try-without-error-block$t0$t0$a0" name="try-without-error-block$t0$t0$a0" parent="try-without-error-block" pos="6"> 
//   <o base=".plus" line="80" loc="Φ.org.eolang.try-without-error-block$t0$t0$a0.φ" name="@" pos="10"> 
//     <o base="org.eolang.int" data="int" line="80" loc="Φ.org.eolang.try-without-error-block$t0$t0$a0.φ.ρ" pos="8">30</o>
//     <o base="org.eolang.int" data="int" line="80" loc="Φ.org.eolang.try-without-error-block$t0$t0$a0.φ.α0" pos="16">2</o>
//   </o>
// </o>
@XmirObject(name = "ω1t0$t0$a0", oname = "ω1t0$t0$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/try-tests.eo")
public final class EOω1t0$EOt0$EOa0 extends PhDefault {
  public EOω1t0$EOt0$EOa0(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new EOorg.EOeolang.EOint(Phi.Φ);
        ret_base = new PhLocated(ret_base, 80, 8, "Φ.org.eolang.try-without-error-block$t0$t0$a0.φ.ρ");
        ret_base = new PhWith(ret_base, "Δ", new Data.Value<>(30L));
      Phi ret = new PhMethod(ret_base, "plus");
        ret = new PhLocated(ret, 80, 10, "Φ.org.eolang.try-without-error-block$t0$t0$a0.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 80, 16, "Φ.org.eolang.try-without-error-block$t0$t0$a0.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(2L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}

// <o abstract="" ancestors="1" line="81" loc="Φ.org.eolang.try-without-error-block$t0$t0$a1" name="try-without-error-block$t0$t0$a1" parent="try-without-error-block" pos="6"> 
//   <o line="81" loc="Φ.org.eolang.try-without-error-block$t0$t0$a1.e" name="e" pos="7"/>
//   <o base="e" line="82" loc="Φ.org.eolang.try-without-error-block$t0$t0$a1.φ" name="@" pos="8" ref="81"/>
// </o>
@XmirObject(name = "ω1t0$t0$a1", oname = "ω1t0$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/try-tests.eo")
public final class EOω1t0$EOt0$EOa1 extends PhDefault {
  public EOω1t0$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("e", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "e");
        ret = new PhLocated(ret, 82, 8, "Φ.org.eolang.try-without-error-block$t0$t0$a1.φ");
      return ret;
    })));
  }
}
}
