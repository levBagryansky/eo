
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="539" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid" name="positive-infinity-as-bytes-is-valid" original-name="positive-infinity-as-bytes-is-valid" pos="0"> 
//   <o base=".eq" line="540" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ" name="@" pos="2"> 
//     <o base=".as-bytes" line="541" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.ρ" pos="21"> 
//       <o base="org.eolang.positive-infinity" line="541" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.ρ.ρ" pos="4"/>
//     </o>
//     <o base=".as-bytes" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.α0" pos="17"> 
//       <o base="positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" cut="239" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.α0.generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" name="generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" pos="8" ref="542"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "positive-infinity-as-bytes-is-validTest", oname = "positive-infinity-as-bytes-is-valid", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/positive-infinity-tests.eo")
public final class EOpositive_infinity_as_bytes_is_validTest extends PhDefault {
    
  public EOpositive_infinity_as_bytes_is_validTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("positive-infinity").get();
        ret_base_base = new PhLocated(ret_base_base, 541, 4, "Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "as-bytes");
        ret_base = new PhLocated(ret_base, 541, 21, "Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 540, 2, "Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new EOω1t0$EOt1$EOgenerated_scope_ab844ad3_cc4b_4f7d_beb6_6334aa1cd9c7(rho);
          ret_1_base = new PhLocated(ret_1_base, 542, 8, "Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.α0.generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7");
        Phi ret_1 = new PhMethod(ret_1_base, "as-bytes");
          ret_1 = new PhLocated(ret_1, 542, 17, "Φ.org.eolang.positive-infinity-as-bytes-is-valid.φ.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOpositive_infinity_as_bytes_is_validTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" name="positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" original-name="generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" parent="positive-infinity-as-bytes-is-valid" pos="8"> 
//   <o base=".div" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" name="org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" pos="8" scope="scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7"> 
//     <o base="org.eolang.float" data="float" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.ρ" pos="5" scope="scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7">1.0</o>
//     <o base="org.eolang.float" data="float" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.α0" pos="13" scope="scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7">0.0</o>
//   </o>
//   <o base="org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7" line="542" loc="Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.φ" name="@" pos="8" ref="542"/>
// </o>
@XmirObject(name = "ω1t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7", oname = "generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/positive-infinity-tests.eo")
public final class EOω1t0$EOt1$EOgenerated_scope_ab844ad3_cc4b_4f7d_beb6_6334aa1cd9c7 extends PhDefault {
    
  public EOω1t0$EOt1$EOgenerated_scope_ab844ad3_cc4b_4f7d_beb6_6334aa1cd9c7(final Phi sigma) {
    super(sigma);
    this.add("org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
        ret_base = new PhLocated(ret_base, 542, 5, "Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.ρ");
        ret_base = new PhWith(ret_base, "Δ", new Data.Value<>(1.0d));
      Phi ret = new PhMethod(ret_base, "div");
        ret = new PhLocated(ret, 542, 8, "Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 542, 13, "Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "org.eolang.scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7");
        ret = new PhLocated(ret, 542, 8, "Φ.org.eolang.positive-infinity-as-bytes-is-valid$t0$t1$generated-scope-ab844ad3-cc4b-4f7d-beb6-6334aa1cd9c7.φ");
      return ret;
    })));
  }
}
}
