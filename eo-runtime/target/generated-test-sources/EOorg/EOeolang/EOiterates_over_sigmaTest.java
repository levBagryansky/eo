
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="92" loc="Φ.org.eolang.iterates-over-sigma" name="iterates-over-sigma" original-name="iterates-over-sigma" pos="0"> 
//   <o base="org.eolang.memory" line="93" loc="Φ.org.eolang.iterates-over-sigma.x" name="x" pos="2"> 
//     <o base="org.eolang.int" data="int" line="93" loc="Φ.org.eolang.iterates-over-sigma.x.α0" pos="9">0</o>
//   </o>
//   <o base=".eq" line="94" loc="Φ.org.eolang.iterates-over-sigma.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="95" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ" pos="4"> 
//       <o base=".write" line="96" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α0" pos="7"> 
//         <o base="x" line="96" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α0.ρ" pos="6" ref="93"/>
//         <o base="org.eolang.bool" data="bool" line="96" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α0.α0" pos="14">TRUE</o>
//       </o>
//       <o base=".eq" line="97" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1" pos="6"> 
//         <o base="org.eolang.bool" data="bool" line="98" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.ρ" pos="8">TRUE</o>
//         <o base=".while" line="99" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0" pos="17"> 
//           <o base=".as-bool" line="99" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.ρ" pos="9"> 
//             <o base="x" line="99" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.ρ.ρ" pos="8" ref="93"/>
//           </o>
//           <o base="iterates-over-sigma$t1$t0$t1$t1$a1" cut="81" line="100" loc="Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.α0" pos="10" ref="100"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="102" loc="Φ.org.eolang.iterates-over-sigma.φ.α0" pos="4">FALSE</o>
//   </o>
// </o>
@XmirObject(name = "iterates-over-sigmaTest", oname = "iterates-over-sigma", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOiterates_over_sigmaTest extends PhDefault {
    
  public EOiterates_over_sigmaTest() {
    this.add("x", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 93, 2, "Φ.org.eolang.iterates-over-sigma.x");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 93, 9, "Φ.org.eolang.iterates-over-sigma.x.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret_base = new PhLocated(ret_base, 95, 4, "Φ.org.eolang.iterates-over-sigma.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new PhMethod(rho, "x");
          ret_base_1_base = new PhLocated(ret_base_1_base, 96, 6, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α0.ρ");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "write");
          ret_base_1 = new PhLocated(ret_base_1, 96, 7, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_base_1_1 = new PhLocated(ret_base_1_1, 96, 14, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α0.α0");
            ret_base_1_1 = new PhWith(ret_base_1_1, "Δ", new Data.Value<>(Boolean.TRUE));
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        Phi ret_base_2_base = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_base_2_base = new PhLocated(ret_base_2_base, 98, 8, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.ρ");
          ret_base_2_base = new PhWith(ret_base_2_base, "Δ", new Data.Value<>(Boolean.TRUE));
        Phi ret_base_2 = new PhMethod(ret_base_2_base, "eq");
          ret_base_2 = new PhLocated(ret_base_2, 97, 6, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1");
        ret_base_2 = new PhCopy(ret_base_2);
          Phi ret_base_2_1_base_base = new PhMethod(rho, "x");
            ret_base_2_1_base_base = new PhLocated(ret_base_2_1_base_base, 99, 8, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.ρ.ρ");
          Phi ret_base_2_1_base = new PhMethod(ret_base_2_1_base_base, "as-bool");
            ret_base_2_1_base = new PhLocated(ret_base_2_1_base, 99, 9, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.ρ");
          Phi ret_base_2_1 = new PhMethod(ret_base_2_1_base, "while");
            ret_base_2_1 = new PhLocated(ret_base_2_1, 99, 17, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0");
          ret_base_2_1 = new PhCopy(ret_base_2_1);
            Phi ret_base_2_1_1 = new EOω1t1$EOt0$EOt1$EOt1$EOa1(rho);
              ret_base_2_1_1 = new PhLocated(ret_base_2_1_1, 100, 10, "Φ.org.eolang.iterates-over-sigma.φ.ρ.α1.α0.α0");
            ret_base_2_1 = new PhWith(ret_base_2_1, 0, ret_base_2_1_1);
          ret_base_2 = new PhWith(ret_base_2, 0, ret_base_2_1);
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 94, 2, "Φ.org.eolang.iterates-over-sigma.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 102, 4, "Φ.org.eolang.iterates-over-sigma.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.FALSE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOiterates_over_sigmaTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="100" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1" name="iterates-over-sigma$t1$t0$t1$t1$a1" parent="iterates-over-sigma" pos="10"> 
//   <o line="100" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.i" name="i" pos="11"/>
//   <o base=".write" line="101" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ" name="@" pos="15"> 
//     <o base=".x" line="101" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.ρ" pos="13"> 
//       <o base="&" line="101" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.ρ.ρ" pos="12"/>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="101" loc="Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.α0" pos="22">FALSE</o>
//   </o>
// </o>
@XmirObject(name = "ω1t1$t0$t1$t1$a1", oname = "ω1t1$t0$t1$t1$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1t1$EOt0$EOt1$EOt1$EOa1 extends PhDefault {
    
  public EOω1t1$EOt0$EOt1$EOt1$EOa1(final Phi sigma) {
    super(sigma);
    this.add("i", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(rho, "σ");
        ret_base_base = new PhLocated(ret_base_base, 101, 12, "Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "x");
        ret_base = new PhLocated(ret_base, 101, 13, "Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.ρ");
      Phi ret = new PhMethod(ret_base, "write");
        ret = new PhLocated(ret, 101, 15, "Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 101, 22, "Φ.org.eolang.iterates-over-sigma$t1$t0$t1$t1$a1.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.FALSE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
