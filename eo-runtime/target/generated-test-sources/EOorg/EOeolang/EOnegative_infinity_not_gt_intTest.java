
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="136" loc="Φ.org.eolang.negative-infinity-not-gt-int" name="negative-infinity-not-gt-int" original-name="negative-infinity-not-gt-int" pos="0"> 
//   <o base=".eq" line="137" loc="Φ.org.eolang.negative-infinity-not-gt-int.φ" name="@" pos="2"> 
//     <o base=".gt" line="138" loc="Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ" pos="21"> 
//       <o base="org.eolang.negative-infinity" line="138" loc="Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="138" loc="Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ.α0" pos="25">42</o>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="139" loc="Φ.org.eolang.negative-infinity-not-gt-int.φ.α0" pos="4">FALSE</o>
//   </o>
// </o>
@XmirObject(name = "negative-infinity-not-gt-intTest", oname = "negative-infinity-not-gt-int", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/negative-infinity-tests.eo")
public final class EOnegative_infinity_not_gt_intTest extends PhDefault {
    
  public EOnegative_infinity_not_gt_intTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("negative-infinity").get();
        ret_base_base = new PhLocated(ret_base_base, 138, 4, "Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "gt");
        ret_base = new PhLocated(ret_base, 138, 21, "Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 138, 25, "Φ.org.eolang.negative-infinity-not-gt-int.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(42L));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 137, 2, "Φ.org.eolang.negative-infinity-not-gt-int.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 139, 4, "Φ.org.eolang.negative-infinity-not-gt-int.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.FALSE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOnegative_infinity_not_gt_intTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
