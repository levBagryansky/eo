
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="235" loc="Φ.org.eolang.times-multiple" name="times-multiple" original-name="times-multiple" pos="0"> 
//   <o base=".eq" line="236" loc="Φ.org.eolang.times-multiple.φ" name="@" pos="2"> 
//     <o base=".times" line="237" loc="Φ.org.eolang.times-multiple.φ.ρ" pos="4"> 
//       <o base="org.eolang.float" data="float" line="238" loc="Φ.org.eolang.times-multiple.φ.ρ.ρ" pos="6">-0.5745</o>
//       <o base="org.eolang.float" data="float" line="239" loc="Φ.org.eolang.times-multiple.φ.ρ.α0" pos="6">0.311985</o>
//       <o base="org.eolang.float" data="float" line="240" loc="Φ.org.eolang.times-multiple.φ.ρ.α1" pos="6">3.232</o>
//       <o base="org.eolang.float" data="float" line="241" loc="Φ.org.eolang.times-multiple.φ.ρ.α2" pos="6">-2.532</o>
//     </o>
//     <o base="org.eolang.float" data="float" line="242" loc="Φ.org.eolang.times-multiple.φ.α0" pos="4">1.4667591307996803</o>
//   </o>
// </o>
@XmirObject(name = "times-multipleTest", oname = "times-multiple", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/float-tests.eo")
public final class EOtimes_multipleTest extends PhDefault {
    
  public EOtimes_multipleTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
        ret_base_base = new PhLocated(ret_base_base, 238, 6, "Φ.org.eolang.times-multiple.φ.ρ.ρ");
        ret_base_base = new PhWith(ret_base_base, "Δ", new Data.Value<>(-0.5745d));
      Phi ret_base = new PhMethod(ret_base_base, "times");
        ret_base = new PhLocated(ret_base, 237, 4, "Φ.org.eolang.times-multiple.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 239, 6, "Φ.org.eolang.times-multiple.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(0.311985d));
        Phi ret_base_2 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_base_2 = new PhLocated(ret_base_2, 240, 6, "Φ.org.eolang.times-multiple.φ.ρ.α1");
          ret_base_2 = new PhWith(ret_base_2, "Δ", new Data.Value<>(3.232d));
        Phi ret_base_3 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_base_3 = new PhLocated(ret_base_3, 241, 6, "Φ.org.eolang.times-multiple.φ.ρ.α2");
          ret_base_3 = new PhWith(ret_base_3, "Δ", new Data.Value<>(-2.532d));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
        ret_base = new PhWith(ret_base, 2, ret_base_3);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 236, 2, "Φ.org.eolang.times-multiple.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 242, 4, "Φ.org.eolang.times-multiple.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1.4667591307996803d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtimes_multipleTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
