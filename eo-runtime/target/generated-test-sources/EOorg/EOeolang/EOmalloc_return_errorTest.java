
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="64" loc="Φ.org.eolang.malloc-return-error" name="malloc-return-error" original-name="malloc-return-error" pos="0"> 
//   <o base="org.eolang.heap" const="" line="65" loc="Φ.org.eolang.malloc-return-error.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="65" loc="Φ.org.eolang.malloc-return-error.h.α0" pos="7">2</o>
//   </o>
//   <o base=".eq" line="66" loc="Φ.org.eolang.malloc-return-error.φ" name="@" pos="2"> 
//     <o base="org.eolang.try" line="67" loc="Φ.org.eolang.malloc-return-error.φ.ρ" pos="4"> 
//       <o base="malloc-return-error$t1$t0$a0" cut="62" line="68" loc="Φ.org.eolang.malloc-return-error.φ.ρ.α0" pos="6" ref="68"> 
//         <o as="h" base="h" level="1" loc="Φ.org.eolang.malloc-return-error.φ.ρ.α0.α0" ref="65"/>
//       </o>
//       <o base="malloc-return-error$t1$t0$a1" cut="66" line="71" loc="Φ.org.eolang.malloc-return-error.φ.ρ.α1" pos="6" ref="71"/>
//       <o base="org.eolang.nop" line="73" loc="Φ.org.eolang.malloc-return-error.φ.ρ.α2" pos="6"/>
//     </o>
//     <o base="org.eolang.string" data="string" line="74" loc="Φ.org.eolang.malloc-return-error.φ.α0" pos="4">Allocation failed: bad alloc (not enough memory in the heap)</o>
//   </o>
// </o>
@XmirObject(name = "malloc-return-errorTest", oname = "malloc-return-error", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOmalloc_return_errorTest extends PhDefault {
    
  public EOmalloc_return_errorTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 65, 2, "Φ.org.eolang.malloc-return-error.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 65, 7, "Φ.org.eolang.malloc-return-error.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(2L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("try").get();
        ret_base = new PhLocated(ret_base, 67, 4, "Φ.org.eolang.malloc-return-error.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOω1t1$EOt0$EOa0(rho);
          ret_base_1 = new PhLocated(ret_base_1, 68, 6, "Φ.org.eolang.malloc-return-error.φ.ρ.α0");
        Phi ret_base_2 = new EOω1t1$EOt0$EOa1(rho);
          ret_base_2 = new PhLocated(ret_base_2, 71, 6, "Φ.org.eolang.malloc-return-error.φ.ρ.α1");
        Phi ret_base_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
          ret_base_3 = new PhLocated(ret_base_3, 73, 6, "Φ.org.eolang.malloc-return-error.φ.ρ.α2");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
        ret_base = new PhWith(ret_base, 2, ret_base_3);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 66, 2, "Φ.org.eolang.malloc-return-error.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 74, 4, "Φ.org.eolang.malloc-return-error.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("Allocation failed: bad alloc (not enough memory in the heap)"));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmalloc_return_errorTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="68" loc="Φ.org.eolang.malloc-return-error$t1$t0$a0" name="malloc-return-error$t1$t0$a0" parent="malloc-return-error" pos="6"> 
//   <o base=".malloc" line="69" loc="Φ.org.eolang.malloc-return-error$t1$t0$a0.φ" name="@" pos="9"> 
//     <o base="h" line="69" loc="Φ.org.eolang.malloc-return-error$t1$t0$a0.φ.ρ" pos="8" ref="68.65.453"/>
//     <o base="org.eolang.int" data="int" line="70" loc="Φ.org.eolang.malloc-return-error$t1$t0$a0.φ.α0" pos="10">10</o>
//   </o>
//   <o level="1" line="68.65.453" loc="Φ.org.eolang.malloc-return-error$t1$t0$a0.h" name="h"/>
// </o>
@XmirObject(name = "ω1t1$t0$a0", oname = "ω1t1$t0$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOω1t1$EOt0$EOa0 extends PhDefault {
    
  public EOω1t1$EOt0$EOa0(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(new PhMethod(rho, "σ"), "h");
        ret_base = new PhLocated(ret_base, 69, 8, "Φ.org.eolang.malloc-return-error$t1$t0$a0.φ.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 69, 9, "Φ.org.eolang.malloc-return-error$t1$t0$a0.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 70, 10, "Φ.org.eolang.malloc-return-error$t1$t0$a0.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(10L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}

// <o abstract="" ancestors="1" line="71" loc="Φ.org.eolang.malloc-return-error$t1$t0$a1" name="malloc-return-error$t1$t0$a1" parent="malloc-return-error" pos="6"> 
//   <o line="71" loc="Φ.org.eolang.malloc-return-error$t1$t0$a1.e" name="e" pos="7"/>
//   <o base="e" line="72" loc="Φ.org.eolang.malloc-return-error$t1$t0$a1.φ" name="@" pos="8" ref="71"/>
// </o>
@XmirObject(name = "ω1t1$t0$a1", oname = "ω1t1$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOω1t1$EOt0$EOa1 extends PhDefault {
    
  public EOω1t1$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("e", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "e");
        ret = new PhLocated(ret, 72, 8, "Φ.org.eolang.malloc-return-error$t1$t0$a1.φ");
      return ret;
    })));
  }
}
}
