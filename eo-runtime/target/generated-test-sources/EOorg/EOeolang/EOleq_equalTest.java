
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="66" loc="Φ.org.eolang.leq-equal" name="leq-equal" original-name="leq-equal" pos="0"> 
//   <o base=".eq" line="67" loc="Φ.org.eolang.leq-equal.φ" name="@" pos="2"> 
//     <o base=".lte" line="68" loc="Φ.org.eolang.leq-equal.φ.ρ" pos="4"> 
//       <o base="org.eolang.float" data="float" line="69" loc="Φ.org.eolang.leq-equal.φ.ρ.ρ" pos="6">50.1</o>
//       <o base="org.eolang.float" data="float" line="70" loc="Φ.org.eolang.leq-equal.φ.ρ.α0" pos="6">50.1</o>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="71" loc="Φ.org.eolang.leq-equal.φ.α0" pos="4">TRUE</o>
//   </o>
// </o>
@XmirObject(name = "leq-equalTest", oname = "leq-equal", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/float-tests.eo")
public final class EOleq_equalTest extends PhDefault {
    
  public EOleq_equalTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
        ret_base_base = new PhLocated(ret_base_base, 69, 6, "Φ.org.eolang.leq-equal.φ.ρ.ρ");
        ret_base_base = new PhWith(ret_base_base, "Δ", new Data.Value<>(50.1d));
      Phi ret_base = new PhMethod(ret_base_base, "lte");
        ret_base = new PhLocated(ret_base, 68, 4, "Φ.org.eolang.leq-equal.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 70, 6, "Φ.org.eolang.leq-equal.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(50.1d));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 67, 2, "Φ.org.eolang.leq-equal.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 71, 4, "Φ.org.eolang.leq-equal.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.TRUE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOleq_equalTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
