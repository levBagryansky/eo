
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="39" loc="Φ.org.eolang.avoid-infinite-loop" name="avoid-infinite-loop" original-name="avoid-infinite-loop" pos="0"> 
//   <o base="org.eolang.cage" line="40" loc="Φ.org.eolang.avoid-infinite-loop.x" name="x" pos="2"> 
//     <o base=".if" line="41" loc="Φ.org.eolang.avoid-infinite-loop.x.α0" pos="8"> 
//       <o base="org.eolang.bool" data="bool" line="41" loc="Φ.org.eolang.avoid-infinite-loop.x.α0.ρ" pos="4">TRUE</o>
//     </o>
//   </o>
//   <o base="x" copy="" line="42" loc="Φ.org.eolang.avoid-infinite-loop.copy" name="copy" pos="2" ref="40"/>
//   <o base=".eq" line="43" loc="Φ.org.eolang.avoid-infinite-loop.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="44" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ" pos="4"> 
//       <o base=".write" line="45" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0" pos="7"> 
//         <o base="x" line="45" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.ρ" pos="6" ref="40"/>
//         <o base=".if" line="46" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0" pos="12"> 
//           <o base="org.eolang.bool" data="bool" line="46" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.ρ" pos="8">TRUE</o>
//           <o base="org.eolang.int" data="int" line="46" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.α0" pos="16">1</o>
//           <o base="org.eolang.int" data="int" line="46" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.α1" pos="18">0</o>
//         </o>
//       </o>
//       <o base=".<" line="47" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α1" pos="10"> 
//         <o base="copy" line="47" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α1.ρ" pos="6" ref="42"/>
//       </o>
//       <o base=".write" line="48" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2" pos="7"> 
//         <o base="x" line="48" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.ρ" pos="6" ref="40"/>
//         <o base=".if" line="49" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0" pos="12"> 
//           <o base="org.eolang.bool" data="bool" line="49" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.ρ" pos="8">TRUE</o>
//           <o base="copy" line="49" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.α0" pos="16" ref="42"/>
//           <o base="org.eolang.int" data="int" line="49" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.α1" pos="21">0</o>
//         </o>
//       </o>
//       <o base="x" line="50" loc="Φ.org.eolang.avoid-infinite-loop.φ.ρ.α3" pos="6" ref="40"/>
//     </o>
//     <o base="org.eolang.int" data="int" line="51" loc="Φ.org.eolang.avoid-infinite-loop.φ.α0" pos="4">1</o>
//   </o>
// </o>
@XmirObject(name = "avoid-infinite-loopTest", oname = "avoid-infinite-loop", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cage-tests.eo")
public final class EOavoid_infinite_loopTest extends PhDefault {
    
  public EOavoid_infinite_loopTest() {
    this.add("x", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("cage").get();
        ret = new PhLocated(ret, 40, 2, "Φ.org.eolang.avoid-infinite-loop.x");
      ret = new PhCopy(ret);
        Phi ret_1_base = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1_base = new PhLocated(ret_1_base, 41, 4, "Φ.org.eolang.avoid-infinite-loop.x.α0.ρ");
          ret_1_base = new PhWith(ret_1_base, "Δ", new Data.Value<>(Boolean.TRUE));
        Phi ret_1 = new PhMethod(ret_1_base, "if");
          ret_1 = new PhLocated(ret_1, 41, 8, "Φ.org.eolang.avoid-infinite-loop.x.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("copy", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "x");
        ret = new PhLocated(ret, 42, 2, "Φ.org.eolang.avoid-infinite-loop.copy");
        ret = new PhCopy(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret_base = new PhLocated(ret_base, 44, 4, "Φ.org.eolang.avoid-infinite-loop.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new PhMethod(rho, "x");
          ret_base_1_base = new PhLocated(ret_base_1_base, 45, 6, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.ρ");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "write");
          ret_base_1 = new PhLocated(ret_base_1, 45, 7, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1_base = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_base_1_1_base = new PhLocated(ret_base_1_1_base, 46, 8, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.ρ");
            ret_base_1_1_base = new PhWith(ret_base_1_1_base, "Δ", new Data.Value<>(Boolean.TRUE));
          Phi ret_base_1_1 = new PhMethod(ret_base_1_1_base, "if");
            ret_base_1_1 = new PhLocated(ret_base_1_1, 46, 12, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0");
          ret_base_1_1 = new PhCopy(ret_base_1_1);
            Phi ret_base_1_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_base_1_1_1 = new PhLocated(ret_base_1_1_1, 46, 16, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.α0");
              ret_base_1_1_1 = new PhWith(ret_base_1_1_1, "Δ", new Data.Value<>(1L));
            Phi ret_base_1_1_2 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_base_1_1_2 = new PhLocated(ret_base_1_1_2, 46, 18, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α0.α0.α1");
              ret_base_1_1_2 = new PhWith(ret_base_1_1_2, "Δ", new Data.Value<>(0L));
            ret_base_1_1 = new PhWith(ret_base_1_1, 0, ret_base_1_1_1);
            ret_base_1_1 = new PhWith(ret_base_1_1, 1, ret_base_1_1_2);
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        Phi ret_base_2_base = new PhMethod(rho, "copy");
          ret_base_2_base = new PhLocated(ret_base_2_base, 47, 6, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α1.ρ");
        Phi ret_base_2 = new PhMethod(ret_base_2_base, "ν");
          ret_base_2 = new PhLocated(ret_base_2, 47, 10, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α1");
        Phi ret_base_3_base = new PhMethod(rho, "x");
          ret_base_3_base = new PhLocated(ret_base_3_base, 48, 6, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.ρ");
        Phi ret_base_3 = new PhMethod(ret_base_3_base, "write");
          ret_base_3 = new PhLocated(ret_base_3, 48, 7, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2");
        ret_base_3 = new PhCopy(ret_base_3);
          Phi ret_base_3_1_base = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_base_3_1_base = new PhLocated(ret_base_3_1_base, 49, 8, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.ρ");
            ret_base_3_1_base = new PhWith(ret_base_3_1_base, "Δ", new Data.Value<>(Boolean.TRUE));
          Phi ret_base_3_1 = new PhMethod(ret_base_3_1_base, "if");
            ret_base_3_1 = new PhLocated(ret_base_3_1, 49, 12, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0");
          ret_base_3_1 = new PhCopy(ret_base_3_1);
            Phi ret_base_3_1_1 = new PhMethod(rho, "copy");
              ret_base_3_1_1 = new PhLocated(ret_base_3_1_1, 49, 16, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.α0");
            Phi ret_base_3_1_2 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_base_3_1_2 = new PhLocated(ret_base_3_1_2, 49, 21, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α2.α0.α1");
              ret_base_3_1_2 = new PhWith(ret_base_3_1_2, "Δ", new Data.Value<>(0L));
            ret_base_3_1 = new PhWith(ret_base_3_1, 0, ret_base_3_1_1);
            ret_base_3_1 = new PhWith(ret_base_3_1, 1, ret_base_3_1_2);
          ret_base_3 = new PhWith(ret_base_3, 0, ret_base_3_1);
        Phi ret_base_4 = new PhMethod(rho, "x");
          ret_base_4 = new PhLocated(ret_base_4, 50, 6, "Φ.org.eolang.avoid-infinite-loop.φ.ρ.α3");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
        ret_base = new PhWith(ret_base, 2, ret_base_3);
        ret_base = new PhWith(ret_base, 3, ret_base_4);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 43, 2, "Φ.org.eolang.avoid-infinite-loop.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 51, 4, "Φ.org.eolang.avoid-infinite-loop.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOavoid_infinite_loopTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
