
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="104" loc="Φ.org.eolang.compares-two-different-strings" name="compares-two-different-strings" original-name="compares-two-different-strings" pos="0"> 
//   <o base="org.eolang.hamcrest.assert-that" line="105" loc="Φ.org.eolang.compares-two-different-strings.φ" name="@" pos="2"> 
//     <o base="org.eolang.string" data="string" line="106" loc="Φ.org.eolang.compares-two-different-strings.φ.α0" pos="4">Hello</o>
//     <o base=".not" line="107" loc="Φ.org.eolang.compares-two-different-strings.φ.α1" pos="5"> 
//       <o base="$" line="107" loc="Φ.org.eolang.compares-two-different-strings.φ.α1.ρ" pos="4"/>
//       <o base=".equal-to" line="108" loc="Φ.org.eolang.compares-two-different-strings.φ.α1.α0" pos="7"> 
//         <o base="$" line="108" loc="Φ.org.eolang.compares-two-different-strings.φ.α1.α0.ρ" pos="6"/>
//         <o base="org.eolang.string" data="string" line="108" loc="Φ.org.eolang.compares-two-different-strings.φ.α1.α0.α0" pos="17">Good bye</o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "compares-two-different-stringsTest", oname = "compares-two-different-strings", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/string-tests.eo")
public final class EOcompares_two_different_stringsTest extends PhDefault {
  public EOcompares_two_different_stringsTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 105, 2, "Φ.org.eolang.compares-two-different-strings.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 106, 4, "Φ.org.eolang.compares-two-different-strings.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("Hello"));
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 107, 4, "Φ.org.eolang.compares-two-different-strings.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "not");
          ret_2 = new PhLocated(ret_2, 107, 5, "Φ.org.eolang.compares-two-different-strings.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1_base = rho;
            ret_2_1_base = new PhLocated(ret_2_1_base, 108, 6, "Φ.org.eolang.compares-two-different-strings.φ.α1.α0.ρ");
          Phi ret_2_1 = new PhMethod(ret_2_1_base, "equal-to");
            ret_2_1 = new PhLocated(ret_2_1, 108, 7, "Φ.org.eolang.compares-two-different-strings.φ.α1.α0");
          ret_2_1 = new PhCopy(ret_2_1);
            Phi ret_2_1_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
              ret_2_1_1 = new PhLocated(ret_2_1_1, 108, 17, "Φ.org.eolang.compares-two-different-strings.φ.α1.α0.α0");
              ret_2_1_1 = new PhWith(ret_2_1_1, "Δ", new Data.Value<>("Good bye"));
            ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcompares_two_different_stringsTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
