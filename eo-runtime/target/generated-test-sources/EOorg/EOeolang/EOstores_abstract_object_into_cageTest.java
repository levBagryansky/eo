
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="105" loc="Φ.org.eolang.stores-abstract-object-into-cage" name="stores-abstract-object-into-cage" original-name="stores-abstract-object-into-cage" pos="0"> 
//   <o base=".eq" line="106" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="107" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ" pos="4"> 
//       <o base="c" cut="3" line="108" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α0" ref="108"/>
//       <o base=".@" line="111" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1" pos="7"> 
//         <o base="c" line="111" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1.ρ" pos="6" ref="108"/>
//         <o base="org.eolang.int" data="int" line="112" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1.α0" pos="8">42</o>
//       </o>
//     </o>
//     <o base="org.eolang.int" data="int" line="113" loc="Φ.org.eolang.stores-abstract-object-into-cage.φ.α0" pos="4">112</o>
//   </o>
//   <o base="org.eolang.cage" line="108" loc="Φ.org.eolang.stores-abstract-object-into-cage.c" name="c" pos="6"> 
//     <o base="stores-abstract-object-into-cage$t1$a0" cut="138" line="109" loc="Φ.org.eolang.stores-abstract-object-into-cage.c.α0" pos="8" ref="109"/>
//   </o>
// </o>
@XmirObject(name = "stores-abstract-object-into-cageTest", oname = "stores-abstract-object-into-cage", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cage-tests.eo")
public final class EOstores_abstract_object_into_cageTest extends PhDefault {
    
  public EOstores_abstract_object_into_cageTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret_base = new PhLocated(ret_base, 107, 4, "Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "c");
        Phi ret_base_2_base = new PhMethod(rho, "c");
          ret_base_2_base = new PhLocated(ret_base_2_base, 111, 6, "Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1.ρ");
        Phi ret_base_2 = new PhMethod(ret_base_2_base, "φ");
          ret_base_2 = new PhLocated(ret_base_2, 111, 7, "Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1");
        ret_base_2 = new PhCopy(ret_base_2);
          Phi ret_base_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_base_2_1 = new PhLocated(ret_base_2_1, 112, 8, "Φ.org.eolang.stores-abstract-object-into-cage.φ.ρ.α1.α0");
            ret_base_2_1 = new PhWith(ret_base_2_1, "Δ", new Data.Value<>(42L));
          ret_base_2 = new PhWith(ret_base_2, 0, ret_base_2_1);
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 106, 2, "Φ.org.eolang.stores-abstract-object-into-cage.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 113, 4, "Φ.org.eolang.stores-abstract-object-into-cage.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(112L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("c", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("cage").get();
        ret = new PhLocated(ret, 108, 6, "Φ.org.eolang.stores-abstract-object-into-cage.c");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOω1t1$EOa0(rho);
          ret_1 = new PhLocated(ret_1, 109, 8, "Φ.org.eolang.stores-abstract-object-into-cage.c.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOstores_abstract_object_into_cageTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="109" loc="Φ.org.eolang.stores-abstract-object-into-cage$t1$a0" name="stores-abstract-object-into-cage$t1$a0" parent="stores-abstract-object-into-cage" pos="8"> 
//   <o line="109" loc="Φ.org.eolang.stores-abstract-object-into-cage$t1$a0.x" name="x" pos="9"/>
//   <o base="org.eolang.int" data="int" line="110" loc="Φ.org.eolang.stores-abstract-object-into-cage$t1$a0.φ" name="@" pos="10">112</o>
// </o>
@XmirObject(name = "ω1t1$a0", oname = "ω1t1$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cage-tests.eo")
public final class EOω1t1$EOa0 extends PhDefault {
    
  public EOω1t1$EOa0(final Phi sigma) {
    super(sigma);
    this.add("x", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EOint(Phi.Φ);
        ret = new PhLocated(ret, 110, 10, "Φ.org.eolang.stores-abstract-object-into-cage$t1$a0.φ");
        ret = new PhWith(ret, "Δ", new Data.Value<>(112L));
      return ret;
    })));
  }
}
}
