
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="111" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1" name="concat-tuple-with-empty-tuple-1" original-name="concat-tuple-with-empty-tuple-1" pos="0"> 
//   <o base="org.eolang.tuple" data="tuple" line="112" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.a" name="a" pos="2"> 
//     <o base="org.eolang.int" data="int" line="112" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α0" pos="4">1</o>
//     <o base="org.eolang.int" data="int" line="112" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α1" pos="6">2</o>
//     <o base="org.eolang.int" data="int" line="112" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α2" pos="8">3</o>
//   </o>
//   <o base="org.eolang.tuple" data="tuple" line="113" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.b" name="b" pos="2"/>
//   <o base=".concat" line="114" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.res" name="res" pos="2"> 
//     <o base="org.eolang.collections.list" line="115" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.ρ" pos="4"> 
//       <o base="a" line="115" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.ρ.α0" pos="9" ref="112"/>
//     </o>
//     <o base="b" line="116" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.α0" pos="4" ref="113"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="117" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ" name="@" pos="2"> 
//     <o base=".length" line="118" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α0" pos="7"> 
//       <o base="res" line="118" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α0.ρ" pos="4" ref="114"/>
//     </o>
//     <o base=".equal-to" line="119" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1" pos="5"> 
//       <o base="$" line="119" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="119" loc="Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1.α0" pos="15">3</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "concat-tuple-with-empty-tuple-1Test", oname = "concat-tuple-with-empty-tuple-1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOconcat_tuple_with_empty_tuple_1Test extends PhDefault {
  public EOconcat_tuple_with_empty_tuple_1Test() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 112, 2, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.a");
        Phi[] ret_a = new Phi[3];
        Phi ret_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a0 = new PhLocated(ret_a0, 112, 4, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α0");
          ret_a0 = new PhWith(ret_a0, "Δ", new Data.Value<>(1L));
        ret_a[0] = ret_a0;
        Phi ret_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a1 = new PhLocated(ret_a1, 112, 6, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α1");
          ret_a1 = new PhWith(ret_a1, "Δ", new Data.Value<>(2L));
        ret_a[1] = ret_a1;
        Phi ret_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a2 = new PhLocated(ret_a2, 112, 8, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.a.α2");
          ret_a2 = new PhWith(ret_a2, "Δ", new Data.Value<>(3L));
        ret_a[2] = ret_a2;
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      return ret;
    })));
    this.add("b", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 113, 2, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.b");
        Phi[] ret_a = new Phi[0];
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      return ret;
    })));
    this.add("res", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("collections").get().attr("list").get();
        ret_base = new PhLocated(ret_base, 115, 4, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "a");
          ret_base_1 = new PhLocated(ret_base_1, 115, 9, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "concat");
        ret = new PhLocated(ret, 114, 2, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.res");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "b");
          ret_1 = new PhLocated(ret_1, 116, 4, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.res.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 117, 2, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "res");
          ret_1_base = new PhLocated(ret_1_base, 118, 4, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "length");
          ret_1 = new PhLocated(ret_1, 118, 7, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 119, 4, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 119, 5, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 119, 15, "Φ.org.eolang.concat-tuple-with-empty-tuple-1.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(3L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOconcat_tuple_with_empty_tuple_1Test()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
