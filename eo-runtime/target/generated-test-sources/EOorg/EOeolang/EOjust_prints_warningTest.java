
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="29" loc="Φ.org.eolang.just-prints-warning" name="just-prints-warning" original-name="just-prints-warning" pos="0"> 
//   <o base=".eq" line="30" loc="Φ.org.eolang.just-prints-warning.φ" name="@" pos="2"> 
//     <o base="org.eolang.cti" line="31" loc="Φ.org.eolang.just-prints-warning.φ.ρ" pos="4"> 
//       <o base=".times" line="32" loc="Φ.org.eolang.just-prints-warning.φ.ρ.α0" pos="7"> 
//         <o base="org.eolang.int" data="int" line="32" loc="Φ.org.eolang.just-prints-warning.φ.ρ.α0.ρ" pos="6">2</o>
//         <o base="org.eolang.int" data="int" line="32" loc="Φ.org.eolang.just-prints-warning.φ.ρ.α0.α0" pos="14">2</o>
//       </o>
//       <o base="org.eolang.string" data="string" line="33" loc="Φ.org.eolang.just-prints-warning.φ.ρ.α1" pos="6">warning</o>
//       <o base="org.eolang.string" data="string" line="34" loc="Φ.org.eolang.just-prints-warning.φ.ρ.α2" pos="6">This method is deprecated!</o>
//     </o>
//     <o base="org.eolang.int" data="int" line="35" loc="Φ.org.eolang.just-prints-warning.φ.α0" pos="4">4</o>
//   </o>
// </o>
@XmirObject(name = "just-prints-warningTest", oname = "just-prints-warning", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cti-test.eo")
public final class EOjust_prints_warningTest extends PhDefault {
    
  public EOjust_prints_warningTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("cti").get();
        ret_base = new PhLocated(ret_base, 31, 4, "Φ.org.eolang.just-prints-warning.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1_base = new PhLocated(ret_base_1_base, 32, 6, "Φ.org.eolang.just-prints-warning.φ.ρ.α0.ρ");
          ret_base_1_base = new PhWith(ret_base_1_base, "Δ", new Data.Value<>(2L));
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "times");
          ret_base_1 = new PhLocated(ret_base_1, 32, 7, "Φ.org.eolang.just-prints-warning.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_base_1_1 = new PhLocated(ret_base_1_1, 32, 14, "Φ.org.eolang.just-prints-warning.φ.ρ.α0.α0");
            ret_base_1_1 = new PhWith(ret_base_1_1, "Δ", new Data.Value<>(2L));
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        Phi ret_base_2 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_base_2 = new PhLocated(ret_base_2, 33, 6, "Φ.org.eolang.just-prints-warning.φ.ρ.α1");
          ret_base_2 = new PhWith(ret_base_2, "Δ", new Data.Value<>("warning"));
        Phi ret_base_3 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_base_3 = new PhLocated(ret_base_3, 34, 6, "Φ.org.eolang.just-prints-warning.φ.ρ.α2");
          ret_base_3 = new PhWith(ret_base_3, "Δ", new Data.Value<>("This method is deprecated!"));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
        ret_base = new PhWith(ret_base, 2, ret_base_3);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 30, 2, "Φ.org.eolang.just-prints-warning.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 35, 4, "Φ.org.eolang.just-prints-warning.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(4L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOjust_prints_warningTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
