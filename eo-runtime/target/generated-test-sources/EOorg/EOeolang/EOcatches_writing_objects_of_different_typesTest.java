
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="160" loc="Φ.org.eolang.catches-writing-objects-of-different-types" name="catches-writing-objects-of-different-types" original-name="catches-writing-objects-of-different-types" pos="0"> 
//   <o base="org.eolang.cage" line="161" loc="Φ.org.eolang.catches-writing-objects-of-different-types.cge" name="cge" pos="2"> 
//     <o base="org.eolang.int" data="int" line="161" loc="Φ.org.eolang.catches-writing-objects-of-different-types.cge.α0" pos="7">5</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="162" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="163" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0" pos="4"> 
//       <o base="org.eolang.try" line="164" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0" pos="6"> 
//         <o base=".write" line="165" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0" pos="11"> 
//           <o base="cge" line="165" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0.ρ" pos="8" ref="161"/>
//           <o base="org.eolang.string" data="string" line="165" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0.α0" pos="18">Hello world</o>
//         </o>
//         <o base="catches-writing-objects-of-different-types$t1$t0$t0$a1" cut="246" line="166" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α1" pos="8" ref="166"> 
//           <o as="cge" base="cge" level="1" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α1.α0" ref="161"/>
//         </o>
//         <o base="org.eolang.nop" line="168" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α2" pos="8"/>
//       </o>
//       <o base=".eq" line="169" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1" pos="9"> 
//         <o base="cge" line="169" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1.ρ" pos="6" ref="161"/>
//         <o base="org.eolang.int" data="int" line="169" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1.α0" pos="13">10</o>
//       </o>
//     </o>
//     <o base=".equal-to" line="170" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1" pos="5"> 
//       <o base="$" line="170" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.bool" data="bool" line="170" loc="Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1.α0" pos="15">TRUE</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "catches-writing-objects-of-different-typesTest", oname = "catches-writing-objects-of-different-types", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cage-tests.eo")
public final class EOcatches_writing_objects_of_different_typesTest extends PhDefault {
  public EOcatches_writing_objects_of_different_typesTest() {
    this.add("cge", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("cage").get();
        ret = new PhLocated(ret, 161, 2, "Φ.org.eolang.catches-writing-objects-of-different-types.cge");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 161, 7, "Φ.org.eolang.catches-writing-objects-of-different-types.cge.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(5L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 162, 2, "Φ.org.eolang.catches-writing-objects-of-different-types.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
          ret_1 = new PhLocated(ret_1, 163, 4, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("try").get();
            ret_1_1 = new PhLocated(ret_1_1, 164, 6, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1_base = new PhMethod(rho, "cge");
              ret_1_1_1_base = new PhLocated(ret_1_1_1_base, 165, 8, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0.ρ");
            Phi ret_1_1_1 = new PhMethod(ret_1_1_1_base, "write");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 165, 11, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0");
            ret_1_1_1 = new PhCopy(ret_1_1_1);
              Phi ret_1_1_1_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
                ret_1_1_1_1 = new PhLocated(ret_1_1_1_1, 165, 18, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α0.α0");
                ret_1_1_1_1 = new PhWith(ret_1_1_1_1, "Δ", new Data.Value<>("Hello world"));
              ret_1_1_1 = new PhWith(ret_1_1_1, 0, ret_1_1_1_1);
            Phi ret_1_1_2 = new EOω1t1$EOt0$EOt0$EOa1(rho);
              ret_1_1_2 = new PhLocated(ret_1_1_2, 166, 8, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α1");
            Phi ret_1_1_3 = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
              ret_1_1_3 = new PhLocated(ret_1_1_3, 168, 8, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α0.α2");
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
            ret_1_1 = new PhWith(ret_1_1, 1, ret_1_1_2);
            ret_1_1 = new PhWith(ret_1_1, 2, ret_1_1_3);
          Phi ret_1_2_base = new PhMethod(rho, "cge");
            ret_1_2_base = new PhLocated(ret_1_2_base, 169, 6, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1.ρ");
          Phi ret_1_2 = new PhMethod(ret_1_2_base, "eq");
            ret_1_2 = new PhLocated(ret_1_2, 169, 9, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1");
          ret_1_2 = new PhCopy(ret_1_2);
            Phi ret_1_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_2_1 = new PhLocated(ret_1_2_1, 169, 13, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α0.α1.α0");
              ret_1_2_1 = new PhWith(ret_1_2_1, "Δ", new Data.Value<>(10L));
            ret_1_2 = new PhWith(ret_1_2, 0, ret_1_2_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 170, 4, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 170, 5, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 170, 15, "Φ.org.eolang.catches-writing-objects-of-different-types.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(Boolean.TRUE));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcatches_writing_objects_of_different_typesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="166" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1" name="catches-writing-objects-of-different-types$t1$t0$t0$a1" parent="catches-writing-objects-of-different-types" pos="8"> 
//   <o line="166" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.e" name="e" pos="9"/>
//   <o base=".write" line="167" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ" name="@" pos="13"> 
//     <o base="cge" line="167" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ.ρ" pos="10" ref="166.161.467"/>
//     <o base="org.eolang.int" data="int" line="167" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ.α0" pos="20">10</o>
//   </o>
//   <o level="1" line="166.161.467" loc="Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.cge" name="cge"/>
// </o>
@XmirObject(name = "ω1t1$t0$t0$a1", oname = "ω1t1$t0$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/cage-tests.eo")
public final class EOω1t1$EOt0$EOt0$EOa1 extends PhDefault {
  public EOω1t1$EOt0$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("e", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(new PhMethod(rho, "σ"), "cge");
        ret_base = new PhLocated(ret_base, 167, 10, "Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ.ρ");
      Phi ret = new PhMethod(ret_base, "write");
        ret = new PhLocated(ret, 167, 13, "Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 167, 20, "Φ.org.eolang.catches-writing-objects-of-different-types$t1$t0$t0$a1.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(10L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
