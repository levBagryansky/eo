
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="49" loc="Φ.org.eolang.makes-object-a-constant" name="makes-object-a-constant" original-name="makes-object-a-constant" pos="0"> 
//   <o base="makes-object-a-constant$foo" cut="24" line="50" loc="Φ.org.eolang.makes-object-a-constant.foo" name="foo" pos="2" ref="50"/>
//   <o base=".@" const="" line="56" loc="Φ.org.eolang.makes-object-a-constant.f" name="f" pos="5"> 
//     <o base="foo" line="56" loc="Φ.org.eolang.makes-object-a-constant.f.ρ" pos="2" ref="50"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="57" loc="Φ.org.eolang.makes-object-a-constant.φ" name="@" pos="2"> 
//     <o base="f" line="58" loc="Φ.org.eolang.makes-object-a-constant.φ.α0" pos="4" ref="56"/>
//     <o base=".equal-to" line="59" loc="Φ.org.eolang.makes-object-a-constant.φ.α1" pos="5"> 
//       <o base="$" line="59" loc="Φ.org.eolang.makes-object-a-constant.φ.α1.ρ" pos="4"/>
//       <o base="f" line="59" loc="Φ.org.eolang.makes-object-a-constant.φ.α1.α0" pos="15" ref="56"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "makes-object-a-constantTest", oname = "makes-object-a-constant", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOmakes_object_a_constantTest extends PhDefault {
  public EOmakes_object_a_constantTest() {
    this.add("foo", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1foo(rho);
        ret = new PhLocated(ret, 50, 2, "Φ.org.eolang.makes-object-a-constant.foo");
      return ret;
    })));
    this.add("f", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "foo");
        ret_base = new PhLocated(ret_base, 56, 2, "Φ.org.eolang.makes-object-a-constant.f.ρ");
      Phi ret = new PhMethod(ret_base, "φ");
        ret = new PhLocated(ret, 56, 5, "Φ.org.eolang.makes-object-a-constant.f");
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 57, 2, "Φ.org.eolang.makes-object-a-constant.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "f");
          ret_1 = new PhLocated(ret_1, 58, 4, "Φ.org.eolang.makes-object-a-constant.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 59, 4, "Φ.org.eolang.makes-object-a-constant.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 59, 5, "Φ.org.eolang.makes-object-a-constant.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new PhMethod(rho, "f");
            ret_2_1 = new PhLocated(ret_2_1, 59, 15, "Φ.org.eolang.makes-object-a-constant.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmakes_object_a_constantTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="50" loc="Φ.org.eolang.makes-object-a-constant$foo" name="makes-object-a-constant$foo" original-name="foo" parent="makes-object-a-constant" pos="2"> 
//   <o base=".as-int" line="51" loc="Φ.org.eolang.makes-object-a-constant$foo.φ" name="@" pos="4"> 
//     <o base="org.eolang.math.number" line="52" loc="Φ.org.eolang.makes-object-a-constant$foo.φ.ρ" pos="6"> 
//       <o base=".times" line="53" loc="Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0" pos="8"> 
//         <o base=".pseudo" line="54" loc="Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.ρ" pos="16"> 
//           <o base="org.eolang.math.random" line="54" loc="Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.ρ.ρ" pos="10"/>
//         </o>
//         <o base="org.eolang.float" data="float" line="55" loc="Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.α0" pos="10">100.0</o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "ω1foo", oname = "foo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1foo extends PhDefault {
  public EOω1foo(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("math").get().attr("number").get();
        ret_base = new PhLocated(ret_base, 52, 6, "Φ.org.eolang.makes-object-a-constant$foo.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("math").get().attr("random").get();
          ret_base_1_base_base = new PhLocated(ret_base_1_base_base, 54, 10, "Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.ρ.ρ");
        Phi ret_base_1_base = new PhMethod(ret_base_1_base_base, "pseudo");
          ret_base_1_base = new PhLocated(ret_base_1_base, 54, 16, "Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.ρ");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "times");
          ret_base_1 = new PhLocated(ret_base_1, 53, 8, "Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
            ret_base_1_1 = new PhLocated(ret_base_1_1, 55, 10, "Φ.org.eolang.makes-object-a-constant$foo.φ.ρ.α0.α0");
            ret_base_1_1 = new PhWith(ret_base_1_1, "Δ", new Data.Value<>(100.0d));
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "as-int");
        ret = new PhLocated(ret, 51, 4, "Φ.org.eolang.makes-object-a-constant$foo.φ");
      return ret;
    })));
  }
}
}
