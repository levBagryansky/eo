
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="206" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names" name="compiles-correctly-with-long-duplicate-names" original-name="compiles-correctly-with-long-duplicate-names" pos="0"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name" cut="321" line="207" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.long-object-name" name="long-object-name" pos="2" ref="207"/>
//   <o base="org.eolang.hamcrest.assert-that" line="212" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ" name="@" pos="2"> 
//     <o base="long-object-name" line="213" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α0" pos="4" ref="207"/>
//     <o base=".is" line="214" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1" pos="5"> 
//       <o base="$" line="214" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.ρ" pos="4"/>
//       <o base=".anything" line="215" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.α0" pos="7"> 
//         <o base="$" line="215" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.α0.ρ" pos="6"/>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "compiles-correctly-with-long-duplicate-namesTest", oname = "compiles-correctly-with-long-duplicate-names", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOcompiles_correctly_with_long_duplicate_namesTest extends PhDefault {
  public EOcompiles_correctly_with_long_duplicate_namesTest() {
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1long_object_name(rho);
        ret = new PhLocated(ret, 207, 2, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.long-object-name");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 212, 2, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "long-object-name");
          ret_1 = new PhLocated(ret_1, 213, 4, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 214, 4, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "is");
          ret_2 = new PhLocated(ret_2, 214, 5, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1_base = rho;
            ret_2_1_base = new PhLocated(ret_2_1_base, 215, 6, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.α0.ρ");
          Phi ret_2_1 = new PhMethod(ret_2_1_base, "anything");
            ret_2_1 = new PhLocated(ret_2_1, 215, 7, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcompiles_correctly_with_long_duplicate_namesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="207" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names" pos="2"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" cut="321" line="208" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name.long-object-name" name="long-object-name" pos="4" ref="208"/>
// </o>
@XmirObject(name = "ω1long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1long_object_name extends PhDefault {
  public EOω1long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2long_object_name(rho);
        ret = new PhLocated(ret, 208, 4, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="208" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name" pos="4"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" cut="321" line="209" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="6" ref="209"/>
// </o>
@XmirObject(name = "ω2long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2long_object_name extends PhDefault {
  public EOω2long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω3long_object_name(rho);
        ret = new PhLocated(ret, 209, 6, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="3" line="209" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" pos="6"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" cut="321" line="210" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="8" ref="210"/>
// </o>
@XmirObject(name = "ω3long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω3long_object_name extends PhDefault {
  public EOω3long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω4long_object_name(rho);
        ret = new PhLocated(ret, 210, 8, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="4" line="210" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" pos="8"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" cut="321" line="211" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="10" ref="211"/>
// </o>
@XmirObject(name = "ω4long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω4long_object_name extends PhDefault {
  public EOω4long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω5long_object_name(rho);
        ret = new PhLocated(ret, 211, 10, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="5" line="211" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" pos="10"/>
@XmirObject(name = "ω5long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω5long_object_name extends PhDefault {
  public EOω5long_object_name(final Phi sigma) {
    super(sigma);
  }
}
}
}
}
}
}
