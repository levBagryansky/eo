
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="200" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names" name="compiles-correctly-with-long-duplicate-names" original-name="compiles-correctly-with-long-duplicate-names" pos="0"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name" cut="298" line="201" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.long-object-name" name="long-object-name" pos="2" ref="201"/>
//   <o base="org.eolang.bool" data="bool" line="206" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ" name="@" pos="2">TRUE</o>
// </o>
@XmirObject(name = "compiles-correctly-with-long-duplicate-namesTest", oname = "compiles-correctly-with-long-duplicate-names", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOcompiles_correctly_with_long_duplicate_namesTest extends PhDefault {
    
  public EOcompiles_correctly_with_long_duplicate_namesTest() {
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1long_object_name(rho);
        ret = new PhLocated(ret, 201, 2, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.long-object-name");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EObool(Phi.Φ);
        ret = new PhLocated(ret, 206, 2, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names.φ");
        ret = new PhWith(ret, "Δ", new Data.Value<>(Boolean.TRUE));
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcompiles_correctly_with_long_duplicate_namesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="201" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names" pos="2"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" cut="298" line="202" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name.long-object-name" name="long-object-name" pos="4" ref="202"/>
// </o>
@XmirObject(name = "ω1long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1long_object_name extends PhDefault {
    
  public EOω1long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2long_object_name(rho);
        ret = new PhLocated(ret, 202, 4, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="202" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name" pos="4"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" cut="298" line="203" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="6" ref="203"/>
// </o>
@XmirObject(name = "ω2long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2long_object_name extends PhDefault {
    
  public EOω2long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω3long_object_name(rho);
        ret = new PhLocated(ret, 203, 6, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="3" line="203" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name" pos="6"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" cut="298" line="204" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="8" ref="204"/>
// </o>
@XmirObject(name = "ω3long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω3long_object_name extends PhDefault {
    
  public EOω3long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω4long_object_name(rho);
        ret = new PhLocated(ret, 204, 8, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="4" line="204" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name" pos="8"> 
//   <o base="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" cut="298" line="205" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name.long-object-name" name="long-object-name" pos="10" ref="205"/>
// </o>
@XmirObject(name = "ω4long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω4long_object_name extends PhDefault {
    
  public EOω4long_object_name(final Phi sigma) {
    super(sigma);
    this.add("long-object-name", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω5long_object_name(rho);
        ret = new PhLocated(ret, 205, 10, "Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name.long-object-name");
      return ret;
    })));
  }

// <o abstract="" ancestors="5" line="205" loc="Φ.org.eolang.compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" name="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name$long-object-name" original-name="long-object-name" parent="compiles-correctly-with-long-duplicate-names$long-object-name$long-object-name$long-object-name$long-object-name" pos="10"/>
@XmirObject(name = "ω5long-object-name", oname = "long-object-name", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω5long_object_name extends PhDefault {
    
  public EOω5long_object_name(final Phi sigma) {
    super(sigma);
  }
}
}
}
}
}
}
