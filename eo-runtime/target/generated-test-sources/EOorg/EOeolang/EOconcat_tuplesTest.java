
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="141" loc="Φ.org.eolang.concat-tuples" name="concat-tuples" original-name="concat-tuples" pos="0"> 
//   <o base="org.eolang.tuple" data="tuple" line="142" loc="Φ.org.eolang.concat-tuples.a" name="a" pos="2"> 
//     <o base="org.eolang.int" data="int" line="142" loc="Φ.org.eolang.concat-tuples.a.α0" pos="4">1</o>
//     <o base="org.eolang.int" data="int" line="142" loc="Φ.org.eolang.concat-tuples.a.α1" pos="6">2</o>
//     <o base="org.eolang.int" data="int" line="142" loc="Φ.org.eolang.concat-tuples.a.α2" pos="8">3</o>
//   </o>
//   <o base="org.eolang.tuple" data="tuple" line="143" loc="Φ.org.eolang.concat-tuples.b" name="b" pos="2"> 
//     <o base="org.eolang.int" data="int" line="143" loc="Φ.org.eolang.concat-tuples.b.α0" pos="4">100</o>
//     <o base="org.eolang.int" data="int" line="143" loc="Φ.org.eolang.concat-tuples.b.α1" pos="8">200</o>
//   </o>
//   <o base=".concat" line="144" loc="Φ.org.eolang.concat-tuples.res" name="res" pos="2"> 
//     <o base="org.eolang.collections.list" line="145" loc="Φ.org.eolang.concat-tuples.res.ρ" pos="4"> 
//       <o base="a" line="145" loc="Φ.org.eolang.concat-tuples.res.ρ.α0" pos="9" ref="142"/>
//     </o>
//     <o base="b" line="146" loc="Φ.org.eolang.concat-tuples.res.α0" pos="4" ref="143"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="147" loc="Φ.org.eolang.concat-tuples.φ" name="@" pos="2"> 
//     <o base=".plus" line="148" loc="Φ.org.eolang.concat-tuples.φ.α0" pos="4"> 
//       <o base=".at" line="149" loc="Φ.org.eolang.concat-tuples.φ.α0.ρ" pos="9"> 
//         <o base="res" line="149" loc="Φ.org.eolang.concat-tuples.φ.α0.ρ.ρ" pos="6" ref="144"/>
//         <o base="org.eolang.int" data="int" line="149" loc="Φ.org.eolang.concat-tuples.φ.α0.ρ.α0" pos="13">2</o>
//       </o>
//       <o base=".at" line="150" loc="Φ.org.eolang.concat-tuples.φ.α0.α0" pos="9"> 
//         <o base="res" line="150" loc="Φ.org.eolang.concat-tuples.φ.α0.α0.ρ" pos="6" ref="144"/>
//         <o base="org.eolang.int" data="int" line="150" loc="Φ.org.eolang.concat-tuples.φ.α0.α0.α0" pos="13">4</o>
//       </o>
//     </o>
//     <o base=".equal-to" line="151" loc="Φ.org.eolang.concat-tuples.φ.α1" pos="5"> 
//       <o base="$" line="151" loc="Φ.org.eolang.concat-tuples.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="151" loc="Φ.org.eolang.concat-tuples.φ.α1.α0" pos="15">203</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "concat-tuplesTest", oname = "concat-tuples", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOconcat_tuplesTest extends PhDefault {
  public EOconcat_tuplesTest() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 142, 2, "Φ.org.eolang.concat-tuples.a");
        Phi[] ret_a = new Phi[3];
        Phi ret_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a0 = new PhLocated(ret_a0, 142, 4, "Φ.org.eolang.concat-tuples.a.α0");
          ret_a0 = new PhWith(ret_a0, "Δ", new Data.Value<>(1L));
        ret_a[0] = ret_a0;
        Phi ret_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a1 = new PhLocated(ret_a1, 142, 6, "Φ.org.eolang.concat-tuples.a.α1");
          ret_a1 = new PhWith(ret_a1, "Δ", new Data.Value<>(2L));
        ret_a[1] = ret_a1;
        Phi ret_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a2 = new PhLocated(ret_a2, 142, 8, "Φ.org.eolang.concat-tuples.a.α2");
          ret_a2 = new PhWith(ret_a2, "Δ", new Data.Value<>(3L));
        ret_a[2] = ret_a2;
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      return ret;
    })));
    this.add("b", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 143, 2, "Φ.org.eolang.concat-tuples.b");
        Phi[] ret_a = new Phi[2];
        Phi ret_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a0 = new PhLocated(ret_a0, 143, 4, "Φ.org.eolang.concat-tuples.b.α0");
          ret_a0 = new PhWith(ret_a0, "Δ", new Data.Value<>(100L));
        ret_a[0] = ret_a0;
        Phi ret_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a1 = new PhLocated(ret_a1, 143, 8, "Φ.org.eolang.concat-tuples.b.α1");
          ret_a1 = new PhWith(ret_a1, "Δ", new Data.Value<>(200L));
        ret_a[1] = ret_a1;
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      return ret;
    })));
    this.add("res", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("collections").get().attr("list").get();
        ret_base = new PhLocated(ret_base, 145, 4, "Φ.org.eolang.concat-tuples.res.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "a");
          ret_base_1 = new PhLocated(ret_base_1, 145, 9, "Φ.org.eolang.concat-tuples.res.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "concat");
        ret = new PhLocated(ret, 144, 2, "Φ.org.eolang.concat-tuples.res");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "b");
          ret_1 = new PhLocated(ret_1, 146, 4, "Φ.org.eolang.concat-tuples.res.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 147, 2, "Φ.org.eolang.concat-tuples.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "res");
          ret_1_base_base = new PhLocated(ret_1_base_base, 149, 6, "Φ.org.eolang.concat-tuples.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "at");
          ret_1_base = new PhLocated(ret_1_base, 149, 9, "Φ.org.eolang.concat-tuples.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_1 = new PhLocated(ret_1_base_1, 149, 13, "Φ.org.eolang.concat-tuples.φ.α0.ρ.α0");
            ret_1_base_1 = new PhWith(ret_1_base_1, "Δ", new Data.Value<>(2L));
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "plus");
          ret_1 = new PhLocated(ret_1, 148, 4, "Φ.org.eolang.concat-tuples.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "res");
            ret_1_1_base = new PhLocated(ret_1_1_base, 150, 6, "Φ.org.eolang.concat-tuples.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "at");
            ret_1_1 = new PhLocated(ret_1_1, 150, 9, "Φ.org.eolang.concat-tuples.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_1_1 = new PhLocated(ret_1_1_1, 150, 13, "Φ.org.eolang.concat-tuples.φ.α0.α0.α0");
              ret_1_1_1 = new PhWith(ret_1_1_1, "Δ", new Data.Value<>(4L));
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 151, 4, "Φ.org.eolang.concat-tuples.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 151, 5, "Φ.org.eolang.concat-tuples.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 151, 15, "Φ.org.eolang.concat-tuples.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(203L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOconcat_tuplesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
