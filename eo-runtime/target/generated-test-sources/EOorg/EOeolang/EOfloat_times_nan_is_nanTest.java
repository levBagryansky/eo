
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="315" loc="Φ.org.eolang.float-times-nan-is-nan" name="float-times-nan-is-nan" original-name="float-times-nan-is-nan" pos="0"> 
//   <o base="org.eolang.nan" const="" line="316" loc="Φ.org.eolang.float-times-nan-is-nan.not-a-number" name="not-a-number" pos="2"/>
//   <o base=".eq" line="317" loc="Φ.org.eolang.float-times-nan-is-nan.φ" name="@" pos="2"> 
//     <o base=".as-bytes" line="318" loc="Φ.org.eolang.float-times-nan-is-nan.φ.ρ" pos="4"> 
//       <o base=".times" line="319" loc="Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ" pos="10"> 
//         <o base="org.eolang.float" data="float" line="319" loc="Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ.ρ" pos="6">35.2</o>
//         <o base="not-a-number" line="319" loc="Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ.α0" pos="17" ref="316"/>
//       </o>
//     </o>
//     <o base=".as-bytes" line="320" loc="Φ.org.eolang.float-times-nan-is-nan.φ.α0" pos="16"> 
//       <o base="not-a-number" line="320" loc="Φ.org.eolang.float-times-nan-is-nan.φ.α0.ρ" pos="4" ref="316"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "float-times-nan-is-nanTest", oname = "float-times-nan-is-nan", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/float-tests.eo")
public final class EOfloat_times_nan_is_nanTest extends PhDefault {
    
  public EOfloat_times_nan_is_nanTest() {
    this.add("not-a-number", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nan").get();
        ret = new PhLocated(ret, 316, 2, "Φ.org.eolang.float-times-nan-is-nan.not-a-number");
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
        ret_base_base_base = new PhLocated(ret_base_base_base, 319, 6, "Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ.ρ");
        ret_base_base_base = new PhWith(ret_base_base_base, "Δ", new Data.Value<>(35.2d));
      Phi ret_base_base = new PhMethod(ret_base_base_base, "times");
        ret_base_base = new PhLocated(ret_base_base, 319, 10, "Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1 = new PhMethod(rho, "not-a-number");
          ret_base_base_1 = new PhLocated(ret_base_base_1, 319, 17, "Φ.org.eolang.float-times-nan-is-nan.φ.ρ.ρ.α0");
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "as-bytes");
        ret_base = new PhLocated(ret_base, 318, 4, "Φ.org.eolang.float-times-nan-is-nan.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 317, 2, "Φ.org.eolang.float-times-nan-is-nan.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "not-a-number");
          ret_1_base = new PhLocated(ret_1_base, 320, 4, "Φ.org.eolang.float-times-nan-is-nan.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "as-bytes");
          ret_1 = new PhLocated(ret_1, 320, 16, "Φ.org.eolang.float-times-nan-is-nan.φ.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOfloat_times_nan_is_nanTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
