
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="78" loc="Φ.org.eolang.tuple-with-in-seq" name="tuple-with-in-seq" original-name="tuple-with-in-seq" pos="0"> 
//   <o base="tuple-with-in-seq$foo" cut="66" line="79" loc="Φ.org.eolang.tuple-with-in-seq.foo" name="foo" pos="2" ref="79"/>
//   <o base="org.eolang.seq" line="83" loc="Φ.org.eolang.tuple-with-in-seq.φ" name="@" pos="2"> 
//     <o base="foo" line="84" loc="Φ.org.eolang.tuple-with-in-seq.φ.α0" pos="4" ref="79"> 
//       <o base="org.eolang.tuple" data="tuple" line="85" loc="Φ.org.eolang.tuple-with-in-seq.φ.α0.α0" pos="6"> 
//         <o base="org.eolang.int" data="int" line="85" loc="Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α0" pos="8">1</o>
//         <o base="org.eolang.int" data="int" line="85" loc="Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α1" pos="10">2</o>
//         <o base="org.eolang.int" data="int" line="85" loc="Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α2" pos="12">3</o>
//       </o>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="86" loc="Φ.org.eolang.tuple-with-in-seq.φ.α1" pos="4">TRUE</o>
//   </o>
// </o>
@XmirObject(name = "tuple-with-in-seqTest", oname = "tuple-with-in-seq", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOtuple_with_in_seqTest extends PhDefault {
    
  public EOtuple_with_in_seqTest() {
    this.add("foo", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1foo(rho);
        ret = new PhLocated(ret, 79, 2, "Φ.org.eolang.tuple-with-in-seq.foo");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret = new PhLocated(ret, 83, 2, "Φ.org.eolang.tuple-with-in-seq.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "foo");
          ret_1 = new PhLocated(ret_1, 84, 4, "Φ.org.eolang.tuple-with-in-seq.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
            ret_1_1 = new PhLocated(ret_1_1, 85, 6, "Φ.org.eolang.tuple-with-in-seq.φ.α0.α0");
            Phi[] ret_1_1_a = new Phi[3];
            Phi ret_1_1_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_1_a0 = new PhLocated(ret_1_1_a0, 85, 8, "Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α0");
              ret_1_1_a0 = new PhWith(ret_1_1_a0, "Δ", new Data.Value<>(1L));
            ret_1_1_a[0] = ret_1_1_a0;
            Phi ret_1_1_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_1_a1 = new PhLocated(ret_1_1_a1, 85, 10, "Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α1");
              ret_1_1_a1 = new PhWith(ret_1_1_a1, "Δ", new Data.Value<>(2L));
            ret_1_1_a[1] = ret_1_1_a1;
            Phi ret_1_1_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_1_a2 = new PhLocated(ret_1_1_a2, 85, 12, "Φ.org.eolang.tuple-with-in-seq.φ.α0.α0.α2");
              ret_1_1_a2 = new PhWith(ret_1_1_a2, "Δ", new Data.Value<>(3L));
            ret_1_1_a[2] = ret_1_1_a2;
            ret_1_1 = new PhWith(new PhCopy(ret_1_1), "Δ", new Data.Value<Phi[]>(ret_1_1_a));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 86, 4, "Φ.org.eolang.tuple-with-in-seq.φ.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>(Boolean.TRUE));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtuple_with_in_seqTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="79" loc="Φ.org.eolang.tuple-with-in-seq$foo" name="tuple-with-in-seq$foo" original-name="foo" parent="tuple-with-in-seq" pos="2"> 
//   <o line="79" loc="Φ.org.eolang.tuple-with-in-seq$foo.a" name="a" pos="3"/>
//   <o base="org.eolang.seq" line="80" loc="Φ.org.eolang.tuple-with-in-seq$foo.φ" name="@" pos="4"> 
//     <o base="t" cut="2" line="81" loc="Φ.org.eolang.tuple-with-in-seq$foo.φ.α0" ref="81"/>
//     <o base="t" line="82" loc="Φ.org.eolang.tuple-with-in-seq$foo.φ.α1" pos="6" ref="81"/>
//   </o>
//   <o base=".with" line="81" loc="Φ.org.eolang.tuple-with-in-seq$foo.t" name="t" pos="7"> 
//     <o base="a" line="81" loc="Φ.org.eolang.tuple-with-in-seq$foo.t.ρ" pos="6" ref="79"/>
//     <o base="org.eolang.string" data="string" line="81" loc="Φ.org.eolang.tuple-with-in-seq$foo.t.α0" pos="13">hi</o>
//   </o>
// </o>
@XmirObject(name = "ω1foo", oname = "foo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOω1foo extends PhDefault {
    
  public EOω1foo(final Phi sigma) {
    super(sigma);
    this.add("a", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret = new PhLocated(ret, 80, 4, "Φ.org.eolang.tuple-with-in-seq$foo.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "t");
        Phi ret_2 = new PhMethod(rho, "t");
          ret_2 = new PhLocated(ret_2, 82, 6, "Φ.org.eolang.tuple-with-in-seq$foo.φ.α1");
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("t", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "a");
        ret_base = new PhLocated(ret_base, 81, 6, "Φ.org.eolang.tuple-with-in-seq$foo.t.ρ");
      Phi ret = new PhMethod(ret_base, "with");
        ret = new PhLocated(ret, 81, 7, "Φ.org.eolang.tuple-with-in-seq$foo.t");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 81, 13, "Φ.org.eolang.tuple-with-in-seq$foo.t.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("hi"));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
