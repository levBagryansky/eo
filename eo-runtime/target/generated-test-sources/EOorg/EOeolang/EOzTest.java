
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="33" loc="Φ.org.eolang.z" name="z" original-name="z" pos="0"> 
//   <o base="z$y" cut="2" line="34" loc="Φ.org.eolang.z.y" name="y" pos="2" ref="34"/>
//   <o base="org.eolang.bool" data="bool" line="36" loc="Φ.org.eolang.z.φ" name="@" pos="2">TRUE</o>
// </o>
@XmirObject(name = "zTest", oname = "z", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/unit-tests.eo")
public final class EOzTest extends PhDefault {
  public EOzTest() {
    this.add("y", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1y(rho);
        ret = new PhLocated(ret, 34, 2, "Φ.org.eolang.z.y");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EObool(Phi.Φ);
        ret = new PhLocated(ret, 36, 2, "Φ.org.eolang.z.φ");
        ret = new PhWith(ret, "Δ", new Data.Value<>(Boolean.TRUE));
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOzTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="34" loc="Φ.org.eolang.z$y" name="z$y" original-name="y" parent="z" pos="2"> 
//   <o line="34" loc="Φ.org.eolang.z$y.x" name="x" pos="3"/>
//   <o base="x" line="35" loc="Φ.org.eolang.z$y.φ" name="@" pos="4" ref="34"/>
// </o>
@XmirObject(name = "ω1y", oname = "y", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/unit-tests.eo")
public final class EOω1y extends PhDefault {
  public EOω1y(final Phi sigma) {
    super(sigma);
    this.add("x", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "x");
        ret = new PhLocated(ret, 35, 4, "Φ.org.eolang.z$y.φ");
      return ret;
    })));
  }
}
}
