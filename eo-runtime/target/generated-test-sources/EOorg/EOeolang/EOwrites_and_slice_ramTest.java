
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="31" loc="Φ.org.eolang.writes-and-slice-ram" name="writes-and-slice-ram" original-name="writes-and-slice-ram" pos="0"> 
//   <o base="org.eolang.ram" line="32" loc="Φ.org.eolang.writes-and-slice-ram.r" name="r" pos="2"> 
//     <o base="org.eolang.int" data="int" line="32" loc="Φ.org.eolang.writes-and-slice-ram.r.α0" pos="6">1024</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="33" loc="Φ.org.eolang.writes-and-slice-ram.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="34" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0" pos="4"> 
//       <o base=".write" line="35" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α0" pos="6"> 
//         <o base="s" cut="3" line="36" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α0.ρ" ref="36"/>
//         <o base=".as-bytes" line="37" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α0.α0" pos="23"> 
//           <o base="org.eolang.string" data="string" line="37" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α0.α0.ρ" pos="8">Hello, world!</o>
//         </o>
//       </o>
//       <o base=".as-string" line="38" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α1" pos="6"> 
//         <o base=".slice" line="39" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ" pos="9"> 
//           <o base="s" line="39" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.ρ" pos="8" ref="36"/>
//           <o base="org.eolang.int" data="int" line="39" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.α0" pos="16">0</o>
//           <o base="org.eolang.int" data="int" line="39" loc="Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.α1" pos="18">5</o>
//         </o>
//       </o>
//     </o>
//     <o base=".equal-to" line="40" loc="Φ.org.eolang.writes-and-slice-ram.φ.α1" pos="5"> 
//       <o base="$" line="40" loc="Φ.org.eolang.writes-and-slice-ram.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.string" data="string" line="40" loc="Φ.org.eolang.writes-and-slice-ram.φ.α1.α0" pos="15">Hello</o>
//     </o>
//   </o>
//   <o base=".slice" line="36" loc="Φ.org.eolang.writes-and-slice-ram.s" name="s" pos="9"> 
//     <o base="r" line="36" loc="Φ.org.eolang.writes-and-slice-ram.s.ρ" pos="8" ref="32"/>
//     <o base="org.eolang.int" data="int" line="36" loc="Φ.org.eolang.writes-and-slice-ram.s.α0" pos="16">200</o>
//     <o base="org.eolang.int" data="int" line="36" loc="Φ.org.eolang.writes-and-slice-ram.s.α1" pos="20">13</o>
//   </o>
// </o>
@XmirObject(name = "writes-and-slice-ramTest", oname = "writes-and-slice-ram", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/ram-tests.eo")
public final class EOwrites_and_slice_ramTest extends PhDefault {
  public EOwrites_and_slice_ramTest() {
    this.add("r", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("ram").get();
        ret = new PhLocated(ret, 32, 2, "Φ.org.eolang.writes-and-slice-ram.r");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 32, 6, "Φ.org.eolang.writes-and-slice-ram.r.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 33, 2, "Φ.org.eolang.writes-and-slice-ram.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
          ret_1 = new PhLocated(ret_1, 34, 4, "Φ.org.eolang.writes-and-slice-ram.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "s");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "write");
            ret_1_1 = new PhLocated(ret_1_1, 35, 6, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1_base = new EOorg.EOeolang.EOstring(Phi.Φ);
              ret_1_1_1_base = new PhLocated(ret_1_1_1_base, 37, 8, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α0.α0.ρ");
              ret_1_1_1_base = new PhWith(ret_1_1_1_base, "Δ", new Data.Value<>("Hello, world!"));
            Phi ret_1_1_1 = new PhMethod(ret_1_1_1_base, "as-bytes");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 37, 23, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
          Phi ret_1_2_base_base = new PhMethod(rho, "s");
            ret_1_2_base_base = new PhLocated(ret_1_2_base_base, 39, 8, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.ρ");
          Phi ret_1_2_base = new PhMethod(ret_1_2_base_base, "slice");
            ret_1_2_base = new PhLocated(ret_1_2_base, 39, 9, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ");
          ret_1_2_base = new PhCopy(ret_1_2_base);
            Phi ret_1_2_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_2_base_1 = new PhLocated(ret_1_2_base_1, 39, 16, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.α0");
              ret_1_2_base_1 = new PhWith(ret_1_2_base_1, "Δ", new Data.Value<>(0L));
            Phi ret_1_2_base_2 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_2_base_2 = new PhLocated(ret_1_2_base_2, 39, 18, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α1.ρ.α1");
              ret_1_2_base_2 = new PhWith(ret_1_2_base_2, "Δ", new Data.Value<>(5L));
            ret_1_2_base = new PhWith(ret_1_2_base, 0, ret_1_2_base_1);
            ret_1_2_base = new PhWith(ret_1_2_base, 1, ret_1_2_base_2);
          Phi ret_1_2 = new PhMethod(ret_1_2_base, "as-string");
            ret_1_2 = new PhLocated(ret_1_2, 38, 6, "Φ.org.eolang.writes-and-slice-ram.φ.α0.α1");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 40, 4, "Φ.org.eolang.writes-and-slice-ram.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 40, 5, "Φ.org.eolang.writes-and-slice-ram.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 40, 15, "Φ.org.eolang.writes-and-slice-ram.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>("Hello"));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("s", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "r");
        ret_base = new PhLocated(ret_base, 36, 8, "Φ.org.eolang.writes-and-slice-ram.s.ρ");
      Phi ret = new PhMethod(ret_base, "slice");
        ret = new PhLocated(ret, 36, 9, "Φ.org.eolang.writes-and-slice-ram.s");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 36, 16, "Φ.org.eolang.writes-and-slice-ram.s.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(200L));
        Phi ret_2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 36, 20, "Φ.org.eolang.writes-and-slice-ram.s.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>(13L));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOwrites_and_slice_ramTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
