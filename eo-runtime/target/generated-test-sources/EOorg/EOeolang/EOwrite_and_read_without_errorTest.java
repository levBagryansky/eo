
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="86" loc="Φ.org.eolang.write-and-read-without-error" name="write-and-read-without-error" original-name="write-and-read-without-error" pos="0"> 
//   <o base="org.eolang.heap" line="87" loc="Φ.org.eolang.write-and-read-without-error.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="87" loc="Φ.org.eolang.write-and-read-without-error.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".pointer" line="88" loc="Φ.org.eolang.write-and-read-without-error.p" name="p" pos="3"> 
//     <o base="h" line="88" loc="Φ.org.eolang.write-and-read-without-error.p.ρ" pos="2" ref="87"/>
//     <o base="org.eolang.int" data="int" line="88" loc="Φ.org.eolang.write-and-read-without-error.p.α0" pos="12">0</o>
//     <o base="org.eolang.int" data="int" line="88" loc="Φ.org.eolang.write-and-read-without-error.p.α1" pos="14">8</o>
//   </o>
//   <o base="write-and-read-without-error$mem" cut="103" line="89" loc="Φ.org.eolang.write-and-read-without-error.mem" name="mem" pos="2" ref="89"> 
//     <o as="p" base="p" level="1" loc="Φ.org.eolang.write-and-read-without-error.mem.α0" ref="88"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="91" loc="Φ.org.eolang.write-and-read-without-error.φ" name="@" pos="2"> 
//     <o base=".write" line="92" loc="Φ.org.eolang.write-and-read-without-error.φ.α0" pos="7"> 
//       <o base="mem" line="92" loc="Φ.org.eolang.write-and-read-without-error.φ.α0.ρ" pos="4" ref="89"/>
//       <o base="org.eolang.bytes" data="bytes" line="92" loc="Φ.org.eolang.write-and-read-without-error.φ.α0.α0" pos="14">01 02 03</o>
//     </o>
//     <o base=".equal-to" line="93" loc="Φ.org.eolang.write-and-read-without-error.φ.α1" pos="5"> 
//       <o base="$" line="93" loc="Φ.org.eolang.write-and-read-without-error.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.bool" data="bool" line="93" loc="Φ.org.eolang.write-and-read-without-error.φ.α1.α0" pos="15">TRUE</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "write-and-read-without-errorTest", oname = "write-and-read-without-error", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOwrite_and_read_without_errorTest extends PhDefault {
  public EOwrite_and_read_without_errorTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 87, 2, "Φ.org.eolang.write-and-read-without-error.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 87, 7, "Φ.org.eolang.write-and-read-without-error.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("p", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 88, 2, "Φ.org.eolang.write-and-read-without-error.p.ρ");
      Phi ret = new PhMethod(ret_base, "pointer");
        ret = new PhLocated(ret, 88, 3, "Φ.org.eolang.write-and-read-without-error.p");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 88, 12, "Φ.org.eolang.write-and-read-without-error.p.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        Phi ret_2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 88, 14, "Φ.org.eolang.write-and-read-without-error.p.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>(8L));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("mem", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1mem(rho);
        ret = new PhLocated(ret, 89, 2, "Φ.org.eolang.write-and-read-without-error.mem");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 91, 2, "Φ.org.eolang.write-and-read-without-error.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "mem");
          ret_1_base = new PhLocated(ret_1_base, 92, 4, "Φ.org.eolang.write-and-read-without-error.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "write");
          ret_1 = new PhLocated(ret_1, 92, 7, "Φ.org.eolang.write-and-read-without-error.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EObytes(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 92, 14, "Φ.org.eolang.write-and-read-without-error.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(new byte[] {(byte) 0x01, (byte) 0x02, (byte) 0x03}));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 93, 4, "Φ.org.eolang.write-and-read-without-error.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 93, 5, "Φ.org.eolang.write-and-read-without-error.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 93, 15, "Φ.org.eolang.write-and-read-without-error.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(Boolean.TRUE));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOwrite_and_read_without_errorTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="89" loc="Φ.org.eolang.write-and-read-without-error$mem" name="write-and-read-without-error$mem" original-name="mem" parent="write-and-read-without-error" pos="2"> 
//   <o base=".block" line="90" loc="Φ.org.eolang.write-and-read-without-error$mem.φ" name="@" pos="5"> 
//     <o base="p" line="90" loc="Φ.org.eolang.write-and-read-without-error$mem.φ.ρ" pos="4" ref="89.88.460"/>
//     <o base="org.eolang.int" data="int" line="90" loc="Φ.org.eolang.write-and-read-without-error$mem.φ.α0" pos="12">8</o>
//   </o>
//   <o level="1" line="89.88.460" loc="Φ.org.eolang.write-and-read-without-error$mem.p" name="p"/>
// </o>
@XmirObject(name = "ω1mem", oname = "mem", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOω1mem extends PhDefault {
  public EOω1mem(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(new PhMethod(rho, "σ"), "p");
        ret_base = new PhLocated(ret_base, 90, 4, "Φ.org.eolang.write-and-read-without-error$mem.φ.ρ");
      Phi ret = new PhMethod(ret_base, "block");
        ret = new PhLocated(ret, 90, 5, "Φ.org.eolang.write-and-read-without-error$mem.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 90, 12, "Φ.org.eolang.write-and-read-without-error$mem.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(8L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
