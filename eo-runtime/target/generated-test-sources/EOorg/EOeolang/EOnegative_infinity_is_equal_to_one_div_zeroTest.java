
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="30" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero" name="negative-infinity-is-equal-to-one-div-zero" original-name="negative-infinity-is-equal-to-one-div-zero" pos="0"> 
//   <o base=".eq" line="31" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ" name="@" pos="2"> 
//     <o base="org.eolang.negative-infinity" line="32" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.ρ" pos="4"/>
//     <o base=".div" line="33" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0" pos="8"> 
//       <o base="org.eolang.float" data="float" line="33" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0.ρ" pos="4">-1.0</o>
//       <o base="org.eolang.float" data="float" line="33" loc="Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0.α0" pos="13">0.0</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "negative-infinity-is-equal-to-one-div-zeroTest", oname = "negative-infinity-is-equal-to-one-div-zero", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/negative-infinity-tests.eo")
public final class EOnegative_infinity_is_equal_to_one_div_zeroTest extends PhDefault {
    
  public EOnegative_infinity_is_equal_to_one_div_zeroTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("negative-infinity").get();
        ret_base = new PhLocated(ret_base, 32, 4, "Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 31, 2, "Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1_base = new PhLocated(ret_1_base, 33, 4, "Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0.ρ");
          ret_1_base = new PhWith(ret_1_base, "Δ", new Data.Value<>(-1.0d));
        Phi ret_1 = new PhMethod(ret_1_base, "div");
          ret_1 = new PhLocated(ret_1, 33, 8, "Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 33, 13, "Φ.org.eolang.negative-infinity-is-equal-to-one-div-zero.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(0.0d));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOnegative_infinity_is_equal_to_one_div_zeroTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
