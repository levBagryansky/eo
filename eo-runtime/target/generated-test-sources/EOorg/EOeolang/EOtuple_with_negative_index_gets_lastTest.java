
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="228" loc="Φ.org.eolang.tuple-with-negative-index-gets-last" name="tuple-with-negative-index-gets-last" original-name="tuple-with-negative-index-gets-last" pos="0"> 
//   <o base="org.eolang.tuple" data="tuple" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr" name="arr" pos="2"> 
//     <o base="org.eolang.int" data="int" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α0" pos="4">0</o>
//     <o base="org.eolang.int" data="int" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α1" pos="6">1</o>
//     <o base="org.eolang.int" data="int" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α2" pos="8">2</o>
//     <o base="org.eolang.int" data="int" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α3" pos="10">3</o>
//     <o base="org.eolang.int" data="int" line="229" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α4" pos="12">4</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="230" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ" name="@" pos="2"> 
//     <o base=".at" line="231" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0" pos="7"> 
//       <o base="arr" line="231" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0.ρ" pos="4" ref="229"/>
//       <o base="org.eolang.int" data="int" line="231" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0.α0" pos="11">-1</o>
//     </o>
//     <o base=".equal-to" line="232" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1" pos="5"> 
//       <o base="$" line="232" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="232" loc="Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1.α0" pos="15">4</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "tuple-with-negative-index-gets-lastTest", oname = "tuple-with-negative-index-gets-last", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOtuple_with_negative_index_gets_lastTest extends PhDefault {
  public EOtuple_with_negative_index_gets_lastTest() {
    this.add("arr", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 229, 2, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr");
        Phi[] ret_a = new Phi[5];
        Phi ret_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a0 = new PhLocated(ret_a0, 229, 4, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α0");
          ret_a0 = new PhWith(ret_a0, "Δ", new Data.Value<>(0L));
        ret_a[0] = ret_a0;
        Phi ret_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a1 = new PhLocated(ret_a1, 229, 6, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α1");
          ret_a1 = new PhWith(ret_a1, "Δ", new Data.Value<>(1L));
        ret_a[1] = ret_a1;
        Phi ret_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a2 = new PhLocated(ret_a2, 229, 8, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α2");
          ret_a2 = new PhWith(ret_a2, "Δ", new Data.Value<>(2L));
        ret_a[2] = ret_a2;
        Phi ret_a3 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a3 = new PhLocated(ret_a3, 229, 10, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α3");
          ret_a3 = new PhWith(ret_a3, "Δ", new Data.Value<>(3L));
        ret_a[3] = ret_a3;
        Phi ret_a4 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a4 = new PhLocated(ret_a4, 229, 12, "Φ.org.eolang.tuple-with-negative-index-gets-last.arr.α4");
          ret_a4 = new PhWith(ret_a4, "Δ", new Data.Value<>(4L));
        ret_a[4] = ret_a4;
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 230, 2, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "arr");
          ret_1_base = new PhLocated(ret_1_base, 231, 4, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "at");
          ret_1 = new PhLocated(ret_1, 231, 7, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 231, 11, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(-1L));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 232, 4, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 232, 5, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 232, 15, "Φ.org.eolang.tuple-with-negative-index-gets-last.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(4L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtuple_with_negative_index_gets_lastTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
