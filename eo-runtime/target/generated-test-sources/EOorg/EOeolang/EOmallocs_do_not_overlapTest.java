
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="61" loc="Φ.org.eolang.mallocs-do-not-overlap" name="mallocs-do-not-overlap" original-name="mallocs-do-not-overlap" pos="0"> 
//   <o base="org.eolang.heap" const="" line="62" loc="Φ.org.eolang.mallocs-do-not-overlap.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="62" loc="Φ.org.eolang.mallocs-do-not-overlap.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".malloc" const="" line="63" loc="Φ.org.eolang.mallocs-do-not-overlap.p1" name="p1" pos="3"> 
//     <o base="h" line="63" loc="Φ.org.eolang.mallocs-do-not-overlap.p1.ρ" pos="2" ref="62"/>
//     <o base="org.eolang.int" data="int" line="63" loc="Φ.org.eolang.mallocs-do-not-overlap.p1.α0" pos="11">64</o>
//   </o>
//   <o base=".malloc" const="" line="64" loc="Φ.org.eolang.mallocs-do-not-overlap.p2" name="p2" pos="3"> 
//     <o base="h" line="64" loc="Φ.org.eolang.mallocs-do-not-overlap.p2.ρ" pos="2" ref="62"/>
//     <o base="org.eolang.int" data="int" line="64" loc="Φ.org.eolang.mallocs-do-not-overlap.p2.α0" pos="11">32</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="65" loc="Φ.org.eolang.mallocs-do-not-overlap.φ" name="@" pos="2"> 
//     <o base=".or" line="66" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0" pos="4"> 
//       <o base=".gte" line="67" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ" pos="8"> 
//         <o base="p2" line="67" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.ρ" pos="6" ref="64"/>
//         <o base=".plus" line="68" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0" pos="10"> 
//           <o base="p1" line="68" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0.ρ" pos="8" ref="63"/>
//           <o base="org.eolang.int" data="int" line="68" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0.α0" pos="16">64</o>
//         </o>
//       </o>
//       <o base=".lte" line="69" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0" pos="8"> 
//         <o base="p2" line="69" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.ρ" pos="6" ref="64"/>
//         <o base=".minus" line="70" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0" pos="10"> 
//           <o base="p1" line="70" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0.ρ" pos="8" ref="63"/>
//           <o base="org.eolang.int" data="int" line="70" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0.α0" pos="17">32</o>
//         </o>
//       </o>
//     </o>
//     <o base=".equal-to" line="71" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α1" pos="5"> 
//       <o base="$" line="71" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.bool" data="bool" line="71" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α1.α0" pos="15">TRUE</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "mallocs-do-not-overlapTest", oname = "mallocs-do-not-overlap", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOmallocs_do_not_overlapTest extends PhDefault {
  public EOmallocs_do_not_overlapTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 62, 2, "Φ.org.eolang.mallocs-do-not-overlap.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 62, 7, "Φ.org.eolang.mallocs-do-not-overlap.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p1", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 63, 2, "Φ.org.eolang.mallocs-do-not-overlap.p1.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 63, 3, "Φ.org.eolang.mallocs-do-not-overlap.p1");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 63, 11, "Φ.org.eolang.mallocs-do-not-overlap.p1.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(64L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p2", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 64, 2, "Φ.org.eolang.mallocs-do-not-overlap.p2.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 64, 3, "Φ.org.eolang.mallocs-do-not-overlap.p2");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 64, 11, "Φ.org.eolang.mallocs-do-not-overlap.p2.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(32L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 65, 2, "Φ.org.eolang.mallocs-do-not-overlap.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "p2");
          ret_1_base_base = new PhLocated(ret_1_base_base, 67, 6, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "gte");
          ret_1_base = new PhLocated(ret_1_base, 67, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1_base = new PhMethod(rho, "p1");
            ret_1_base_1_base = new PhLocated(ret_1_base_1_base, 68, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0.ρ");
          Phi ret_1_base_1 = new PhMethod(ret_1_base_1_base, "plus");
            ret_1_base_1 = new PhLocated(ret_1_base_1, 68, 10, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0");
          ret_1_base_1 = new PhCopy(ret_1_base_1);
            Phi ret_1_base_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_1_base_1_1 = new PhLocated(ret_1_base_1_1, 68, 16, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.ρ.α0.α0");
              ret_1_base_1_1 = new PhWith(ret_1_base_1_1, "Δ", new Data.Value<>(64L));
            ret_1_base_1 = new PhWith(ret_1_base_1, 0, ret_1_base_1_1);
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "or");
          ret_1 = new PhLocated(ret_1, 66, 4, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "p2");
            ret_1_1_base = new PhLocated(ret_1_1_base, 69, 6, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "lte");
            ret_1_1 = new PhLocated(ret_1_1, 69, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1_base = new PhMethod(rho, "p1");
              ret_1_1_1_base = new PhLocated(ret_1_1_1_base, 70, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0.ρ");
            Phi ret_1_1_1 = new PhMethod(ret_1_1_1_base, "minus");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 70, 10, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0");
            ret_1_1_1 = new PhCopy(ret_1_1_1);
              Phi ret_1_1_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
                ret_1_1_1_1 = new PhLocated(ret_1_1_1_1, 70, 17, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0.α0.α0.α0");
                ret_1_1_1_1 = new PhWith(ret_1_1_1_1, "Δ", new Data.Value<>(32L));
              ret_1_1_1 = new PhWith(ret_1_1_1, 0, ret_1_1_1_1);
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 71, 4, "Φ.org.eolang.mallocs-do-not-overlap.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 71, 5, "Φ.org.eolang.mallocs-do-not-overlap.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 71, 15, "Φ.org.eolang.mallocs-do-not-overlap.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(Boolean.TRUE));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmallocs_do_not_overlapTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
