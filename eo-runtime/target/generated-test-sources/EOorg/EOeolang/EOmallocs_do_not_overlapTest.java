
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="52" loc="Φ.org.eolang.mallocs-do-not-overlap" name="mallocs-do-not-overlap" original-name="mallocs-do-not-overlap" pos="0"> 
//   <o base="org.eolang.heap" const="" line="53" loc="Φ.org.eolang.mallocs-do-not-overlap.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="53" loc="Φ.org.eolang.mallocs-do-not-overlap.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".malloc" const="" line="54" loc="Φ.org.eolang.mallocs-do-not-overlap.p1" name="p1" pos="3"> 
//     <o base="h" line="54" loc="Φ.org.eolang.mallocs-do-not-overlap.p1.ρ" pos="2" ref="53"/>
//     <o base="org.eolang.int" data="int" line="54" loc="Φ.org.eolang.mallocs-do-not-overlap.p1.α0" pos="11">64</o>
//   </o>
//   <o base=".malloc" const="" line="55" loc="Φ.org.eolang.mallocs-do-not-overlap.p2" name="p2" pos="3"> 
//     <o base="h" line="55" loc="Φ.org.eolang.mallocs-do-not-overlap.p2.ρ" pos="2" ref="53"/>
//     <o base="org.eolang.int" data="int" line="55" loc="Φ.org.eolang.mallocs-do-not-overlap.p2.α0" pos="11">32</o>
//   </o>
//   <o base=".eq" line="56" loc="Φ.org.eolang.mallocs-do-not-overlap.φ" name="@" pos="2"> 
//     <o base=".or" line="57" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ" pos="4"> 
//       <o base=".gte" line="58" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ" pos="8"> 
//         <o base="p2" line="58" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.ρ" pos="6" ref="55"/>
//         <o base=".plus" line="59" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0" pos="10"> 
//           <o base="p1" line="59" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0.ρ" pos="8" ref="54"/>
//           <o base="org.eolang.int" data="int" line="59" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0.α0" pos="16">64</o>
//         </o>
//       </o>
//       <o base=".lte" line="60" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0" pos="8"> 
//         <o base="p2" line="60" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.ρ" pos="6" ref="55"/>
//         <o base=".minus" line="61" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0" pos="10"> 
//           <o base="p1" line="61" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0.ρ" pos="8" ref="54"/>
//           <o base="org.eolang.int" data="int" line="61" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0.α0" pos="17">32</o>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="62" loc="Φ.org.eolang.mallocs-do-not-overlap.φ.α0" pos="4">TRUE</o>
//   </o>
// </o>
@XmirObject(name = "mallocs-do-not-overlapTest", oname = "mallocs-do-not-overlap", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOmallocs_do_not_overlapTest extends PhDefault {
    
  public EOmallocs_do_not_overlapTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 53, 2, "Φ.org.eolang.mallocs-do-not-overlap.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 53, 7, "Φ.org.eolang.mallocs-do-not-overlap.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p1", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 54, 2, "Φ.org.eolang.mallocs-do-not-overlap.p1.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 54, 3, "Φ.org.eolang.mallocs-do-not-overlap.p1");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 54, 11, "Φ.org.eolang.mallocs-do-not-overlap.p1.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(64L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p2", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 55, 2, "Φ.org.eolang.mallocs-do-not-overlap.p2.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 55, 3, "Φ.org.eolang.mallocs-do-not-overlap.p2");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 55, 11, "Φ.org.eolang.mallocs-do-not-overlap.p2.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(32L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new PhMethod(rho, "p2");
        ret_base_base_base = new PhLocated(ret_base_base_base, 58, 6, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "gte");
        ret_base_base = new PhLocated(ret_base_base, 58, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1_base = new PhMethod(rho, "p1");
          ret_base_base_1_base = new PhLocated(ret_base_base_1_base, 59, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0.ρ");
        Phi ret_base_base_1 = new PhMethod(ret_base_base_1_base, "plus");
          ret_base_base_1 = new PhLocated(ret_base_base_1, 59, 10, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0");
        ret_base_base_1 = new PhCopy(ret_base_base_1);
          Phi ret_base_base_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_base_base_1_1 = new PhLocated(ret_base_base_1_1, 59, 16, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.ρ.α0.α0");
            ret_base_base_1_1 = new PhWith(ret_base_base_1_1, "Δ", new Data.Value<>(64L));
          ret_base_base_1 = new PhWith(ret_base_base_1, 0, ret_base_base_1_1);
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "or");
        ret_base = new PhLocated(ret_base, 57, 4, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new PhMethod(rho, "p2");
          ret_base_1_base = new PhLocated(ret_base_1_base, 60, 6, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.ρ");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "lte");
          ret_base_1 = new PhLocated(ret_base_1, 60, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1_base = new PhMethod(rho, "p1");
            ret_base_1_1_base = new PhLocated(ret_base_1_1_base, 61, 8, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0.ρ");
          Phi ret_base_1_1 = new PhMethod(ret_base_1_1_base, "minus");
            ret_base_1_1 = new PhLocated(ret_base_1_1, 61, 10, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0");
          ret_base_1_1 = new PhCopy(ret_base_1_1);
            Phi ret_base_1_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_base_1_1_1 = new PhLocated(ret_base_1_1_1, 61, 17, "Φ.org.eolang.mallocs-do-not-overlap.φ.ρ.α0.α0.α0");
              ret_base_1_1_1 = new PhWith(ret_base_1_1_1, "Δ", new Data.Value<>(32L));
            ret_base_1_1 = new PhWith(ret_base_1_1, 0, ret_base_1_1_1);
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 56, 2, "Φ.org.eolang.mallocs-do-not-overlap.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 62, 4, "Φ.org.eolang.mallocs-do-not-overlap.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.TRUE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmallocs_do_not_overlapTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
