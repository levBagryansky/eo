
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="56" loc="Φ.org.eolang.iterates-over-simple-counter" name="iterates-over-simple-counter" original-name="iterates-over-simple-counter" pos="0"> 
//   <o base="org.eolang.memory" line="57" loc="Φ.org.eolang.iterates-over-simple-counter.x" name="x" pos="2"> 
//     <o base="org.eolang.int" data="int" line="57" loc="Φ.org.eolang.iterates-over-simple-counter.x.α0" pos="9">0</o>
//   </o>
//   <o base=".and" line="58" loc="Φ.org.eolang.iterates-over-simple-counter.φ" name="@" pos="2"> 
//     <o base=".eq" line="59" loc="Φ.org.eolang.iterates-over-simple-counter.φ.ρ" pos="4"> 
//       <o base=".write" line="60" loc="Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ" pos="7"> 
//         <o base="x" line="60" loc="Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ.ρ" pos="6" ref="57"/>
//         <o base="org.eolang.int" data="int" line="60" loc="Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ.α0" pos="14">5</o>
//       </o>
//       <o base="org.eolang.int" data="int" line="61" loc="Φ.org.eolang.iterates-over-simple-counter.φ.ρ.α0" pos="6">5</o>
//     </o>
//     <o base=".eq" line="62" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0" pos="4"> 
//       <o base=".while" line="63" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ" pos="6"> 
//         <o base=".lt" line="64" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ" pos="16"> 
//           <o base=".as-int" line="64" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.ρ" pos="9"> 
//             <o base="x" line="64" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.ρ.ρ" pos="8" ref="57"/>
//           </o>
//           <o base="org.eolang.int" data="int" line="64" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.α0" pos="20">10</o>
//         </o>
//         <o base="iterates-over-simple-counter$t1$t1$t0$a1" cut="42" line="65" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.α0" pos="8" ref="65"> 
//           <o as="x" base="x" level="1" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.α0.α0" ref="57"/>
//         </o>
//       </o>
//       <o base="org.eolang.int" data="int" line="68" loc="Φ.org.eolang.iterates-over-simple-counter.φ.α0.α0" pos="6">11</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "iterates-over-simple-counterTest", oname = "iterates-over-simple-counter", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bool-tests.eo")
public final class EOiterates_over_simple_counterTest extends PhDefault {
    
  public EOiterates_over_simple_counterTest() {
    this.add("x", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 57, 2, "Φ.org.eolang.iterates-over-simple-counter.x");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 57, 9, "Φ.org.eolang.iterates-over-simple-counter.x.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new PhMethod(rho, "x");
        ret_base_base_base = new PhLocated(ret_base_base_base, 60, 6, "Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "write");
        ret_base_base = new PhLocated(ret_base_base, 60, 7, "Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_base_1 = new PhLocated(ret_base_base_1, 60, 14, "Φ.org.eolang.iterates-over-simple-counter.φ.ρ.ρ.α0");
          ret_base_base_1 = new PhWith(ret_base_base_1, "Δ", new Data.Value<>(5L));
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "eq");
        ret_base = new PhLocated(ret_base, 59, 4, "Φ.org.eolang.iterates-over-simple-counter.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 61, 6, "Φ.org.eolang.iterates-over-simple-counter.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(5L));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "and");
        ret = new PhLocated(ret, 58, 2, "Φ.org.eolang.iterates-over-simple-counter.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base_base_base = new PhMethod(rho, "x");
          ret_1_base_base_base_base = new PhLocated(ret_1_base_base_base_base, 64, 8, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.ρ.ρ");
        Phi ret_1_base_base_base = new PhMethod(ret_1_base_base_base_base, "as-int");
          ret_1_base_base_base = new PhLocated(ret_1_base_base_base, 64, 9, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.ρ");
        Phi ret_1_base_base = new PhMethod(ret_1_base_base_base, "lt");
          ret_1_base_base = new PhLocated(ret_1_base_base, 64, 16, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ");
        ret_1_base_base = new PhCopy(ret_1_base_base);
          Phi ret_1_base_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_base_1 = new PhLocated(ret_1_base_base_1, 64, 20, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.ρ.α0");
            ret_1_base_base_1 = new PhWith(ret_1_base_base_1, "Δ", new Data.Value<>(10L));
          ret_1_base_base = new PhWith(ret_1_base_base, 0, ret_1_base_base_1);
        Phi ret_1_base = new PhMethod(ret_1_base_base, "while");
          ret_1_base = new PhLocated(ret_1_base, 63, 6, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1 = new EOω1t1$EOt1$EOt0$EOa1(rho);
            ret_1_base_1 = new PhLocated(ret_1_base_1, 65, 8, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.ρ.α0");
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 62, 4, "Φ.org.eolang.iterates-over-simple-counter.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 68, 6, "Φ.org.eolang.iterates-over-simple-counter.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(11L));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOiterates_over_simple_counterTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="65" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1" name="iterates-over-simple-counter$t1$t1$t0$a1" parent="iterates-over-simple-counter" pos="8"> 
//   <o line="65" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.i" name="i" pos="9"/>
//   <o base=".write" line="66" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ" name="@" pos="11"> 
//     <o base="x" line="66" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.ρ" pos="10" ref="65.57.459"/>
//     <o base=".plus" line="67" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0" pos="20"> 
//       <o base=".as-int" line="67" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.ρ" pos="13"> 
//         <o base="x" line="67" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.ρ.ρ" pos="12" ref="65.57.459"/>
//       </o>
//       <o base="org.eolang.int" data="int" line="67" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.α0" pos="26">1</o>
//     </o>
//   </o>
//   <o level="1" line="65.57.459" loc="Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.x" name="x"/>
// </o>
@XmirObject(name = "ω1t1$t1$t0$a1", oname = "ω1t1$t1$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bool-tests.eo")
public final class EOω1t1$EOt1$EOt0$EOa1 extends PhDefault {
    
  public EOω1t1$EOt1$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("i", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(new PhMethod(rho, "σ"), "x");
        ret_base = new PhLocated(ret_base, 66, 10, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.ρ");
      Phi ret = new PhMethod(ret_base, "write");
        ret = new PhLocated(ret, 66, 11, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(new PhMethod(rho, "σ"), "x");
          ret_1_base_base = new PhLocated(ret_1_base_base, 67, 12, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "as-int");
          ret_1_base = new PhLocated(ret_1_base, 67, 13, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "plus");
          ret_1 = new PhLocated(ret_1, 67, 20, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 67, 26, "Φ.org.eolang.iterates-over-simple-counter$t1$t1$t0$a1.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(1L));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
