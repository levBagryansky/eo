
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="43" loc="Φ.org.eolang.malloc-returns-different-pointers" name="malloc-returns-different-pointers" original-name="malloc-returns-different-pointers" pos="0"> 
//   <o base="org.eolang.heap" const="" line="44" loc="Φ.org.eolang.malloc-returns-different-pointers.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="44" loc="Φ.org.eolang.malloc-returns-different-pointers.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".malloc" const="" line="45" loc="Φ.org.eolang.malloc-returns-different-pointers.p1" name="p1" pos="3"> 
//     <o base="h" line="45" loc="Φ.org.eolang.malloc-returns-different-pointers.p1.ρ" pos="2" ref="44"/>
//     <o base="org.eolang.int" data="int" line="45" loc="Φ.org.eolang.malloc-returns-different-pointers.p1.α0" pos="11">64</o>
//   </o>
//   <o base=".malloc" const="" line="46" loc="Φ.org.eolang.malloc-returns-different-pointers.p2" name="p2" pos="3"> 
//     <o base="h" line="46" loc="Φ.org.eolang.malloc-returns-different-pointers.p2.ρ" pos="2" ref="44"/>
//     <o base="org.eolang.int" data="int" line="46" loc="Φ.org.eolang.malloc-returns-different-pointers.p2.α0" pos="11">32</o>
//   </o>
//   <o base=".not" line="47" loc="Φ.org.eolang.malloc-returns-different-pointers.φ" name="@" pos="2"> 
//     <o base=".eq" line="48" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.ρ" pos="4"> 
//       <o base="p1" line="49" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.ρ.ρ" pos="6" ref="45"/>
//       <o base="p2" line="50" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.ρ.α0" pos="6" ref="46"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "malloc-returns-different-pointersTest", oname = "malloc-returns-different-pointers", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOmalloc_returns_different_pointersTest extends PhDefault {
    
  public EOmalloc_returns_different_pointersTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 44, 2, "Φ.org.eolang.malloc-returns-different-pointers.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 44, 7, "Φ.org.eolang.malloc-returns-different-pointers.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p1", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 45, 2, "Φ.org.eolang.malloc-returns-different-pointers.p1.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 45, 3, "Φ.org.eolang.malloc-returns-different-pointers.p1");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 45, 11, "Φ.org.eolang.malloc-returns-different-pointers.p1.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(64L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p2", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 46, 2, "Φ.org.eolang.malloc-returns-different-pointers.p2.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 46, 3, "Φ.org.eolang.malloc-returns-different-pointers.p2");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 46, 11, "Φ.org.eolang.malloc-returns-different-pointers.p2.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(32L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(rho, "p1");
        ret_base_base = new PhLocated(ret_base_base, 49, 6, "Φ.org.eolang.malloc-returns-different-pointers.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "eq");
        ret_base = new PhLocated(ret_base, 48, 4, "Φ.org.eolang.malloc-returns-different-pointers.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "p2");
          ret_base_1 = new PhLocated(ret_base_1, 50, 6, "Φ.org.eolang.malloc-returns-different-pointers.φ.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "not");
        ret = new PhLocated(ret, 47, 2, "Φ.org.eolang.malloc-returns-different-pointers.φ");
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmalloc_returns_different_pointersTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
