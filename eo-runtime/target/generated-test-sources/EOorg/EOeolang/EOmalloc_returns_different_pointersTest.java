
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="45" loc="Φ.org.eolang.malloc-returns-different-pointers" name="malloc-returns-different-pointers" original-name="malloc-returns-different-pointers" pos="0"> 
//   <o base="org.eolang.heap" const="" line="46" loc="Φ.org.eolang.malloc-returns-different-pointers.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="46" loc="Φ.org.eolang.malloc-returns-different-pointers.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".malloc" const="" line="47" loc="Φ.org.eolang.malloc-returns-different-pointers.p1" name="p1" pos="3"> 
//     <o base="h" line="47" loc="Φ.org.eolang.malloc-returns-different-pointers.p1.ρ" pos="2" ref="46"/>
//     <o base="org.eolang.int" data="int" line="47" loc="Φ.org.eolang.malloc-returns-different-pointers.p1.α0" pos="11">64</o>
//   </o>
//   <o base=".malloc" const="" line="48" loc="Φ.org.eolang.malloc-returns-different-pointers.p2" name="p2" pos="3"> 
//     <o base="h" line="48" loc="Φ.org.eolang.malloc-returns-different-pointers.p2.ρ" pos="2" ref="46"/>
//     <o base="org.eolang.int" data="int" line="48" loc="Φ.org.eolang.malloc-returns-different-pointers.p2.α0" pos="11">32</o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="49" loc="Φ.org.eolang.malloc-returns-different-pointers.φ" name="@" pos="2"> 
//     <o base=".eq" line="50" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0" pos="4"> 
//       <o base="org.eolang.seq" line="51" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ" pos="6"> 
//         <o base=".stdout" line="52" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0" pos="13"> 
//           <o base=".io" line="52" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ" pos="10"> 
//             <o base=".eolang" line="52" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ" pos="8"> 
//               <o base=".org" line="52" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ.ρ" pos="8"> 
//                 <o base="Q" line="52" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ.ρ.ρ" pos="8"/>
//               </o>
//             </o>
//           </o>
//           <o base=".sprintf" line="53" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0" pos="16"> 
//             <o base=".txt" line="53" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ" pos="12"> 
//               <o base=".eolang" line="53" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ" pos="10"> 
//                 <o base=".org" line="53" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ.ρ" pos="10"> 
//                   <o base="Q" line="53" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ.ρ.ρ" pos="10"/>
//                 </o>
//               </o>
//             </o>
//             <o base="org.eolang.string" data="string" line="54" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α0" pos="12">p1 = %d\np2 = %d\n</o>
//             <o base="p1" line="55" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α1" pos="12" ref="47"/>
//             <o base="p2" line="56" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α2" pos="12" ref="48"/>
//           </o>
//         </o>
//         <o base="p1" line="57" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α1" pos="8" ref="47"/>
//       </o>
//       <o base="p2" line="58" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α0.α0" pos="6" ref="48"/>
//     </o>
//     <o base=".equal-to" line="59" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α1" pos="5"> 
//       <o base="$" line="59" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.bool" data="bool" line="59" loc="Φ.org.eolang.malloc-returns-different-pointers.φ.α1.α0" pos="15">FALSE</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "malloc-returns-different-pointersTest", oname = "malloc-returns-different-pointers", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOmalloc_returns_different_pointersTest extends PhDefault {
  public EOmalloc_returns_different_pointersTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 46, 2, "Φ.org.eolang.malloc-returns-different-pointers.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 46, 7, "Φ.org.eolang.malloc-returns-different-pointers.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p1", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 47, 2, "Φ.org.eolang.malloc-returns-different-pointers.p1.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 47, 3, "Φ.org.eolang.malloc-returns-different-pointers.p1");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 47, 11, "Φ.org.eolang.malloc-returns-different-pointers.p1.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(64L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("p2", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 48, 2, "Φ.org.eolang.malloc-returns-different-pointers.p2.ρ");
      Phi ret = new PhMethod(ret_base, "malloc");
        ret = new PhLocated(ret, 48, 3, "Φ.org.eolang.malloc-returns-different-pointers.p2");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 48, 11, "Φ.org.eolang.malloc-returns-different-pointers.p2.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(32L));
        ret = new PhWith(ret, 0, ret_1);
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 49, 2, "Φ.org.eolang.malloc-returns-different-pointers.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
          ret_1_base = new PhLocated(ret_1_base, 51, 6, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1_base_base_base_base = Phi.Φ;
            ret_1_base_1_base_base_base_base = new PhLocated(ret_1_base_1_base_base_base_base, 52, 8, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ.ρ.ρ");
          Phi ret_1_base_1_base_base_base = new PhMethod(ret_1_base_1_base_base_base_base, "org");
            ret_1_base_1_base_base_base = new PhLocated(ret_1_base_1_base_base_base, 52, 8, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ.ρ");
          Phi ret_1_base_1_base_base = new PhMethod(ret_1_base_1_base_base_base, "eolang");
            ret_1_base_1_base_base = new PhLocated(ret_1_base_1_base_base, 52, 8, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ.ρ");
          Phi ret_1_base_1_base = new PhMethod(ret_1_base_1_base_base, "io");
            ret_1_base_1_base = new PhLocated(ret_1_base_1_base, 52, 10, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.ρ");
          Phi ret_1_base_1 = new PhMethod(ret_1_base_1_base, "stdout");
            ret_1_base_1 = new PhLocated(ret_1_base_1, 52, 13, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0");
          ret_1_base_1 = new PhCopy(ret_1_base_1);
            Phi ret_1_base_1_1_base_base_base_base = Phi.Φ;
              ret_1_base_1_1_base_base_base_base = new PhLocated(ret_1_base_1_1_base_base_base_base, 53, 10, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ.ρ.ρ");
            Phi ret_1_base_1_1_base_base_base = new PhMethod(ret_1_base_1_1_base_base_base_base, "org");
              ret_1_base_1_1_base_base_base = new PhLocated(ret_1_base_1_1_base_base_base, 53, 10, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ.ρ");
            Phi ret_1_base_1_1_base_base = new PhMethod(ret_1_base_1_1_base_base_base, "eolang");
              ret_1_base_1_1_base_base = new PhLocated(ret_1_base_1_1_base_base, 53, 10, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ.ρ");
            Phi ret_1_base_1_1_base = new PhMethod(ret_1_base_1_1_base_base, "txt");
              ret_1_base_1_1_base = new PhLocated(ret_1_base_1_1_base, 53, 12, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.ρ");
            Phi ret_1_base_1_1 = new PhMethod(ret_1_base_1_1_base, "sprintf");
              ret_1_base_1_1 = new PhLocated(ret_1_base_1_1, 53, 16, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0");
            ret_1_base_1_1 = new PhCopy(ret_1_base_1_1);
              Phi ret_1_base_1_1_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
                ret_1_base_1_1_1 = new PhLocated(ret_1_base_1_1_1, 54, 12, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α0");
                ret_1_base_1_1_1 = new PhWith(ret_1_base_1_1_1, "Δ", new Data.Value<>("p1 = %d\np2 = %d\n"));
              Phi ret_1_base_1_1_2 = new PhMethod(rho, "p1");
                ret_1_base_1_1_2 = new PhLocated(ret_1_base_1_1_2, 55, 12, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α1");
              Phi ret_1_base_1_1_3 = new PhMethod(rho, "p2");
                ret_1_base_1_1_3 = new PhLocated(ret_1_base_1_1_3, 56, 12, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α0.α0.α2");
              ret_1_base_1_1 = new PhWith(ret_1_base_1_1, 0, ret_1_base_1_1_1);
              ret_1_base_1_1 = new PhWith(ret_1_base_1_1, 1, ret_1_base_1_1_2);
              ret_1_base_1_1 = new PhWith(ret_1_base_1_1, 2, ret_1_base_1_1_3);
            ret_1_base_1 = new PhWith(ret_1_base_1, 0, ret_1_base_1_1);
          Phi ret_1_base_2 = new PhMethod(rho, "p1");
            ret_1_base_2 = new PhLocated(ret_1_base_2, 57, 8, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.ρ.α1");
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
          ret_1_base = new PhWith(ret_1_base, 1, ret_1_base_2);
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 50, 4, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new PhMethod(rho, "p2");
            ret_1_1 = new PhLocated(ret_1_1, 58, 6, "Φ.org.eolang.malloc-returns-different-pointers.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 59, 4, "Φ.org.eolang.malloc-returns-different-pointers.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 59, 5, "Φ.org.eolang.malloc-returns-different-pointers.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 59, 15, "Φ.org.eolang.malloc-returns-different-pointers.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(Boolean.FALSE));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmalloc_returns_different_pointersTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
