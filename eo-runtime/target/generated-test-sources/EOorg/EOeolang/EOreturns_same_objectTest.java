
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="197" loc="Φ.org.eolang.returns-same-object" name="returns-same-object" original-name="returns-same-object" pos="0"> 
//   <o base="returns-same-object$foo" cut="307" line="198" loc="Φ.org.eolang.returns-same-object.foo" name="foo" pos="2" ref="198"/>
//   <o base="org.eolang.hamcrest.assert-that" line="201" loc="Φ.org.eolang.returns-same-object.φ" name="@" pos="2"> 
//     <o base=".<" line="202" loc="Φ.org.eolang.returns-same-object.φ.α0" pos="9"> 
//       <o base=".x" line="202" loc="Φ.org.eolang.returns-same-object.φ.α0.ρ" pos="7"> 
//         <o base="foo" line="202" loc="Φ.org.eolang.returns-same-object.φ.α0.ρ.ρ" pos="4" ref="198"/>
//       </o>
//     </o>
//     <o base=".equal-to" line="203" loc="Φ.org.eolang.returns-same-object.φ.α1" pos="5"> 
//       <o base="$" line="203" loc="Φ.org.eolang.returns-same-object.φ.α1.ρ" pos="4"/>
//       <o base=".<" line="204" loc="Φ.org.eolang.returns-same-object.φ.α1.α0" pos="11"> 
//         <o base=".x" line="204" loc="Φ.org.eolang.returns-same-object.φ.α1.α0.ρ" pos="9"> 
//           <o base="foo" line="204" loc="Φ.org.eolang.returns-same-object.φ.α1.α0.ρ.ρ" pos="6" ref="198"/>
//         </o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "returns-same-objectTest", oname = "returns-same-object", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOreturns_same_objectTest extends PhDefault {
  public EOreturns_same_objectTest() {
    this.add("foo", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1foo(rho);
        ret = new PhLocated(ret, 198, 2, "Φ.org.eolang.returns-same-object.foo");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 201, 2, "Φ.org.eolang.returns-same-object.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "foo");
          ret_1_base_base = new PhLocated(ret_1_base_base, 202, 4, "Φ.org.eolang.returns-same-object.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "x");
          ret_1_base = new PhLocated(ret_1_base, 202, 7, "Φ.org.eolang.returns-same-object.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "ν");
          ret_1 = new PhLocated(ret_1, 202, 9, "Φ.org.eolang.returns-same-object.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 203, 4, "Φ.org.eolang.returns-same-object.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 203, 5, "Φ.org.eolang.returns-same-object.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1_base_base = new PhMethod(rho, "foo");
            ret_2_1_base_base = new PhLocated(ret_2_1_base_base, 204, 6, "Φ.org.eolang.returns-same-object.φ.α1.α0.ρ.ρ");
          Phi ret_2_1_base = new PhMethod(ret_2_1_base_base, "x");
            ret_2_1_base = new PhLocated(ret_2_1_base, 204, 9, "Φ.org.eolang.returns-same-object.φ.α1.α0.ρ");
          Phi ret_2_1 = new PhMethod(ret_2_1_base, "ν");
            ret_2_1 = new PhLocated(ret_2_1, 204, 11, "Φ.org.eolang.returns-same-object.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOreturns_same_objectTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="198" loc="Φ.org.eolang.returns-same-object$foo" name="returns-same-object$foo" original-name="foo" parent="returns-same-object" pos="2"> 
//   <o base="returns-same-object$foo$@" cut="307" line="199" loc="Φ.org.eolang.returns-same-object$foo.φ" name="@" pos="4" ref="199"/>
// </o>
@XmirObject(name = "ω1foo", oname = "foo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1foo extends PhDefault {
  public EOω1foo(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2φ(rho);
        ret = new PhLocated(ret, 199, 4, "Φ.org.eolang.returns-same-object$foo.φ");
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="199" loc="Φ.org.eolang.returns-same-object$foo$@" name="returns-same-object$foo$@" original-name="@" parent="returns-same-object$foo" pos="4"> 
//   <o base="org.eolang.memory" line="200" loc="Φ.org.eolang.returns-same-object$foo$@.x" name="x" pos="6"> 
//     <o base="org.eolang.int" data="int" line="200" loc="Φ.org.eolang.returns-same-object$foo$@.x.α0" pos="13">0</o>
//   </o>
// </o>
@XmirObject(name = "ω2@", oname = "@", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2φ extends PhDefault {
  public EOω2φ(final Phi sigma) {
    super(sigma);
    this.add("x", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 200, 6, "Φ.org.eolang.returns-same-object$foo$@.x");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 200, 13, "Φ.org.eolang.returns-same-object$foo$@.x.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }
}
}
}
