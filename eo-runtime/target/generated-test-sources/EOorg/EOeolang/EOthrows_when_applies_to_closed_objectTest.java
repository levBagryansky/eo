
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="75" loc="Φ.org.eolang.throws-when-applies-to-closed-object" name="throws-when-applies-to-closed-object" original-name="throws-when-applies-to-closed-object" pos="0"> 
//   <o base="throws-when-applies-to-closed-object$a" cut="49" line="76" loc="Φ.org.eolang.throws-when-applies-to-closed-object.a" name="a" pos="2" ref="76"/>
//   <o base="a" line="78" loc="Φ.org.eolang.throws-when-applies-to-closed-object.closed" name="closed" pos="2" ref="76"> 
//     <o base="org.eolang.bool" data="bool" line="78" loc="Φ.org.eolang.throws-when-applies-to-closed-object.closed.α0" pos="4">FALSE</o>
//   </o>
//   <o base="closed" line="79" loc="Φ.org.eolang.throws-when-applies-to-closed-object.φ" name="@" pos="2" ref="78"> 
//     <o base="org.eolang.bool" data="bool" line="79" loc="Φ.org.eolang.throws-when-applies-to-closed-object.φ.α0" pos="9">TRUE</o>
//   </o>
// </o>
@XmirObject(name = "throws-when-applies-to-closed-objectTest", oname = "throws-when-applies-to-closed-object", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOthrows_when_applies_to_closed_objectTest extends PhDefault {
    
  public EOthrows_when_applies_to_closed_objectTest() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1a(rho);
        ret = new PhLocated(ret, 76, 2, "Φ.org.eolang.throws-when-applies-to-closed-object.a");
      return ret;
    })));
    this.add("closed", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "a");
        ret = new PhLocated(ret, 78, 2, "Φ.org.eolang.throws-when-applies-to-closed-object.closed");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 78, 4, "Φ.org.eolang.throws-when-applies-to-closed-object.closed.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.FALSE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "closed");
        ret = new PhLocated(ret, 79, 2, "Φ.org.eolang.throws-when-applies-to-closed-object.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 79, 9, "Φ.org.eolang.throws-when-applies-to-closed-object.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.TRUE));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Assertions.assertThrows(Exception.class, () -> {
      Object obj = new Dataized(new EOthrows_when_applies_to_closed_objectTest()).take();
      if (obj instanceof String) {
        Assertions.fail(obj.toString());
      } else {
        Assertions.assertTrue((Boolean) obj);
      }
    });
  }

// <o abstract="" ancestors="1" line="76" loc="Φ.org.eolang.throws-when-applies-to-closed-object$a" name="throws-when-applies-to-closed-object$a" original-name="a" parent="throws-when-applies-to-closed-object" pos="2"> 
//   <o line="76" loc="Φ.org.eolang.throws-when-applies-to-closed-object$a.x" name="x" pos="3"/>
//   <o base="x" line="77" loc="Φ.org.eolang.throws-when-applies-to-closed-object$a.φ" name="@" pos="4" ref="76"/>
// </o>
@XmirObject(name = "ω1a", oname = "a", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1a extends PhDefault {
    
  public EOω1a(final Phi sigma) {
    super(sigma);
    this.add("x", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "x");
        ret = new PhLocated(ret, 77, 4, "Φ.org.eolang.throws-when-applies-to-closed-object$a.φ");
      return ret;
    })));
  }
}
}
