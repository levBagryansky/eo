
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="31" loc="Φ.org.eolang.allocates-and-uses" name="allocates-and-uses" original-name="allocates-and-uses" pos="0"> 
//   <o base="org.eolang.string" data="string" line="32" loc="Φ.org.eolang.allocates-and-uses.txt" name="txt" pos="2">Hello, \u0434\u0440\u0443\u0433!</o>
//   <o base=".as-bytes" line="33" loc="Φ.org.eolang.allocates-and-uses.bytes" name="bytes" pos="5"> 
//     <o base="txt" line="33" loc="Φ.org.eolang.allocates-and-uses.bytes.ρ" pos="2" ref="32"/>
//   </o>
//   <o base="org.eolang.heap" line="34" loc="Φ.org.eolang.allocates-and-uses.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="34" loc="Φ.org.eolang.allocates-and-uses.h.α0" pos="7">1024</o>
//   </o>
//   <o base=".pointer" line="35" loc="Φ.org.eolang.allocates-and-uses.p" name="p" pos="3"> 
//     <o base="h" line="35" loc="Φ.org.eolang.allocates-and-uses.p.ρ" pos="2" ref="34"/>
//     <o base="org.eolang.int" data="int" line="35" loc="Φ.org.eolang.allocates-and-uses.p.α0" pos="12">0</o>
//     <o base="org.eolang.int" data="int" line="35" loc="Φ.org.eolang.allocates-and-uses.p.α1" pos="14">1</o>
//   </o>
//   <o base=".block" line="36" loc="Φ.org.eolang.allocates-and-uses.data" name="data" pos="3"> 
//     <o base="p" line="36" loc="Φ.org.eolang.allocates-and-uses.data.ρ" pos="2" ref="35"/>
//     <o base=".size" line="37" loc="Φ.org.eolang.allocates-and-uses.data.α0" pos="9"> 
//       <o base="bytes" line="37" loc="Φ.org.eolang.allocates-and-uses.data.α0.ρ" pos="4" ref="33"/>
//     </o>
//     <o base="allocates-and-uses$t4$a2" cut="12" line="38" loc="Φ.org.eolang.allocates-and-uses.data.α1" pos="4" ref="38"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="39" loc="Φ.org.eolang.allocates-and-uses.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="40" loc="Φ.org.eolang.allocates-and-uses.φ.α0" pos="4"> 
//       <o base=".write" line="41" loc="Φ.org.eolang.allocates-and-uses.φ.α0.α0" pos="10"> 
//         <o base="data" line="41" loc="Φ.org.eolang.allocates-and-uses.φ.α0.α0.ρ" pos="6" ref="36"/>
//         <o base="bytes" line="41" loc="Φ.org.eolang.allocates-and-uses.φ.α0.α0.α0" pos="17" ref="33"/>
//       </o>
//       <o base="data" line="42" loc="Φ.org.eolang.allocates-and-uses.φ.α0.α1" pos="6" ref="36"/>
//     </o>
//     <o base=".equal-to" line="43" loc="Φ.org.eolang.allocates-and-uses.φ.α1" pos="5"> 
//       <o base="$" line="43" loc="Φ.org.eolang.allocates-and-uses.φ.α1.ρ" pos="4"/>
//       <o base="txt" line="43" loc="Φ.org.eolang.allocates-and-uses.φ.α1.α0" pos="15" ref="32"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "allocates-and-usesTest", oname = "allocates-and-uses", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOallocates_and_usesTest extends PhDefault {
  public EOallocates_and_usesTest() {
    this.add("txt", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EOstring(Phi.Φ);
        ret = new PhLocated(ret, 32, 2, "Φ.org.eolang.allocates-and-uses.txt");
        ret = new PhWith(ret, "Δ", new Data.Value<>("Hello, \u0434\u0440\u0443\u0433!"));
      return ret;
    })));
    this.add("bytes", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "txt");
        ret_base = new PhLocated(ret_base, 33, 2, "Φ.org.eolang.allocates-and-uses.bytes.ρ");
      Phi ret = new PhMethod(ret_base, "as-bytes");
        ret = new PhLocated(ret, 33, 5, "Φ.org.eolang.allocates-and-uses.bytes");
      return ret;
    })));
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("heap").get();
        ret = new PhLocated(ret, 34, 2, "Φ.org.eolang.allocates-and-uses.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 34, 7, "Φ.org.eolang.allocates-and-uses.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1024L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("p", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "h");
        ret_base = new PhLocated(ret_base, 35, 2, "Φ.org.eolang.allocates-and-uses.p.ρ");
      Phi ret = new PhMethod(ret_base, "pointer");
        ret = new PhLocated(ret, 35, 3, "Φ.org.eolang.allocates-and-uses.p");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 35, 12, "Φ.org.eolang.allocates-and-uses.p.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        Phi ret_2 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_2 = new PhLocated(ret_2, 35, 14, "Φ.org.eolang.allocates-and-uses.p.α1");
          ret_2 = new PhWith(ret_2, "Δ", new Data.Value<>(1L));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("data", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "p");
        ret_base = new PhLocated(ret_base, 36, 2, "Φ.org.eolang.allocates-and-uses.data.ρ");
      Phi ret = new PhMethod(ret_base, "block");
        ret = new PhLocated(ret, 36, 3, "Φ.org.eolang.allocates-and-uses.data");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(rho, "bytes");
          ret_1_base = new PhLocated(ret_1_base, 37, 4, "Φ.org.eolang.allocates-and-uses.data.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "size");
          ret_1 = new PhLocated(ret_1, 37, 9, "Φ.org.eolang.allocates-and-uses.data.α0");
        Phi ret_2 = new EOω1t4$EOa2(rho);
          ret_2 = new PhLocated(ret_2, 38, 4, "Φ.org.eolang.allocates-and-uses.data.α1");
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 39, 2, "Φ.org.eolang.allocates-and-uses.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
          ret_1 = new PhLocated(ret_1, 40, 4, "Φ.org.eolang.allocates-and-uses.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base = new PhMethod(rho, "data");
            ret_1_1_base = new PhLocated(ret_1_1_base, 41, 6, "Φ.org.eolang.allocates-and-uses.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "write");
            ret_1_1 = new PhLocated(ret_1_1, 41, 10, "Φ.org.eolang.allocates-and-uses.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1 = new PhMethod(rho, "bytes");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 41, 17, "Φ.org.eolang.allocates-and-uses.φ.α0.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
          Phi ret_1_2 = new PhMethod(rho, "data");
            ret_1_2 = new PhLocated(ret_1_2, 42, 6, "Φ.org.eolang.allocates-and-uses.φ.α0.α1");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 43, 4, "Φ.org.eolang.allocates-and-uses.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 43, 5, "Φ.org.eolang.allocates-and-uses.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new PhMethod(rho, "txt");
            ret_2_1 = new PhLocated(ret_2_1, 43, 15, "Φ.org.eolang.allocates-and-uses.φ.α1.α0");
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOallocates_and_usesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="38" loc="Φ.org.eolang.allocates-and-uses$t4$a2" name="allocates-and-uses$t4$a2" parent="allocates-and-uses" pos="4"> 
//   <o line="38" loc="Φ.org.eolang.allocates-and-uses$t4$a2.b" name="b" pos="5"/>
//   <o base=".as-string" line="38" loc="Φ.org.eolang.allocates-and-uses$t4$a2.φ" name="@" pos="10" scope="scope-d9a67980-71b9-457e-87cf-fc7238178b40"> 
//     <o base="b" line="38" loc="Φ.org.eolang.allocates-and-uses$t4$a2.φ.ρ" pos="9" ref="38" scope="scope-d9a67980-71b9-457e-87cf-fc7238178b40"/>
//   </o>
// </o>
@XmirObject(name = "ω1t4$a2", oname = "ω1t4$a2", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/heap-tests.eo")
public final class EOω1t4$EOa2 extends PhDefault {
  public EOω1t4$EOa2(final Phi sigma) {
    super(sigma);
    this.add("b", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "b");
        ret_base = new PhLocated(ret_base, 38, 9, "Φ.org.eolang.allocates-and-uses$t4$a2.φ.ρ");
      Phi ret = new PhMethod(ret_base, "as-string");
        ret = new PhLocated(ret, 38, 10, "Φ.org.eolang.allocates-and-uses$t4$a2.φ");
      return ret;
    })));
  }
}
}
