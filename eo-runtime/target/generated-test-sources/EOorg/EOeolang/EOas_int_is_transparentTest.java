
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="455" loc="Φ.org.eolang.as-int-is-transparent" name="as-int-is-transparent" original-name="as-int-is-transparent" pos="0"> 
//   <o base=".as-bytes" line="456" loc="Φ.org.eolang.as-int-is-transparent.b" name="b" pos="5"> 
//     <o base="org.eolang.int" data="int" line="456" loc="Φ.org.eolang.as-int-is-transparent.b.ρ" pos="2">489</o>
//   </o>
//   <o base="org.eolang.nop" line="457" loc="Φ.org.eolang.as-int-is-transparent.φ" name="@" pos="2"> 
//     <o base="org.eolang.hamcrest.assert-that" line="458" loc="Φ.org.eolang.as-int-is-transparent.φ.α0" pos="4"> 
//       <o base=".<" line="459" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α0" pos="23"> 
//         <o base=".as-bytes" line="459" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ" pos="14"> 
//           <o base=".as-int" line="459" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ.ρ" pos="7"> 
//             <o base="b" line="459" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ.ρ.ρ" pos="6" ref="456"/>
//           </o>
//         </o>
//       </o>
//       <o base=".is" line="460" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1" pos="7"> 
//         <o base="$" line="460" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1.ρ" pos="6"/>
//         <o base=".equal-to" line="461" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0" pos="9"> 
//           <o base="$" line="461" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.ρ" pos="8"/>
//           <o base=".<" line="462" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.α0" pos="11"> 
//             <o base="b" line="462" loc="Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.α0.ρ" pos="10" ref="456"/>
//           </o>
//         </o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "as-int-is-transparentTest", oname = "as-int-is-transparent", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bytes-tests.eo")
public final class EOas_int_is_transparentTest extends PhDefault {
  public EOas_int_is_transparentTest() {
    this.add("b", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new EOorg.EOeolang.EOint(Phi.Φ);
        ret_base = new PhLocated(ret_base, 456, 2, "Φ.org.eolang.as-int-is-transparent.b.ρ");
        ret_base = new PhWith(ret_base, "Δ", new Data.Value<>(489L));
      Phi ret = new PhMethod(ret_base, "as-bytes");
        ret = new PhLocated(ret, 456, 5, "Φ.org.eolang.as-int-is-transparent.b");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
        ret = new PhLocated(ret, 457, 2, "Φ.org.eolang.as-int-is-transparent.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
          ret_1 = new PhLocated(ret_1, 458, 4, "Φ.org.eolang.as-int-is-transparent.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1_base_base_base = new PhMethod(rho, "b");
            ret_1_1_base_base_base = new PhLocated(ret_1_1_base_base_base, 459, 6, "Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ.ρ.ρ");
          Phi ret_1_1_base_base = new PhMethod(ret_1_1_base_base_base, "as-int");
            ret_1_1_base_base = new PhLocated(ret_1_1_base_base, 459, 7, "Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ.ρ");
          Phi ret_1_1_base = new PhMethod(ret_1_1_base_base, "as-bytes");
            ret_1_1_base = new PhLocated(ret_1_1_base, 459, 14, "Φ.org.eolang.as-int-is-transparent.φ.α0.α0.ρ");
          Phi ret_1_1 = new PhMethod(ret_1_1_base, "ν");
            ret_1_1 = new PhLocated(ret_1_1, 459, 23, "Φ.org.eolang.as-int-is-transparent.φ.α0.α0");
          Phi ret_1_2_base = rho;
            ret_1_2_base = new PhLocated(ret_1_2_base, 460, 6, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1.ρ");
          Phi ret_1_2 = new PhMethod(ret_1_2_base, "is");
            ret_1_2 = new PhLocated(ret_1_2, 460, 7, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1");
          ret_1_2 = new PhCopy(ret_1_2);
            Phi ret_1_2_1_base = rho;
              ret_1_2_1_base = new PhLocated(ret_1_2_1_base, 461, 8, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.ρ");
            Phi ret_1_2_1 = new PhMethod(ret_1_2_1_base, "equal-to");
              ret_1_2_1 = new PhLocated(ret_1_2_1, 461, 9, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0");
            ret_1_2_1 = new PhCopy(ret_1_2_1);
              Phi ret_1_2_1_1_base = new PhMethod(rho, "b");
                ret_1_2_1_1_base = new PhLocated(ret_1_2_1_1_base, 462, 10, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.α0.ρ");
              Phi ret_1_2_1_1 = new PhMethod(ret_1_2_1_1_base, "ν");
                ret_1_2_1_1 = new PhLocated(ret_1_2_1_1, 462, 11, "Φ.org.eolang.as-int-is-transparent.φ.α0.α1.α0.α0");
              ret_1_2_1 = new PhWith(ret_1_2_1, 0, ret_1_2_1_1);
            ret_1_2 = new PhWith(ret_1_2, 0, ret_1_2_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOas_int_is_transparentTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
