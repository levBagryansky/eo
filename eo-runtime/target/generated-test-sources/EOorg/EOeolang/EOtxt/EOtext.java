
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOtxt;

import org.eolang.*;

// <o abstract="" line="32" loc="Φ.org.eolang.txt.text" name="text" original-name="text" pos="0"> 
//   <o line="32" loc="Φ.org.eolang.txt.text.s" name="s" pos="1"/>
//   <o base="s" line="33" loc="Φ.org.eolang.txt.text.φ" name="@" pos="2" ref="32"/>
//   <o base="text$slice" cut="2" line="35" loc="Φ.org.eolang.txt.text.slice" name="slice" pos="2" ref="35"/>
//   <o base="text$trimmed" cut="11" line="39" loc="Φ.org.eolang.txt.text.trimmed" name="trimmed" pos="2" ref="39"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.trimmed.α0" ref="32"/>
//     <o as="slice" base="slice" level="1" loc="Φ.org.eolang.txt.text.trimmed.α1" ref="35"/>
//   </o>
//   <o base="text$joined" cut="58" line="89" loc="Φ.org.eolang.txt.text.joined" name="joined" pos="2" ref="89"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.joined.α0" ref="32"/>
//   </o>
//   <o base="text$contains" cut="93" line="103" loc="Φ.org.eolang.txt.text.contains" name="contains" pos="2" ref="103"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.contains.α0" ref="32"/>
//   </o>
//   <o base="text$ends-with" cut="147" line="134" loc="Φ.org.eolang.txt.text.ends-with" name="ends-with" pos="2" ref="134"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.ends-with.α0" ref="32"/>
//     <o as="index-of" base="index-of" level="1" loc="Φ.org.eolang.txt.text.ends-with.α1" ref="150"/>
//   </o>
//   <o base="text$starts-with" cut="158" line="143" loc="Φ.org.eolang.txt.text.starts-with" name="starts-with" pos="2" ref="143"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.starts-with.α0" ref="32"/>
//     <o as="index-of" base="index-of" level="1" loc="Φ.org.eolang.txt.text.starts-with.α1" ref="150"/>
//   </o>
//   <o base="text$index-of" cut="165" line="150" loc="Φ.org.eolang.txt.text.index-of" name="index-of" pos="2" ref="150"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.index-of.α0" ref="32"/>
//   </o>
//   <o base="text$low-cased" cut="212" line="194" loc="Φ.org.eolang.txt.text.low-cased" name="low-cased" pos="2" ref="194"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.low-cased.α0" ref="32"/>
//     <o as="up-cased" base="up-cased" level="1" loc="Φ.org.eolang.txt.text.low-cased.α1" ref="247"/>
//   </o>
//   <o base="text$last-index-of" cut="254" line="227" loc="Φ.org.eolang.txt.text.last-index-of" name="last-index-of" pos="2" ref="227"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.last-index-of.α0" ref="32"/>
//     <o as="index-of" base="index-of" level="1" loc="Φ.org.eolang.txt.text.last-index-of.α1" ref="150"/>
//   </o>
//   <o base="text$up-cased" cut="276" line="247" loc="Φ.org.eolang.txt.text.up-cased" name="up-cased" pos="2" ref="247"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.up-cased.α0" ref="32"/>
//   </o>
//   <o base="text$at" cut="325" line="292" loc="Φ.org.eolang.txt.text.at" name="at" pos="2" ref="292"/>
//   <o atom="text" base="text$replaced" cut="331" line="295" loc="Φ.org.eolang.txt.text.replaced" name="replaced" pos="2" ref="295"/>
//   <o base="text$as-int" cut="334" line="299" loc="Φ.org.eolang.txt.text.as-int" name="as-int" pos="2" ref="299"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.as-int.α0" ref="32"/>
//   </o>
//   <o base="text$as-float" cut="340" line="307" loc="Φ.org.eolang.txt.text.as-float" name="as-float" pos="2" ref="307"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.as-float.α0" ref="32"/>
//   </o>
//   <o base="text$compare" cut="346" line="315" loc="Φ.org.eolang.txt.text.compare" name="compare" pos="2" ref="315"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.compare.α0" ref="32"/>
//     <o as="is-alphabetic" base="is-alphabetic" level="1" loc="Φ.org.eolang.txt.text.compare.α1" ref="375"/>
//   </o>
//   <o atom="tuple" base="text$split" cut="404" line="372" loc="Φ.org.eolang.txt.text.split" name="split" pos="2" ref="372"/>
//   <o base="text$is-alphabetic" cut="406" line="375" loc="Φ.org.eolang.txt.text.is-alphabetic" name="is-alphabetic" pos="2" ref="375"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.is-alphabetic.α0" ref="32"/>
//   </o>
//   <o base="text$chained" cut="440" line="410" loc="Φ.org.eolang.txt.text.chained" name="chained" pos="2" ref="410"> 
//     <o as="s" base="s" level="1" loc="Φ.org.eolang.txt.text.chained.α0" ref="32"/>
//   </o>
// </o>
@XmirObject(name = "text", oname = "text", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/txt/text.eo")
public final class EOtext extends PhDefault {
  public EOtext(final Phi sigma) {
    super(sigma);
    this.add("s", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new PhMethod(rho, "s");
        ret = new PhLocated(ret, 33, 2, "Φ.org.eolang.txt.text.φ");
      return ret;
    })));
    this.add("slice", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOslice(rho);
        ret = new PhLocated(ret, 35, 2, "Φ.org.eolang.txt.text.slice");
      return ret;
    })));
    this.add("trimmed", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOtrimmed(rho);
        ret = new PhLocated(ret, 39, 2, "Φ.org.eolang.txt.text.trimmed");
      return ret;
    })));
    this.add("joined", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOjoined(rho);
        ret = new PhLocated(ret, 89, 2, "Φ.org.eolang.txt.text.joined");
      return ret;
    })));
    this.add("contains", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOcontains(rho);
        ret = new PhLocated(ret, 103, 2, "Φ.org.eolang.txt.text.contains");
      return ret;
    })));
    this.add("ends-with", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOends_with(rho);
        ret = new PhLocated(ret, 134, 2, "Φ.org.eolang.txt.text.ends-with");
      return ret;
    })));
    this.add("starts-with", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOstarts_with(rho);
        ret = new PhLocated(ret, 143, 2, "Φ.org.eolang.txt.text.starts-with");
      return ret;
    })));
    this.add("index-of", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOindex_of(rho);
        ret = new PhLocated(ret, 150, 2, "Φ.org.eolang.txt.text.index-of");
      return ret;
    })));
    this.add("low-cased", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOlow_cased(rho);
        ret = new PhLocated(ret, 194, 2, "Φ.org.eolang.txt.text.low-cased");
      return ret;
    })));
    this.add("last-index-of", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOlast_index_of(rho);
        ret = new PhLocated(ret, 227, 2, "Φ.org.eolang.txt.text.last-index-of");
      return ret;
    })));
    this.add("up-cased", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOup_cased(rho);
        ret = new PhLocated(ret, 247, 2, "Φ.org.eolang.txt.text.up-cased");
      return ret;
    })));
    this.add("at", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOat(rho);
        ret = new PhLocated(ret, 292, 2, "Φ.org.eolang.txt.text.at");
      return ret;
    })));
    this.add("replaced", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOreplaced(rho);
        ret = new PhLocated(ret, 295, 2, "Φ.org.eolang.txt.text.replaced");
      return ret;
    })));
    this.add("as-int", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOas_int(rho);
        ret = new PhLocated(ret, 299, 2, "Φ.org.eolang.txt.text.as-int");
      return ret;
    })));
    this.add("as-float", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOas_float(rho);
        ret = new PhLocated(ret, 307, 2, "Φ.org.eolang.txt.text.as-float");
      return ret;
    })));
    this.add("compare", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOcompare(rho);
        ret = new PhLocated(ret, 315, 2, "Φ.org.eolang.txt.text.compare");
      return ret;
    })));
    this.add("split", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOsplit(rho);
        ret = new PhLocated(ret, 372, 2, "Φ.org.eolang.txt.text.split");
      return ret;
    })));
    this.add("is-alphabetic", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOis_alphabetic(rho);
        ret = new PhLocated(ret, 375, 2, "Φ.org.eolang.txt.text.is-alphabetic");
      return ret;
    })));
    this.add("chained", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOtext$EOchained(rho);
        ret = new PhLocated(ret, 410, 2, "Φ.org.eolang.txt.text.chained");
      return ret;
    })));
  }
}
