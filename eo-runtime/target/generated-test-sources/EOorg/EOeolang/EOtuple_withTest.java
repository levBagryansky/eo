
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="88" loc="Φ.org.eolang.tuple-with" name="tuple-with" original-name="tuple-with" pos="0"> 
//   <o base="org.eolang.hamcrest.assert-that" line="89" loc="Φ.org.eolang.tuple-with.φ" name="@" pos="2"> 
//     <o base=".with" line="90" loc="Φ.org.eolang.tuple-with.φ.α0" pos="4"> 
//       <o base="org.eolang.tuple" data="tuple" line="91" loc="Φ.org.eolang.tuple-with.φ.α0.ρ" pos="6"> 
//         <o base="org.eolang.int" data="int" line="91" loc="Φ.org.eolang.tuple-with.φ.α0.ρ.α0" pos="8">1</o>
//         <o base="org.eolang.int" data="int" line="91" loc="Φ.org.eolang.tuple-with.φ.α0.ρ.α1" pos="10">2</o>
//         <o base="org.eolang.int" data="int" line="91" loc="Φ.org.eolang.tuple-with.φ.α0.ρ.α2" pos="12">3</o>
//       </o>
//       <o base="org.eolang.string" data="string" line="92" loc="Φ.org.eolang.tuple-with.φ.α0.α0" pos="6">with</o>
//     </o>
//     <o base=".equal-to" line="93" loc="Φ.org.eolang.tuple-with.φ.α1" pos="5"> 
//       <o base="$" line="93" loc="Φ.org.eolang.tuple-with.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.collections.list" line="94" loc="Φ.org.eolang.tuple-with.φ.α1.α0" pos="6"> 
//         <o base="org.eolang.tuple" data="tuple" line="95" loc="Φ.org.eolang.tuple-with.φ.α1.α0.α0" pos="8"> 
//           <o base="org.eolang.int" data="int" line="95" loc="Φ.org.eolang.tuple-with.φ.α1.α0.α0.α0" pos="10">1</o>
//           <o base="org.eolang.int" data="int" line="95" loc="Φ.org.eolang.tuple-with.φ.α1.α0.α0.α1" pos="12">2</o>
//           <o base="org.eolang.int" data="int" line="95" loc="Φ.org.eolang.tuple-with.φ.α1.α0.α0.α2" pos="14">3</o>
//           <o base="org.eolang.string" data="string" line="95" loc="Φ.org.eolang.tuple-with.φ.α1.α0.α0.α3" pos="16">with</o>
//         </o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "tuple-withTest", oname = "tuple-with", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOtuple_withTest extends PhDefault {
  public EOtuple_withTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 89, 2, "Φ.org.eolang.tuple-with.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
          ret_1_base = new PhLocated(ret_1_base, 91, 6, "Φ.org.eolang.tuple-with.φ.α0.ρ");
          Phi[] ret_1_base_a = new Phi[3];
          Phi ret_1_base_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_a0 = new PhLocated(ret_1_base_a0, 91, 8, "Φ.org.eolang.tuple-with.φ.α0.ρ.α0");
            ret_1_base_a0 = new PhWith(ret_1_base_a0, "Δ", new Data.Value<>(1L));
          ret_1_base_a[0] = ret_1_base_a0;
          Phi ret_1_base_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_a1 = new PhLocated(ret_1_base_a1, 91, 10, "Φ.org.eolang.tuple-with.φ.α0.ρ.α1");
            ret_1_base_a1 = new PhWith(ret_1_base_a1, "Δ", new Data.Value<>(2L));
          ret_1_base_a[1] = ret_1_base_a1;
          Phi ret_1_base_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_a2 = new PhLocated(ret_1_base_a2, 91, 12, "Φ.org.eolang.tuple-with.φ.α0.ρ.α2");
            ret_1_base_a2 = new PhWith(ret_1_base_a2, "Δ", new Data.Value<>(3L));
          ret_1_base_a[2] = ret_1_base_a2;
          ret_1_base = new PhWith(new PhCopy(ret_1_base), "Δ", new Data.Value<Phi[]>(ret_1_base_a));
        Phi ret_1 = new PhMethod(ret_1_base, "with");
          ret_1 = new PhLocated(ret_1, 90, 4, "Φ.org.eolang.tuple-with.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 92, 6, "Φ.org.eolang.tuple-with.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>("with"));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 93, 4, "Φ.org.eolang.tuple-with.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 93, 5, "Φ.org.eolang.tuple-with.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("collections").get().attr("list").get();
            ret_2_1 = new PhLocated(ret_2_1, 94, 6, "Φ.org.eolang.tuple-with.φ.α1.α0");
          ret_2_1 = new PhCopy(ret_2_1);
            Phi ret_2_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
              ret_2_1_1 = new PhLocated(ret_2_1_1, 95, 8, "Φ.org.eolang.tuple-with.φ.α1.α0.α0");
              Phi[] ret_2_1_1_a = new Phi[4];
              Phi ret_2_1_1_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
                ret_2_1_1_a0 = new PhLocated(ret_2_1_1_a0, 95, 10, "Φ.org.eolang.tuple-with.φ.α1.α0.α0.α0");
                ret_2_1_1_a0 = new PhWith(ret_2_1_1_a0, "Δ", new Data.Value<>(1L));
              ret_2_1_1_a[0] = ret_2_1_1_a0;
              Phi ret_2_1_1_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
                ret_2_1_1_a1 = new PhLocated(ret_2_1_1_a1, 95, 12, "Φ.org.eolang.tuple-with.φ.α1.α0.α0.α1");
                ret_2_1_1_a1 = new PhWith(ret_2_1_1_a1, "Δ", new Data.Value<>(2L));
              ret_2_1_1_a[1] = ret_2_1_1_a1;
              Phi ret_2_1_1_a2 = new EOorg.EOeolang.EOint(Phi.Φ);
                ret_2_1_1_a2 = new PhLocated(ret_2_1_1_a2, 95, 14, "Φ.org.eolang.tuple-with.φ.α1.α0.α0.α2");
                ret_2_1_1_a2 = new PhWith(ret_2_1_1_a2, "Δ", new Data.Value<>(3L));
              ret_2_1_1_a[2] = ret_2_1_1_a2;
              Phi ret_2_1_1_a3 = new EOorg.EOeolang.EOstring(Phi.Φ);
                ret_2_1_1_a3 = new PhLocated(ret_2_1_1_a3, 95, 16, "Φ.org.eolang.tuple-with.φ.α1.α0.α0.α3");
                ret_2_1_1_a3 = new PhWith(ret_2_1_1_a3, "Δ", new Data.Value<>("with"));
              ret_2_1_1_a[3] = ret_2_1_1_a3;
              ret_2_1_1 = new PhWith(new PhCopy(ret_2_1_1), "Δ", new Data.Value<Phi[]>(ret_2_1_1_a));
            ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtuple_withTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
