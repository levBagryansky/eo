
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="66" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2" name="tuple-as-a-bound-attribute-size-2" original-name="tuple-as-a-bound-attribute-size-2" pos="0"> 
//   <o base="org.eolang.tuple" const="" data="tuple" line="67" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr" name="arr" pos="2"> 
//     <o base="org.eolang.int" data="int" line="68" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr.α0" pos="4">1</o>
//     <o base="org.eolang.int" data="int" line="69" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr.α1" pos="4">2</o>
//   </o>
//   <o base=".and" line="70" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ" name="@" pos="2"> 
//     <o base=".eq" line="71" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ" pos="4"> 
//       <o base=".at" line="72" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ" pos="9"> 
//         <o base="arr" line="72" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ.ρ" pos="6" ref="67"/>
//         <o base="org.eolang.int" data="int" line="72" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ.α0" pos="13">0</o>
//       </o>
//       <o base="org.eolang.int" data="int" line="73" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.α0" pos="6">1</o>
//     </o>
//     <o base=".eq" line="74" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0" pos="4"> 
//       <o base=".at" line="75" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ" pos="9"> 
//         <o base="arr" line="75" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ.ρ" pos="6" ref="67"/>
//         <o base="org.eolang.int" data="int" line="75" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ.α0" pos="13">1</o>
//       </o>
//       <o base="org.eolang.int" data="int" line="76" loc="Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.α0" pos="6">2</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "tuple-as-a-bound-attribute-size-2Test", oname = "tuple-as-a-bound-attribute-size-2", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/tuple-tests.eo")
public final class EOtuple_as_a_bound_attribute_size_2Test extends PhDefault {
    
  public EOtuple_as_a_bound_attribute_size_2Test() {
    this.add("arr", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
        ret = new PhLocated(ret, 67, 2, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr");
        Phi[] ret_a = new Phi[2];
        Phi ret_a0 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a0 = new PhLocated(ret_a0, 68, 4, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr.α0");
          ret_a0 = new PhWith(ret_a0, "Δ", new Data.Value<>(1L));
        ret_a[0] = ret_a0;
        Phi ret_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_a1 = new PhLocated(ret_a1, 69, 4, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.arr.α1");
          ret_a1 = new PhWith(ret_a1, "Δ", new Data.Value<>(2L));
        ret_a[1] = ret_a1;
        ret = new PhWith(new PhCopy(ret), "Δ", new Data.Value<Phi[]>(ret_a));
      ret = new PhConst(ret);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new PhMethod(rho, "arr");
        ret_base_base_base = new PhLocated(ret_base_base_base, 72, 6, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "at");
        ret_base_base = new PhLocated(ret_base_base, 72, 9, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ");
      ret_base_base = new PhCopy(ret_base_base);
        Phi ret_base_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_base_1 = new PhLocated(ret_base_base_1, 72, 13, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.ρ.α0");
          ret_base_base_1 = new PhWith(ret_base_base_1, "Δ", new Data.Value<>(0L));
        ret_base_base = new PhWith(ret_base_base, 0, ret_base_base_1);
      Phi ret_base = new PhMethod(ret_base_base, "eq");
        ret_base = new PhLocated(ret_base, 71, 4, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_base_1 = new PhLocated(ret_base_1, 73, 6, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.ρ.α0");
          ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(1L));
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "and");
        ret = new PhLocated(ret, 70, 2, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "arr");
          ret_1_base_base = new PhLocated(ret_1_base_base, 75, 6, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "at");
          ret_1_base = new PhLocated(ret_1_base, 75, 9, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_base_1 = new PhLocated(ret_1_base_1, 75, 13, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.ρ.α0");
            ret_1_base_1 = new PhWith(ret_1_base_1, "Δ", new Data.Value<>(1L));
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "eq");
          ret_1 = new PhLocated(ret_1, 74, 4, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_1_1 = new PhLocated(ret_1_1, 76, 6, "Φ.org.eolang.tuple-as-a-bound-attribute-size-2.φ.α0.α0");
            ret_1_1 = new PhWith(ret_1_1, "Δ", new Data.Value<>(2L));
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtuple_as_a_bound_attribute_size_2Test()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
