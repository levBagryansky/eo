
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="267" loc="Φ.org.eolang.written-in-several-lines" name="written-in-several-lines" original-name="written-in-several-lines" pos="0"> 
//   <o base=".eq" line="268" loc="Φ.org.eolang.written-in-several-lines.φ" name="@" pos="2"> 
//     <o base=".size" line="269" loc="Φ.org.eolang.written-in-several-lines.φ.ρ" pos="4"> 
//       <o base="org.eolang.bytes" data="bytes" line="270" loc="Φ.org.eolang.written-in-several-lines.φ.ρ.ρ" pos="6">CA FE BE BE</o>
//     </o>
//     <o base="org.eolang.int" data="int" line="272" loc="Φ.org.eolang.written-in-several-lines.φ.α0" pos="4">4</o>
//   </o>
// </o>
@XmirObject(name = "written-in-several-linesTest", oname = "written-in-several-lines", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/bytes-tests.eo")
public final class EOwritten_in_several_linesTest extends PhDefault {
    
  public EOwritten_in_several_linesTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new EOorg.EOeolang.EObytes(Phi.Φ);
        ret_base_base = new PhLocated(ret_base_base, 270, 6, "Φ.org.eolang.written-in-several-lines.φ.ρ.ρ");
        ret_base_base = new PhWith(ret_base_base, "Δ", new Data.Value<>(new byte[] {(byte) 0xCA, (byte) 0xFE, (byte) 0xBE, (byte) 0xBE}));
      Phi ret_base = new PhMethod(ret_base_base, "size");
        ret_base = new PhLocated(ret_base, 269, 4, "Φ.org.eolang.written-in-several-lines.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 268, 2, "Φ.org.eolang.written-in-several-lines.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 272, 4, "Φ.org.eolang.written-in-several-lines.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(4L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOwritten_in_several_linesTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
