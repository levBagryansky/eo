
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOhamcrest;

import org.eolang.*;

// <o abstract="" ancestors="1" line="54" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert" name="assert-twice-that$assert" original-name="assert" parent="assert-twice-that" pos="2"> 
//   <o line="54" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.cond" name="cond" pos="3"/>
//   <o line="54" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.m" name="m" pos="8"/>
//   <o line="54" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.a" name="a" pos="10"/>
//   <o base=".if" line="55" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ" name="@" pos="4"> 
//     <o base=".match" line="56" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ" pos="7"> 
//       <o base="m" line="56" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ.ρ" pos="6" ref="54"/>
//       <o base="a" line="56" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ.α0" pos="14" ref="54"/>
//     </o>
//     <o base="org.eolang.bool" data="bool" line="57" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α0" pos="6">TRUE</o>
//     <o base=".if" line="58" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1" pos="6"> 
//       <o base="cond" line="59" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.ρ" pos="8" ref="54"/>
//       <o base="assert-twice-that$assert" line="60" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0" pos="8" ref="54"> 
//         <o base="org.eolang.bool" data="bool" line="60" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α0" pos="15">FALSE</o>
//         <o base="m" line="60" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α1" pos="21" ref="54"/>
//         <o base="a" line="60" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α2" pos="23" ref="54"/>
//       </o>
//       <o base="org.eolang.bool" data="bool" line="61" loc="Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α1" pos="8">FALSE</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "assert-twice-that$assert", oname = "assert", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/hamcrest/assert-twice-that.eo")
public final class EOassert_twice_that$EOassert extends PhDefault {
  public EOassert_twice_that$EOassert(final Phi sigma) {
    super(sigma);
    this.add("cond", new AtFree(/* default */));
    this.add("m", new AtFree(/* default */));
    this.add("a", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base = new PhMethod(rho, "m");
        ret_base_base = new PhLocated(ret_base_base, 56, 6, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "match");
        ret_base = new PhLocated(ret_base, 56, 7, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1 = new PhMethod(rho, "a");
          ret_base_1 = new PhLocated(ret_base_1, 56, 14, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.ρ.α0");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
      Phi ret = new PhMethod(ret_base, "if");
        ret = new PhLocated(ret, 55, 4, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EObool(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 57, 6, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(Boolean.TRUE));
        Phi ret_2_base = new PhMethod(rho, "cond");
          ret_2_base = new PhLocated(ret_2_base, 59, 8, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "if");
          ret_2 = new PhLocated(ret_2, 58, 6, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOassert_twice_that$EOassert(rho);
            ret_2_1 = new PhLocated(ret_2_1, 60, 8, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0");
          ret_2_1 = new PhCopy(ret_2_1);
            Phi ret_2_1_1 = new EOorg.EOeolang.EObool(Phi.Φ);
              ret_2_1_1 = new PhLocated(ret_2_1_1, 60, 15, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α0");
              ret_2_1_1 = new PhWith(ret_2_1_1, "Δ", new Data.Value<>(Boolean.FALSE));
            Phi ret_2_1_2 = new PhMethod(rho, "m");
              ret_2_1_2 = new PhLocated(ret_2_1_2, 60, 21, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α1");
            Phi ret_2_1_3 = new PhMethod(rho, "a");
              ret_2_1_3 = new PhLocated(ret_2_1_3, 60, 23, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α0.α2");
            ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
            ret_2_1 = new PhWith(ret_2_1, 1, ret_2_1_2);
            ret_2_1 = new PhWith(ret_2_1, 2, ret_2_1_3);
          Phi ret_2_2 = new EOorg.EOeolang.EObool(Phi.Φ);
            ret_2_2 = new PhLocated(ret_2_2, 61, 8, "Φ.org.eolang.hamcrest.assert-twice-that$assert.φ.α1.α1");
            ret_2_2 = new PhWith(ret_2_2, "Δ", new Data.Value<>(Boolean.FALSE));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
          ret_2 = new PhWith(ret_2, 1, ret_2_2);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }
}
