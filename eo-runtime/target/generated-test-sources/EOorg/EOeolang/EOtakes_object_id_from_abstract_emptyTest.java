
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="293" loc="Φ.org.eolang.takes-object-id-from-abstract-empty" name="takes-object-id-from-abstract-empty" original-name="takes-object-id-from-abstract-empty" pos="0"> 
//   <o base="takes-object-id-from-abstract-empty$foo" cut="445" line="294" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.foo" name="foo" pos="2" ref="294"/>
//   <o base=".eq" line="296" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ" name="@" pos="2"> 
//     <o base=".<" line="297" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ" pos="9"> 
//       <o base=".y" line="297" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ.ρ" pos="7"> 
//         <o base="foo" line="297" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ.ρ.ρ" pos="4" ref="294"/>
//       </o>
//     </o>
//     <o base=".<" line="298" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0" pos="9"> 
//       <o base=".y" line="298" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0.ρ" pos="7"> 
//         <o base="foo" line="298" loc="Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0.ρ.ρ" pos="4" ref="294"/>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "takes-object-id-from-abstract-emptyTest", oname = "takes-object-id-from-abstract-empty", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOtakes_object_id_from_abstract_emptyTest extends PhDefault {
    
  public EOtakes_object_id_from_abstract_emptyTest() {
    this.add("foo", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1foo(rho);
        ret = new PhLocated(ret, 294, 2, "Φ.org.eolang.takes-object-id-from-abstract-empty.foo");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = new PhMethod(rho, "foo");
        ret_base_base_base = new PhLocated(ret_base_base_base, 297, 4, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "y");
        ret_base_base = new PhLocated(ret_base_base, 297, 7, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "ν");
        ret_base = new PhLocated(ret_base, 297, 9, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 296, 2, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "foo");
          ret_1_base_base = new PhLocated(ret_1_base_base, 298, 4, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "y");
          ret_1_base = new PhLocated(ret_1_base, 298, 7, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "ν");
          ret_1 = new PhLocated(ret_1, 298, 9, "Φ.org.eolang.takes-object-id-from-abstract-empty.φ.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOtakes_object_id_from_abstract_emptyTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="294" loc="Φ.org.eolang.takes-object-id-from-abstract-empty$foo" name="takes-object-id-from-abstract-empty$foo" original-name="foo" parent="takes-object-id-from-abstract-empty" pos="2"> 
//   <o base="takes-object-id-from-abstract-empty$foo$y" cut="445" line="295" loc="Φ.org.eolang.takes-object-id-from-abstract-empty$foo.y" name="y" pos="4" ref="295"/>
// </o>
@XmirObject(name = "ω1foo", oname = "foo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1foo extends PhDefault {
    
  public EOω1foo(final Phi sigma) {
    super(sigma);
    this.add("y", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2y(rho);
        ret = new PhLocated(ret, 295, 4, "Φ.org.eolang.takes-object-id-from-abstract-empty$foo.y");
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="295" loc="Φ.org.eolang.takes-object-id-from-abstract-empty$foo$y" name="takes-object-id-from-abstract-empty$foo$y" original-name="y" parent="takes-object-id-from-abstract-empty$foo" pos="4"/>
@XmirObject(name = "ω2y", oname = "y", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2y extends PhDefault {
    
  public EOω2y(final Phi sigma) {
    super(sigma);
  }
}
}
}
