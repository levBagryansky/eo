
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="187" loc="Φ.org.eolang.rust-dataize-not-fails" name="rust-dataize-not-fails" original-name="rust-dataize-not-fails" pos="0"> 
//   <o base="org.eolang.int" data="int" line="188" loc="Φ.org.eolang.rust-dataize-not-fails.a" name="a" pos="2">1</o>
//   <o base=".rust" line="189" loc="Φ.org.eolang.rust-dataize-not-fails.dataized" name="dataized" pos="4"> 
//     <o base=".eolang" line="189" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.ρ" pos="2"> 
//       <o base=".org" line="189" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.ρ.ρ" pos="2"> 
//         <o base="Q" line="189" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.ρ.ρ.ρ" pos="2"/>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="190" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.α0" pos="4">use eo_env::EOEnv;\nuse eo_env::eo_enum::EO;\nuse eo_env::eo_enum::EO::{EOInt};\npub fn foo(env: &mut EOEnv) -> EO {\n  let v = env.find(\"^.a\") as u32;\n  let _bytes = env.dataize(v).unwrap();\n  EOInt(v as i64)\n}</o>
//     <o base="org.eolang.tuple" data="tuple" line="200" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.α1" pos="4"> 
//       <o base="rust-dataize-not-fails$t1$t2$a0" cut="121" line="201" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.α1.α0" pos="6" ref="201"/>
//       <o base="org.eolang.int" data="int" line="202" loc="Φ.org.eolang.rust-dataize-not-fails.dataized.α1.α1" pos="6">3</o>
//     </o>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="203" loc="Φ.org.eolang.rust-dataize-not-fails.φ" name="@" pos="2"> 
//     <o base="dataized" line="204" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α0" pos="4" ref="189"/>
//     <o base=".not" line="205" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α1" pos="5"> 
//       <o base="$" line="205" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α1.ρ" pos="4"/>
//       <o base=".less-than" line="206" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0" pos="7"> 
//         <o base="$" line="206" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0.ρ" pos="6"/>
//         <o base="org.eolang.int" data="int" line="207" loc="Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0.α0" pos="8">0</o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "rust-dataize-not-failsTest", oname = "rust-dataize-not-fails", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOrust_dataize_not_failsTest extends PhDefault {
  public EOrust_dataize_not_failsTest() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EOint(Phi.Φ);
        ret = new PhLocated(ret, 188, 2, "Φ.org.eolang.rust-dataize-not-fails.a");
        ret = new PhWith(ret, "Δ", new Data.Value<>(1L));
      return ret;
    })));
    this.add("dataized", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = Phi.Φ;
        ret_base_base_base = new PhLocated(ret_base_base_base, 189, 2, "Φ.org.eolang.rust-dataize-not-fails.dataized.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "org");
        ret_base_base = new PhLocated(ret_base_base, 189, 2, "Φ.org.eolang.rust-dataize-not-fails.dataized.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "eolang");
        ret_base = new PhLocated(ret_base, 189, 2, "Φ.org.eolang.rust-dataize-not-fails.dataized.ρ");
      Phi ret = new PhMethod(ret_base, "rust");
        ret = new PhLocated(ret, 189, 4, "Φ.org.eolang.rust-dataize-not-fails.dataized");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 190, 4, "Φ.org.eolang.rust-dataize-not-fails.dataized.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("use eo_env::EOEnv;\nuse eo_env::eo_enum::EO;\nuse eo_env::eo_enum::EO::{EOInt};\npub fn foo(env: &mut EOEnv) -> EO {\n  let v = env.find(\"^.a\") as u32;\n  let _bytes = env.dataize(v).unwrap();\n  EOInt(v as i64)\n}"));
        Phi ret_2 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
          ret_2 = new PhLocated(ret_2, 200, 4, "Φ.org.eolang.rust-dataize-not-fails.dataized.α1");
          Phi[] ret_2_a = new Phi[2];
          Phi ret_2_a0 = new EOω1t1$EOt2$EOa0(rho);
            ret_2_a0 = new PhLocated(ret_2_a0, 201, 6, "Φ.org.eolang.rust-dataize-not-fails.dataized.α1.α0");
          ret_2_a[0] = ret_2_a0;
          Phi ret_2_a1 = new EOorg.EOeolang.EOint(Phi.Φ);
            ret_2_a1 = new PhLocated(ret_2_a1, 202, 6, "Φ.org.eolang.rust-dataize-not-fails.dataized.α1.α1");
            ret_2_a1 = new PhWith(ret_2_a1, "Δ", new Data.Value<>(3L));
          ret_2_a[1] = ret_2_a1;
          ret_2 = new PhWith(new PhCopy(ret_2), "Δ", new Data.Value<Phi[]>(ret_2_a));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 203, 2, "Φ.org.eolang.rust-dataize-not-fails.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "dataized");
          ret_1 = new PhLocated(ret_1, 204, 4, "Φ.org.eolang.rust-dataize-not-fails.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 205, 4, "Φ.org.eolang.rust-dataize-not-fails.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "not");
          ret_2 = new PhLocated(ret_2, 205, 5, "Φ.org.eolang.rust-dataize-not-fails.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1_base = rho;
            ret_2_1_base = new PhLocated(ret_2_1_base, 206, 6, "Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0.ρ");
          Phi ret_2_1 = new PhMethod(ret_2_1_base, "less-than");
            ret_2_1 = new PhLocated(ret_2_1, 206, 7, "Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0");
          ret_2_1 = new PhCopy(ret_2_1);
            Phi ret_2_1_1 = new EOorg.EOeolang.EOint(Phi.Φ);
              ret_2_1_1 = new PhLocated(ret_2_1_1, 207, 8, "Φ.org.eolang.rust-dataize-not-fails.φ.α1.α0.α0");
              ret_2_1_1 = new PhWith(ret_2_1_1, "Δ", new Data.Value<>(0L));
            ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOrust_dataize_not_failsTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="201" loc="Φ.org.eolang.rust-dataize-not-fails$t1$t2$a0" name="rust-dataize-not-fails$t1$t2$a0" parent="rust-dataize-not-fails" pos="6"/>
@XmirObject(name = "ω1t1$t2$a0", oname = "ω1t1$t2$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOω1t1$EOt2$EOa0 extends PhDefault {
  public EOω1t1$EOt2$EOa0(final Phi sigma) {
    super(sigma);
  }
}
}
