
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="238" loc="Φ.org.eolang.calling-caged-function" name="calling-caged-function" original-name="calling-caged-function" pos="0"> 
//   <o base="org.eolang.cage" line="239" loc="Φ.org.eolang.calling-caged-function.h" name="h" pos="2"> 
//     <o base="org.eolang.int" data="int" line="239" loc="Φ.org.eolang.calling-caged-function.h.α0" pos="7">0</o>
//   </o>
//   <o base="calling-caged-function$func" cut="368" line="240" loc="Φ.org.eolang.calling-caged-function.func" name="func" pos="2" ref="240"/>
//   <o base="org.eolang.nop" line="242" loc="Φ.org.eolang.calling-caged-function.φ" name="@" pos="2"> 
//     <o base="org.eolang.hamcrest.assert-that" line="243" loc="Φ.org.eolang.calling-caged-function.φ.α0" pos="4"> 
//       <o base="org.eolang.seq" line="244" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0" pos="6"> 
//         <o base=".write" line="245" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α0" pos="9"> 
//           <o base="h" line="245" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α0.ρ" pos="8" ref="239"/>
//           <o base="func" line="245" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α0.α0" pos="16" ref="240"/>
//         </o>
//         <o base=".@" line="246" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α1" pos="9"> 
//           <o base="h" line="246" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α1.ρ" pos="8" ref="239"/>
//           <o base="org.eolang.string" data="string" line="246" loc="Φ.org.eolang.calling-caged-function.φ.α0.α0.α1.α0" pos="12">Jeff</o>
//         </o>
//       </o>
//       <o base=".equal-to" line="247" loc="Φ.org.eolang.calling-caged-function.φ.α0.α1" pos="7"> 
//         <o base="$" line="247" loc="Φ.org.eolang.calling-caged-function.φ.α0.α1.ρ" pos="6"/>
//         <o base="org.eolang.string" data="string" line="247" loc="Φ.org.eolang.calling-caged-function.φ.α0.α1.α0" pos="17">Hello, Jeff!</o>
//       </o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "calling-caged-functionTest", oname = "calling-caged-function", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOcalling_caged_functionTest extends PhDefault {
  public EOcalling_caged_functionTest() {
    this.add("h", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("cage").get();
        ret = new PhLocated(ret, 239, 2, "Φ.org.eolang.calling-caged-function.h");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 239, 7, "Φ.org.eolang.calling-caged-function.h.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("func", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1func(rho);
        ret = new PhLocated(ret, 240, 2, "Φ.org.eolang.calling-caged-function.func");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("nop").get();
        ret = new PhLocated(ret, 242, 2, "Φ.org.eolang.calling-caged-function.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
          ret_1 = new PhLocated(ret_1, 243, 4, "Φ.org.eolang.calling-caged-function.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
            ret_1_1 = new PhLocated(ret_1_1, 244, 6, "Φ.org.eolang.calling-caged-function.φ.α0.α0");
          ret_1_1 = new PhCopy(ret_1_1);
            Phi ret_1_1_1_base = new PhMethod(rho, "h");
              ret_1_1_1_base = new PhLocated(ret_1_1_1_base, 245, 8, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α0.ρ");
            Phi ret_1_1_1 = new PhMethod(ret_1_1_1_base, "write");
              ret_1_1_1 = new PhLocated(ret_1_1_1, 245, 9, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α0");
            ret_1_1_1 = new PhCopy(ret_1_1_1);
              Phi ret_1_1_1_1 = new PhMethod(rho, "func");
                ret_1_1_1_1 = new PhLocated(ret_1_1_1_1, 245, 16, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α0.α0");
              ret_1_1_1 = new PhWith(ret_1_1_1, 0, ret_1_1_1_1);
            Phi ret_1_1_2_base = new PhMethod(rho, "h");
              ret_1_1_2_base = new PhLocated(ret_1_1_2_base, 246, 8, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α1.ρ");
            Phi ret_1_1_2 = new PhMethod(ret_1_1_2_base, "φ");
              ret_1_1_2 = new PhLocated(ret_1_1_2, 246, 9, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α1");
            ret_1_1_2 = new PhCopy(ret_1_1_2);
              Phi ret_1_1_2_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
                ret_1_1_2_1 = new PhLocated(ret_1_1_2_1, 246, 12, "Φ.org.eolang.calling-caged-function.φ.α0.α0.α1.α0");
                ret_1_1_2_1 = new PhWith(ret_1_1_2_1, "Δ", new Data.Value<>("Jeff"));
              ret_1_1_2 = new PhWith(ret_1_1_2, 0, ret_1_1_2_1);
            ret_1_1 = new PhWith(ret_1_1, 0, ret_1_1_1);
            ret_1_1 = new PhWith(ret_1_1, 1, ret_1_1_2);
          Phi ret_1_2_base = rho;
            ret_1_2_base = new PhLocated(ret_1_2_base, 247, 6, "Φ.org.eolang.calling-caged-function.φ.α0.α1.ρ");
          Phi ret_1_2 = new PhMethod(ret_1_2_base, "equal-to");
            ret_1_2 = new PhLocated(ret_1_2, 247, 7, "Φ.org.eolang.calling-caged-function.φ.α0.α1");
          ret_1_2 = new PhCopy(ret_1_2);
            Phi ret_1_2_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
              ret_1_2_1 = new PhLocated(ret_1_2_1, 247, 17, "Φ.org.eolang.calling-caged-function.φ.α0.α1.α0");
              ret_1_2_1 = new PhWith(ret_1_2_1, "Δ", new Data.Value<>("Hello, Jeff!"));
            ret_1_2 = new PhWith(ret_1_2, 0, ret_1_2_1);
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
          ret_1 = new PhWith(ret_1, 1, ret_1_2);
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOcalling_caged_functionTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="240" loc="Φ.org.eolang.calling-caged-function$func" name="calling-caged-function$func" original-name="func" parent="calling-caged-function" pos="2"> 
//   <o line="240" loc="Φ.org.eolang.calling-caged-function$func.x" name="x" pos="3"/>
//   <o base="org.eolang.txt.sprintf" line="241" loc="Φ.org.eolang.calling-caged-function$func.φ" name="@" pos="4"> 
//     <o base="org.eolang.string" data="string" line="241" loc="Φ.org.eolang.calling-caged-function$func.φ.α0" pos="12">Hello, %s!</o>
//     <o base="x" line="241" loc="Φ.org.eolang.calling-caged-function$func.φ.α1" pos="25" ref="240"/>
//   </o>
// </o>
@XmirObject(name = "ω1func", oname = "func", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1func extends PhDefault {
  public EOω1func(final Phi sigma) {
    super(sigma);
    this.add("x", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("txt").get().attr("sprintf").get();
        ret = new PhLocated(ret, 241, 4, "Φ.org.eolang.calling-caged-function$func.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 241, 12, "Φ.org.eolang.calling-caged-function$func.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("Hello, %s!"));
        Phi ret_2 = new PhMethod(rho, "x");
          ret_2 = new PhLocated(ret_2, 241, 25, "Φ.org.eolang.calling-caged-function$func.φ.α1");
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }
}
}
