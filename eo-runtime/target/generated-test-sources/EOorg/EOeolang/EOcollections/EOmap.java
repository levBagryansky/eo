
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang.EOcollections;

import org.eolang.*;

// <o abstract="" line="31" loc="Φ.org.eolang.collections.map" name="map" original-name="map" pos="0"> 
//   <o line="31" loc="Φ.org.eolang.collections.map.m" name="m" pos="1"/>
//   <o base="org.eolang.memory" line="32" loc="Φ.org.eolang.collections.map.elements-amount" name="elements-amount" pos="2"> 
//     <o base="org.eolang.int" data="int" line="32" loc="Φ.org.eolang.collections.map.elements-amount.α0" pos="9">0</o>
//   </o>
//   <o base="map$keys" cut="3" line="34" loc="Φ.org.eolang.collections.map.keys" name="keys" pos="2" ref="34"> 
//     <o as="m" base="m" level="1" loc="Φ.org.eolang.collections.map.keys.α0" ref="31"/>
//   </o>
//   <o base="map$contains-key" cut="16" line="43" loc="Φ.org.eolang.collections.map.contains-key" name="contains-key" pos="2" ref="43"/>
//   <o base="map$size" cut="30" line="56" loc="Φ.org.eolang.collections.map.size" name="size" pos="2" ref="56"> 
//     <o as="elements-amount" base="elements-amount" level="1" loc="Φ.org.eolang.collections.map.size.α0" ref="32"/>
//   </o>
//   <o base="map$with" cut="32" line="60" loc="Φ.org.eolang.collections.map.with" name="with" pos="2" ref="60"> 
//     <o as="m" base="m" level="1" loc="Φ.org.eolang.collections.map.with.α0" ref="31"/>
//   </o>
//   <o base="map$found" cut="66" line="75" loc="Φ.org.eolang.collections.map.found" name="found" pos="2" ref="75"> 
//     <o as="m" base="m" level="1" loc="Φ.org.eolang.collections.map.found.α0" ref="31"/>
//   </o>
//   <o base="map$without" cut="92" line="87" loc="Φ.org.eolang.collections.map.without" name="without" pos="2" ref="87"> 
//     <o as="m" base="m" level="1" loc="Φ.org.eolang.collections.map.without.α0" ref="31"/>
//   </o>
// </o>
@XmirObject(name = "map", oname = "map", source = "/home/tardis3/eo/eo-runtime/target/eo-test/3-pull/org/eolang/collections/map.eo")
public final class EOmap extends PhDefault {
  public EOmap(final Phi sigma) {
    super(sigma);
    this.add("m", new AtFree(/* default */));
    this.add("elements-amount", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 32, 2, "Φ.org.eolang.collections.map.elements-amount");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 32, 9, "Φ.org.eolang.collections.map.elements-amount.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("keys", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOkeys(rho);
        ret = new PhLocated(ret, 34, 2, "Φ.org.eolang.collections.map.keys");
      return ret;
    })));
    this.add("contains-key", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOcontains_key(rho);
        ret = new PhLocated(ret, 43, 2, "Φ.org.eolang.collections.map.contains-key");
      return ret;
    })));
    this.add("size", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOsize(rho);
        ret = new PhLocated(ret, 56, 2, "Φ.org.eolang.collections.map.size");
      return ret;
    })));
    this.add("with", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOwith(rho);
        ret = new PhLocated(ret, 60, 2, "Φ.org.eolang.collections.map.with");
      return ret;
    })));
    this.add("found", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOfound(rho);
        ret = new PhLocated(ret, 75, 2, "Φ.org.eolang.collections.map.found");
      return ret;
    })));
    this.add("without", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOmap$EOwithout(rho);
        ret = new PhLocated(ret, 87, 2, "Φ.org.eolang.collections.map.without");
      return ret;
    })));
  }
}
