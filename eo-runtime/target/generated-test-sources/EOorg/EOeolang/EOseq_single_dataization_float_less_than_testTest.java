
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT e24f541 2023-09-12T11:41:32) on 2023-10-03T10:45:38.539230Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="29" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test" name="seq-single-dataization-float-less-than-test" original-name="seq-single-dataization-float-less-than-test" pos="0"> 
//   <o base="org.eolang.memory" line="30" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.counter" name="counter" pos="2"> 
//     <o base="org.eolang.float" data="float" line="30" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.counter.α0" pos="9">0.0</o>
//   </o>
//   <o base=".lt" line="31" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ" name="@" pos="2"> 
//     <o base="org.eolang.seq" line="32" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ" pos="4"> 
//       <o base=".write" line="33" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0" pos="13"> 
//         <o base="counter" line="33" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.ρ" pos="6" ref="30"/>
//         <o base=".plus" line="34" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0" pos="24"> 
//           <o base=".as-float" line="34" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.ρ" pos="15"> 
//             <o base="counter" line="34" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.ρ.ρ" pos="8" ref="30"/>
//           </o>
//           <o base="org.eolang.float" data="float" line="34" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.α0" pos="30">1.0</o>
//         </o>
//       </o>
//       <o base=".as-float" line="35" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α1" pos="13"> 
//         <o base="counter" line="35" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α1.ρ" pos="6" ref="30"/>
//       </o>
//     </o>
//     <o base="org.eolang.float" data="float" line="36" loc="Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.α0" pos="4">2.0</o>
//   </o>
// </o>
@XmirObject(name = "seq-single-dataization-float-less-than-testTest", oname = "seq-single-dataization-float-less-than-test", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/seq-tests.eo")
public final class EOseq_single_dataization_float_less_than_testTest extends PhDefault {
    
  public EOseq_single_dataization_float_less_than_testTest() {
    this.add("counter", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 30, 2, "Φ.org.eolang.seq-single-dataization-float-less-than-test.counter");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 30, 9, "Φ.org.eolang.seq-single-dataization-float-less-than-test.counter.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret_base = new PhLocated(ret_base, 32, 4, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ");
      ret_base = new PhCopy(ret_base);
        Phi ret_base_1_base = new PhMethod(rho, "counter");
          ret_base_1_base = new PhLocated(ret_base_1_base, 33, 6, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.ρ");
        Phi ret_base_1 = new PhMethod(ret_base_1_base, "write");
          ret_base_1 = new PhLocated(ret_base_1, 33, 13, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0");
        ret_base_1 = new PhCopy(ret_base_1);
          Phi ret_base_1_1_base_base = new PhMethod(rho, "counter");
            ret_base_1_1_base_base = new PhLocated(ret_base_1_1_base_base, 34, 8, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.ρ.ρ");
          Phi ret_base_1_1_base = new PhMethod(ret_base_1_1_base_base, "as-float");
            ret_base_1_1_base = new PhLocated(ret_base_1_1_base, 34, 15, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.ρ");
          Phi ret_base_1_1 = new PhMethod(ret_base_1_1_base, "plus");
            ret_base_1_1 = new PhLocated(ret_base_1_1, 34, 24, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0");
          ret_base_1_1 = new PhCopy(ret_base_1_1);
            Phi ret_base_1_1_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
              ret_base_1_1_1 = new PhLocated(ret_base_1_1_1, 34, 30, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α0.α0.α0");
              ret_base_1_1_1 = new PhWith(ret_base_1_1_1, "Δ", new Data.Value<>(1.0d));
            ret_base_1_1 = new PhWith(ret_base_1_1, 0, ret_base_1_1_1);
          ret_base_1 = new PhWith(ret_base_1, 0, ret_base_1_1);
        Phi ret_base_2_base = new PhMethod(rho, "counter");
          ret_base_2_base = new PhLocated(ret_base_2_base, 35, 6, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α1.ρ");
        Phi ret_base_2 = new PhMethod(ret_base_2_base, "as-float");
          ret_base_2 = new PhLocated(ret_base_2, 35, 13, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.ρ.α1");
        ret_base = new PhWith(ret_base, 0, ret_base_1);
        ret_base = new PhWith(ret_base, 1, ret_base_2);
      Phi ret = new PhMethod(ret_base, "lt");
        ret = new PhLocated(ret, 31, 2, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 36, 4, "Φ.org.eolang.seq-single-dataization-float-less-than-test.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(2.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOseq_single_dataization_float_less_than_testTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }
}
