
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-18T14:42:30.920527Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="403" loc="Φ.org.eolang.moves-copy-to-new-parent" name="moves-copy-to-new-parent" original-name="moves-copy-to-new-parent" pos="0"> 
//   <o base="org.eolang.hamcrest.assert-that" line="404" loc="Φ.org.eolang.moves-copy-to-new-parent.φ" name="@" pos="2"> 
//     <o base="app" cut="22" line="405" loc="Φ.org.eolang.moves-copy-to-new-parent.φ.α0" ref="405"/>
//     <o base=".equal-to" line="418" loc="Φ.org.eolang.moves-copy-to-new-parent.φ.α1" pos="5"> 
//       <o base="$" line="418" loc="Φ.org.eolang.moves-copy-to-new-parent.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.string" data="string" line="419" loc="Φ.org.eolang.moves-copy-to-new-parent.φ.α1.α0" pos="6">[Hello, Jeff]</o>
//     </o>
//   </o>
//   <o base="moves-copy-to-new-parent$app" cut="637" line="405" loc="Φ.org.eolang.moves-copy-to-new-parent.app" name="app" pos="4" ref="405"/>
// </o>
@XmirObject(name = "moves-copy-to-new-parentTest", oname = "moves-copy-to-new-parent", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOmoves_copy_to_new_parentTest extends PhDefault {
  public EOmoves_copy_to_new_parentTest() {
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 404, 2, "Φ.org.eolang.moves-copy-to-new-parent.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "app");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 418, 4, "Φ.org.eolang.moves-copy-to-new-parent.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 418, 5, "Φ.org.eolang.moves-copy-to-new-parent.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 419, 6, "Φ.org.eolang.moves-copy-to-new-parent.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>("[Hello, Jeff]"));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("app", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1app(rho);
        ret = new PhLocated(ret, 405, 4, "Φ.org.eolang.moves-copy-to-new-parent.app");
      return ret;
    })));
  }

  @Test
  public void works() throws java.lang.Exception {
    Object obj = new Dataized(new EOmoves_copy_to_new_parentTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

// <o abstract="" ancestors="1" line="405" loc="Φ.org.eolang.moves-copy-to-new-parent$app" name="moves-copy-to-new-parent$app" original-name="app" parent="moves-copy-to-new-parent" pos="4"> 
//   <o base="moves-copy-to-new-parent$app$@" cut="637" line="406" loc="Φ.org.eolang.moves-copy-to-new-parent$app.φ" name="@" pos="6" ref="406"> 
//     <o as="foo" base="foo" level="1" loc="Φ.org.eolang.moves-copy-to-new-parent$app.φ.α0" ref="413"/>
//   </o>
//   <o base="moves-copy-to-new-parent$app$foo" cut="648" line="413" loc="Φ.org.eolang.moves-copy-to-new-parent$app.foo" name="foo" pos="6" ref="413"/>
// </o>
@XmirObject(name = "ω1app", oname = "app", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω1app extends PhDefault {
  public EOω1app(final Phi sigma) {
    super(sigma);
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2φ(rho);
        ret = new PhLocated(ret, 406, 6, "Φ.org.eolang.moves-copy-to-new-parent$app.φ");
      return ret;
    })));
    this.add("foo", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω2foo(rho);
        ret = new PhLocated(ret, 413, 6, "Φ.org.eolang.moves-copy-to-new-parent$app.foo");
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="406" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@" name="moves-copy-to-new-parent$app$@" original-name="@" parent="moves-copy-to-new-parent$app" pos="6"> 
//   <o base="org.eolang.string" data="string" line="407" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.x" name="x" pos="8">Jeff</o>
//   <o base=".sprintf" line="408" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ" name="@" pos="14"> 
//     <o base=".txt" line="408" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ" pos="10"> 
//       <o base=".eolang" line="408" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ" pos="8"> 
//         <o base=".org" line="408" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ.ρ" pos="8"> 
//           <o base="Q" line="408" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ.ρ.ρ" pos="8"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="409" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α0" pos="10">[%s]</o>
//     <o base="foo" line="410" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1" pos="10" ref="406.413.462"> 
//       <o as="^" base="$" line="411" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1.α0" pos="12"/>
//       <o as="h" base="org.eolang.string" data="string" line="412" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1.α1" pos="12">Hello</o>
//     </o>
//   </o>
//   <o level="1" line="406.413.462" loc="Φ.org.eolang.moves-copy-to-new-parent$app$@.foo" name="foo"/>
// </o>
@XmirObject(name = "ω2@", oname = "@", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2φ extends PhDefault {
  public EOω2φ(final Phi sigma) {
    super(sigma);
    this.add("x", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOorg.EOeolang.EOstring(Phi.Φ);
        ret = new PhLocated(ret, 407, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$@.x");
        ret = new PhWith(ret, "Δ", new Data.Value<>("Jeff"));
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 408, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 408, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 408, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "txt");
        ret_base = new PhLocated(ret_base, 408, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.ρ");
      Phi ret = new PhMethod(ret_base, "sprintf");
        ret = new PhLocated(ret, 408, 14, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 409, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("[%s]"));
        Phi ret_2 = new PhMethod(new PhMethod(rho, "σ"), "foo");
          ret_2 = new PhLocated(ret_2, 410, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = rho;
            ret_2_1 = new PhLocated(ret_2_1, 411, 12, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1.α0");
          Phi ret_2_2 = new EOorg.EOeolang.EOstring(Phi.Φ);
            ret_2_2 = new PhLocated(ret_2_2, 412, 12, "Φ.org.eolang.moves-copy-to-new-parent$app$@.φ.α1.α1");
            ret_2_2 = new PhWith(ret_2_2, "Δ", new Data.Value<>("Hello"));
          ret_2 = new PhWith(ret_2, "ρ", ret_2_1);
          ret_2 = new PhWith(ret_2, "h", ret_2_2);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }
}

// <o abstract="" ancestors="2" line="413" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo" name="moves-copy-to-new-parent$app$foo" original-name="foo" parent="moves-copy-to-new-parent$app" pos="6"> 
//   <o line="413" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.h" name="h" pos="7"/>
//   <o base=".sprintf" line="414" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ" name="@" pos="14"> 
//     <o base=".txt" line="414" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ" pos="10"> 
//       <o base=".eolang" line="414" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ" pos="8"> 
//         <o base=".org" line="414" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ.ρ" pos="8"> 
//           <o base="Q" line="414" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ.ρ.ρ" pos="8"/>
//         </o>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="415" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α0" pos="10">%s, %s</o>
//     <o base="h" line="416" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α1" pos="10" ref="413"/>
//     <o base=".x" line="417" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α2" pos="11"> 
//       <o base="^" line="417" loc="Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α2.ρ" pos="10"/>
//     </o>
//   </o>
// </o>
@XmirObject(name = "ω2foo", oname = "foo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/runtime-tests.eo")
public final class EOω2foo extends PhDefault {
  public EOω2foo(final Phi sigma) {
    super(sigma);
    this.add("h", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base_base = Phi.Φ;
        ret_base_base_base_base = new PhLocated(ret_base_base_base_base, 414, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ.ρ.ρ");
      Phi ret_base_base_base = new PhMethod(ret_base_base_base_base, "org");
        ret_base_base_base = new PhLocated(ret_base_base_base, 414, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "eolang");
        ret_base_base = new PhLocated(ret_base_base, 414, 8, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "txt");
        ret_base = new PhLocated(ret_base, 414, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.ρ");
      Phi ret = new PhMethod(ret_base, "sprintf");
        ret = new PhLocated(ret, 414, 14, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOorg.EOeolang.EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 415, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("%s, %s"));
        Phi ret_2 = new PhMethod(rho, "h");
          ret_2 = new PhLocated(ret_2, 416, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α1");
        Phi ret_3_base = new PhMethod(rho, "ρ");
          ret_3_base = new PhLocated(ret_3_base, 417, 10, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α2.ρ");
        Phi ret_3 = new PhMethod(ret_3_base, "x");
          ret_3 = new PhLocated(ret_3, 417, 11, "Φ.org.eolang.moves-copy-to-new-parent$app$foo.φ.α2");
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
        ret = new PhWith(ret, 2, ret_3);
      return ret;
    })));
  }
}
}
}
