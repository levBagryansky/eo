# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

[] > rust-returns-positive-int
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(_env: &mut EOEnv) -> EO {
      println!("Hello world from rust");
      EOInt(2)
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      2

[] > rust-returns-negative-int
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(_env: &mut EOEnv) -> EO {
      println!("Hello world from rust");
      EOInt(-10)
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      -10

[] > rust-returns-positive-doable
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOFloat};

    pub fn foo(_env: &mut EOEnv) -> EO {
      EOFloat(1.23456789)
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      1.23456789

[] > rust-returns-negative-doable
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOFloat};

    pub fn foo(_env: &mut EOEnv) -> EO {
      EOFloat(-1.23456789)
    }
    """
    *
      []
  assert-that > @
    r
    $.equal-to
      -1.23456789

[] > rust-find-returns-int
  123 > a
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};

    pub fn foo(env: &mut EOEnv) -> EO {
      EOInt(env.find("^.a").into())
    }
    """
    *
      []
  assert-that > @
    r
    $.not
      $.less-than
        0

[] > rust-put-not-fails
  QQ.rust > r
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> EO {
      env.put(3, &[0x00, 0x1a, 0xEE, 0xf, 0xf3]).unwrap();
      EOInt(0 as i64)
    }
    """
    *
      []
  assert-that > @
    r
    $.not
      $.less-than
        0

[] > rust-bind-not-fails
  1 > a
  2 > b
  QQ.rust > insert
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> EO {
        let v1 = env.find("^.a") as u32;
        let v2 = env.find("^.b") as u32;
        env.bind(v1 , v2, "EO-att");
        return EOInt(v1 as i64);
    }
    """
    *
      []
  assert-that > @
    insert
    $.not
      $.less-than
        0

[] > rust-copy-not-fails
  1 > a
  QQ.rust > copy
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> EO {
        let v = env.find("^.a") as u32;
        let copy = env.copy(v).unwrap();
        EOInt(copy as i64)
    }
    """
    *
      []
  assert-that > @
    copy
    $.not
      $.less-than
        0

[] > rust-dataize-not-fails
  1 > a
  QQ.rust > dataized
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    pub fn foo(env: &mut EOEnv) -> EO {
      let v = env.find("^.a") as u32;
      let _bytes = env.dataize(v).unwrap();
      EOInt(v as i64)
    }
    """
    *
      []
      3
  assert-that > @
    dataized
    $.not
      $.less-than
        0

[] > rust-plus
  5 > a
  10 > b
  QQ.rust > plus
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOInt};
    use byteorder::{BigEndian, ReadBytesExt};

    pub fn foo(env: &mut EOEnv) -> EO {
      let a = env.find("^.a") as u32;
      let b = env.find("^.b") as u32;
      let bytes_a = env.dataize(a).unwrap();
      let mut arr_a = unsafe { &*(&bytes_a[0..] as *const _  as *const [u8]) };

      let bytes_b = env.dataize(b).unwrap();
      let mut arr_b = unsafe { &*(&bytes_b[0..] as *const _  as *const [u8]) };

      let a = arr_a.read_i64::<BigEndian>().unwrap();
      let b = arr_b.read_i64::<BigEndian>().unwrap();

      EOInt(a + b)
    }
    """
    *
      []
      "byteorder:1.4.3"
  assert-that > @
    plus
    $.equal-to 15

[] > measures-eo-plus
  5 > a
  10 > b
  a.plus b > plus
  assert-that > @
    plus
    $.equal-to 15

[] > measures-rust-sqrt
  4.0 > a
  QQ.rust > sqrt
    """
    use eo_env::EOEnv;
    use eo_env::eo_enum::EO;
    use eo_env::eo_enum::EO::{EOFloat};
    use byteorder::{BigEndian, ReadBytesExt};

    pub fn foo(env: &mut EOEnv) -> EO {
      let v = env.find("^.a") as u32;
      let bytes_a = env.dataize(v).unwrap();
      let mut arr_a = unsafe { &*(&bytes_a[0..] as *const _  as *const [u8]) };
      let a = arr_a.read_f64::<BigEndian>().unwrap();

      EOFloat(a.sqrt())
    }
    """
    *
      []
      "byteorder:1.4.3"
  eq. > @
    sqrt
    2.0

[] > measures-eo-sqrt
  4.0 > a
  [] > babylonian-method
    memory 1.0 > x-new
    memory 0.0 > x-old
    memory 1.0 > diff
    memory 0 > counter
    seq > @
      while.
        gt.
          diff
          1.0e-15
        [i]
          seq > @
            x-old.write
              x-new
            x-new.write
              times.
                0.5
                plus.
                  div.
                    a
                    x-old
                  x-old
            diff.write
              abs.
                QQ.math.number
                  x-new.minus x-old
      x-new
  eq. > @
    babylonian-method
    2.0