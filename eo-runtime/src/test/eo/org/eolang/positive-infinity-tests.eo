# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+junit
+version 0.0.0

[] > positive-infinity-eq-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      pos-inf.eq pos-inf
      (pos-inf.eq negative-infinity).eq FALSE
      (pos-inf.eq nan).eq FALSE
      (pos-inf.eq 42).eq FALSE
      (pos-inf.eq 42.5).eq FALSE
    $.equal-to TRUE

[] > positive-infinity-neq-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      (pos-inf.neq pos-inf).eq FALSE
      pos-inf.neq negative-infinity
      pos-inf.neq nan
      pos-inf.neq 42
      pos-inf.neq 42.5
    $.equal-to TRUE

[] > positive-infinity-lt-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      (pos-inf.lt pos-inf).eq FALSE
      (pos-inf.lt negative-infinity).eq FALSE
      (pos-inf.lt nan).eq FALSE
      (pos-inf.lt 42).eq FALSE
      (pos-inf.lt 42.5).eq FALSE
    $.equal-to TRUE

[] > positive-infinity-lte-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      pos-inf.lte pos-inf
      (pos-inf.lte negative-infinity).eq FALSE
      (pos-inf.lte nan).eq FALSE
      (pos-inf.lte 42).eq FALSE
      (pos-inf.lte 42.5).eq FALSE
    $.equal-to TRUE

[] > positive-infinity-gt-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      (pos-inf.gt pos-inf).eq FALSE
      pos-inf.gt negative-infinity
      (pos-inf.gt nan).eq FALSE
      pos-inf.gt 42
      pos-inf.gt 42.5
    $.equal-to TRUE

[] > positive-infinity-gte-is-valid
  positive-infinity > pos-inf!
  assert-that > @
    and.
      pos-inf.gte pos-inf
      pos-inf.gte negative-infinity
      (pos-inf.gte nan).eq FALSE
      pos-inf.gte 42
      pos-inf.gte 42.5
    $.equal-to TRUE

[] > positive-infinity-times-is-valid
  positive-infinity > pos-inf!
  negative-infinity > neg-inf!
  nan.as-bytes > nan-as-bytes!
  assert-that > @
    and.
      (pos-inf.times 0.0).as-bytes.eq nan-as-bytes
      (pos-inf.times 0).as-bytes.eq nan-as-bytes
      (pos-inf.times nan).as-bytes.eq nan-as-bytes
      (pos-inf.times neg-inf).eq neg-inf
      (pos-inf.times pos-inf).eq pos-inf
      (pos-inf.times 42).eq pos-inf
      (pos-inf.times -42).eq pos-inf
      (pos-inf.times 42.5).eq pos-inf
      (pos-inf.times -42.5).eq pos-inf
    $.equal-to TRUE

[] > positive-infinity-plus-is-valid
  positive-infinity > pos-inf!
  negative-infinity > neg-inf!
  nan.as-bytes > nan-as-bytes!
  assert-that > @
    and.
      (pos-inf.plus neg-inf).as-bytes.eq nan-as-bytes
      (pos-inf.plus nan).as-bytes.eq nan-as-bytes
      (pos-inf.plus 0.0).eq pos-inf
      (pos-inf.plus positive-infinity).eq pos-inf
      (pos-inf.plus 42).eq pos-inf
      (pos-inf.plus 42.5).eq pos-inf
    $.equal-to TRUE

[] > positive-infinity-neg-is-negative-infinity
  assert-that > @
    positive-infinity.neg
    $.equal-to negative-infinity

[] > positive-infinity-signum-float-one
  assert-that > @
    positive-infinity.signum
    $.equal-to 1.0

[] > positive-infinity-minus-is-valid
  positive-infinity > pos-inf!
  nan.as-bytes > nan-as-bytes!
  assert-that > @
    and.
      (pos-inf.minus pos-inf).as-bytes.eq nan-as-bytes
      (pos-inf.minus nan).as-bytes.eq nan-as-bytes
      (pos-inf.minus 0.0).eq pos-inf
      (pos-inf.minus negative-infinity).eq pos-inf
      (pos-inf.minus 42).eq pos-inf
      (pos-inf.minus 42.5).eq pos-inf
    $.equal-to TRUE

[] > positive-infinity-div-is-valid
  positive-infinity > pos-inf!
  nan.as-bytes > nan-as-bytes!
  assert-that > @
    and.
      (pos-inf.div nan).as-bytes.eq nan-as-bytes
      (pos-inf.div negative-infinity).as-bytes.eq nan-as-bytes
      (pos-inf.div pos-inf).as-bytes.eq nan-as-bytes
      (pos-inf.div 0.0).eq pos-inf
      (pos-inf.div 42).eq pos-inf
      (pos-inf.div -42).eq pos-inf
      (pos-inf.div 42.5).eq pos-inf
      (pos-inf.div -42.5).eq pos-inf
    $.equal-to TRUE

[] > positive-infinity-is-equal-to-one-div-zero
  assert-that > @
    positive-infinity
    $.equal-to (1.0.div 0.0)

[] > positive-infinity-as-bytes-is-valid
  assert-that > @
    positive-infinity.as-bytes
    $.equal-to (1.0.div 0.0).as-bytes

[] > cannot-convert-positive-infinity-to-int
  assert-that > @
    try
      []
        positive-infinity.as-int > @
      [e]
        e > @
      nop
    $.equal-to "You can not convert positive infinity to int"

[] > positive-infinity-as-string-is-valid
  assert-that > @
    positive-infinity.as-string
    $.equal-to "+âˆž"
