# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

# Test.
[] > writes-into-memory
  memory.alloc 0 > x
  eq. > @
    seq
      *
        x.write 10
        x
    10

# Test.
[] > double-writes
  memory.alloc "1234567890123" > m
  eq. > @
    seq
      *
        m.write "Hello, world!"
        m.write 42
        m
    42

# Test.
[] > rewrites-and-increments-itself
  memory.alloc 0 > m
  eq. > @
    seq
      *
        m.write 1
        m.write (m.as-int.plus 5)
        m
    6

# Test.
[] > memory-in-outer-scope
  # Outer scope object.
  [] > a
    memory.alloc 0 > x
  seq > @
    *
      a.x.write 1
      not.
        eq.
          a.x.as-int
          1

# Test.
[] > writes-into-two-memory-objects
  memory.alloc 0 > a
  memory.alloc 0 > b
  and. > @
    seq
      *
        a.write 10
        b.write 20
        b.eq 20
    a.eq 10

# Test.
[] > writes-into-two-memory-objects-and-check-first
  memory.alloc 0 > a
  memory.alloc 0 > b
  eq. > @
    seq
      *
        a.write 10
        b.write 20
        a
    10

# Test.
[] > memory-is-strictly-typed-bool-error-overflow
  memory.alloc FALSE > m
  try > @
    []
      m.write 86124867.88 > @
    [e]
      QQ.io.stdout e > @
    nop

# Test.
[] > memory-is-strictly-typed-string-error-overflow
  memory.alloc "Hello" > m
  try > @
    []
      m.write "Much longer string!" > @
    [e]
      QQ.io.stdout e > @
    nop

# Test.
[] > memory-is-strictly-typed-int
  memory.alloc 12248 > m
  eq. > @
    try
      []
        m.write 2556 > @
      [e]
        e > @
      nop
    2556

# Test.
[] > memory-is-strictly-typed-float
  memory.alloc 245.88 > m
  eq. > @
    try
      []
        m.write 82.22 > @
      [e]
        e > @
      nop
    82.22

# Test.
[] > memory-is-strictly-typed-string
  memory.alloc "Hello" > m
  eq. > @
    try
      []
        m.write "Hell" > @
      [e]
        e > @
      nop
    "Hell"

# Test.
[] > memory-is-strictly-typed-bool
  memory.alloc FALSE > m
  try > @
    []
      m.write TRUE > @
    [e]
      e > @
    nop
