# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+junit
+version 0.0.0

[] > nan-eq-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.eq 42).eq FALSE
      (not-a-number.eq not-a-number).eq FALSE
    $.equal-to TRUE

[] > nan-neq-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.neq 42).eq TRUE
      (not-a-number.neq not-a-number).eq TRUE
    $.equal-to TRUE

[] > nan-lt-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.lt 42).eq FALSE
      (not-a-number.lt not-a-number).eq FALSE
    $.equal-to TRUE

[] > nan-lte-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.lte 42).eq FALSE
      (not-a-number.lte not-a-number).eq FALSE
    $.equal-to TRUE

[] > nan-gt-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.gt 42).eq FALSE
      (not-a-number.gt not-a-number).eq FALSE
    $.equal-to TRUE

[] > nan-gte-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.gte 42).eq FALSE
      (not-a-number.gte not-a-number).eq FALSE
    $.equal-to TRUE

[] > nan-times-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.times 42).as-bytes.eq (not-a-number.as-bytes)
      (not-a-number.times not-a-number).as-bytes.eq (not-a-number.as-bytes)
    $.equal-to TRUE

[] > nan-div-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.div 42).as-bytes.eq (not-a-number.as-bytes)
      (not-a-number.div not-a-number).as-bytes.eq (not-a-number.as-bytes)
    $.equal-to TRUE

[] > nan-plus-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.plus 42).as-bytes.eq (not-a-number.as-bytes)
      (not-a-number.plus not-a-number).as-bytes.eq (not-a-number.as-bytes)
    $.equal-to TRUE

[] > nan-neg-is-nan
  nan > not-a-number!
  assert-that > @
    not-a-number.neg.as-bytes
    $.equal-to not-a-number.as-bytes

[] > nan-minus-is-valid
  nan > not-a-number!
  assert-that > @
    and.
      (not-a-number.minus 42).as-bytes.eq (not-a-number.as-bytes)
      (not-a-number.minus not-a-number).as-bytes.eq (not-a-number.as-bytes)
    $.equal-to TRUE

[] > nan-signum-is-valid
  nan > not-a-number!
  assert-that > @
    not-a-number.signum.as-bytes
    $.equal-to
      not-a-number.as-bytes

[] > nan-as-bytes-is-valid
  assert-that > @
    nan.as-bytes
    $.equal-to (0.0.div 0.0).as-bytes

[] > nan-as-int-is-valid
  assert-that > @
    try
      []
        nan.as-int > @
      [e]
        e > @
      nop
    $.equal-to "You can't convert NaN to int"

[] > nan-as-string-is-valid
  assert-that > @
    nan.as-string
    $.equal-to "NaN"
