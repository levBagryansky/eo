# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+alias org.eolang.txt.regex
+home https://github.com/objectionary/eo
+package org.eolang.txt
+junit
+version 0.0.0

[] > false_equals
  assert-that > @
    matches.
      compile.
        regex "/([A-Z]{2})/"
      "Hello, World!"
    $.is
      $.equal-to FALSE

[] > compare_trivial
  assert-that > @
    TRUE
    $.equal-to TRUE

[] > regex_with_options
  QQ.io.stdout > @
    QQ.txt.sprintf
      "HEY, Regex_with_options = %s\n"
      r.
        compile.
          regex "/([a-z]+)/id"

[] > regex_txt
  QQ.io.stdout > @
    QQ.txt.sprintf
      "HEY, Regex_txt = %s\n"
      regex_txt.
        match.
          compile.
            regex "/([a-z]+[a]*)/i"
          "hello"

[] > nfa_by_sym_check
  assert-that > @
    max_state.
      nfa_by_sym.
        match.
          compile.
            regex "/([a-z]+[a]*)/i"
          "hello"
        "b"
    $.equal-to 1

[] > nfa_by_sym_check1
  QQ.io.stdout > @
    QQ.txt.sprintf "Hey, max_state = %d\n"
      max_state.
        nfa_by_sym.
          match.
            compile.
              regex "/([a-z]+[a]*)/i"
            "hello"
          "b"
