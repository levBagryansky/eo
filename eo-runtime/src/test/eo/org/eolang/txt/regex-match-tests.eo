# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.txt.regex
+home https://github.com/objectionary/eo
+package org.eolang.txt
+junit
+version 0.0.0

[] > r_match_regex_with_options
  assert-that > @
    r.
      compile.
        regex "/([a-z]+)/id"
    $.equal-to "(?id)([a-z]+)"

[] > r_match_regex_txt
  assert-that > @
    regex_txt.
      match.
        compile.
          regex "/([a-z]+[a]*)/i"
        "hello"
    $.equal-to "[a-z]+[a]*"

[] > r_match_nfa_by_sym_check
  assert-that > @
    max_state.
      nfa_by_sym.
        match.
          compile.
            regex "/([a-z]+[a]*)/i"
          "hello"
        "b"
    $.equal-to 1

[] > r_match_list_by_len_elem
  assert-that > @
    (regex.match.list_by_len_elem 7 6).length
    $.equal-to 7

[] > r_match_increase_transition
  regex.match.transition > tr0!
    "b"
    memory 0
    memory 1
  seq > @
    tr0.increase_by 5
    QQ.io.stdout
      QQ.txt.sprintf
        "Hello, src0 = %d, dest0 = %d\n"
        tr0.src
        tr0.dest

[] > r_match_increase_states_by-1
  regex.match.nfa_by_sym "b" > my_nfa!
  assert-that > @
    max_state.
      my_nfa.increased_states_by
        5
    $.equal-to 6

[] > r_match_increase_states_by-2
  regex.match.nfa_by_sym "b" > my_nfa!
  assert-that > @
    s0.
      my_nfa.increased_states_by
        5
    $.equal-to 5

[] > r_match_increase_states_by-3
  regex.match.nfa_by_sym "b" > my_nfa!
  assert-that > @
    at.
      transitions.
        my_nfa.increased_states_by
          5
      0
    $.equal-to
      regex.match.transition "b" 5 6

[] > r_match_new-transitions-check
  regex.match.nfa_by_sym "b" > my-nfa1!
  regex.match.nfa_by_sym "a" > my-nfa2!
  regex.match.nfa-by-and > new-nfa!
    my-nfa1
    my-nfa2
  assert-that > @
    at.
      new-transitions.
        new-nfa
      0
    $.equal-to
      regex.match.transition "b" 0 1
