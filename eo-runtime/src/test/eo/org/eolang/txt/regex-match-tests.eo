# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+alias org.eolang.txt.regex
+home https://github.com/objectionary/eo
+package org.eolang.txt
+junit
+version 0.0.0

[] > r-match-regex-with-options
  assert-that > @
    r.
      compile.
        regex "/([a-z]+)/id"
    $.equal-to "(?id)([a-z]+)"

[] > r-match-regex-txt
  assert-that > @
    regex-txt.
      match.
        compile.
          regex "/([a-z]+[a]*)/i"
        "hello"
    $.equal-to "[a-z]+[a]*"

[] > r-match-nfa-by-sym-check
  assert-that > @
    max-state.
      nfa-by-sym.
        match.
          compile.
            regex "/([a-z]+[a]*)/i"
          "hello"
        "b"
    $.equal-to 1

[] > r-match-list-by-len-elem
  assert-that > @
    (regex.match.list-by-len-elem 7 6).length
    $.equal-to 7

[] > r-match-increase-transition
  regex.match.transition > tr0!
    "b"
    memory 0
    memory 1
  seq > @
    tr0.increase-by 5
    QQ.io.stdout
      QQ.txt.sprintf
        "Hello, src0 = %d, dest0 = %d\n"
        tr0.src
        tr0.dest

[] > r-match-increase-states-by-1
  regex.match.nfa-by-sym "b" > my-nfa!
  assert-that > @
    max-state.
      my-nfa.increased-states-by
        5
    $.equal-to 6

[] > r-match-increase-states-by-2
  regex.match.nfa-by-sym "b" > my-nfa!
  assert-that > @
    s0.
      my-nfa.increased-states-by
        5
    $.equal-to 5

[] > r-match-increase-states-by-3
  regex.match.nfa-by-sym "b" > my-nfa!
  assert-that > @
    at.
      transitions.
        my-nfa.increased-states-by
          5
      0
    $.equal-to
      regex.match.transition "b" 5 6

[] > r-match-new-transitions-check
  regex.match.nfa-by-sym "b" > my-nfa1!
  regex.match.nfa-by-sym "a" > my-nfa2!
  regex.match.nfa-by-and > new-nfa!
    my-nfa1
    my-nfa2
  new-nfa.new-transitions > nt!
  assert-that > @
    TRUE
    $.all-of
      $.equal-to
        eq.
          at.
            nt
            0
          regex.match.transition
            "a"
            2
            3
      $.equal-to
        eq.
          at.
            nt
            1
          regex.match.transition
            "b"
            0
            1
      $.equal-to
        eq.
          at.
            nt
            2
          regex.match.transition
            ""
            1
            2

[] > r-match-eq-sets
  list > tr-s1!
    *
      regex.match.transition "a" 0 1
      regex.match.transition "b" 5 6
  list > tr-s2!
    *
      regex.match.transition "b" 5 6
      regex.match.transition "a" 0 1
  assert-that > @
    TRUE
    $.equal-to
      eq-sets.
        regex.match.nfa.eq
        tr-s1
        tr-s2

[] > r-match-eq-nfa-1
  regex.match.nfa > nfa1
    list
      *
        regex.match.transition "a" 1 3
        regex.match.transition "b" 2 2
        regex.match.transition "c" 3 1
    list
      * 9 7 5
    5
    3

  regex.match.nfa > nfa2
    list
      *
        regex.match.transition "c" 3 1
        regex.match.transition "a" 1 3
        regex.match.transition "b" 2 2
    list
      * 7 9 5
    5
    3
  assert-that > @
    TRUE
    $.equal-to
      eq.
        nfa1
        nfa2

[] > r-match-eq-nfa-2
  regex.match.nfa-by-sym "a" > nfa1
  regex.match.nfa-by-sym "b" > nfa2
  assert-that > @
    TRUE
    $.equal-to
      eq.
        regex.match.nfa
          list
            *
              regex.match.transition "a" 0 1
              regex.match.transition "a" 2 3
              regex.match.transition "" 1 2
          list
            *
              3
          0
          3
        regex.match.nfa
          list
            *
              regex.match.transition "a" 0 1
              regex.match.transition "a" 2 3
              regex.match.transition "" 1 2
          list
            *
              3
          0
          3

[] > r-match-nfa-by-and-1
  regex.match.nfa-by-sym "a" > nfa1
  regex.match.nfa-by-sym "b" > nfa2
  assert-that > @
    FALSE
    $.equal-to
      eq.
        regex.match.nfa-by-and
          nfa1
          nfa2
        regex.match.nfa
          list
            *
              regex.match.transition "a" 0 1
              regex.match.transition "a" 2 3
              regex.match.transition "" 1 2
          list
            *
              3
          0
          3

[] > r-match-nfa-by-and-2
  regex.match.nfa-by-sym "a" > nfa1!
  regex.match.nfa-by-sym "b" > nfa2!
  assert-that > @
    TRUE
    $.all-of
      $.equal-to
        regex.match.nfa.eq.eq-sets
          transitions.
            regex.match.nfa-by-and
              nfa1
              nfa2
          list
            *
              regex.match.transition "a" 0 1
              regex.match.transition "b" 2 3
              regex.match.transition "" 1 2
      $.equal-to
        regex.match.nfa.eq.eq-sets
          final-states.
            regex.match.nfa-by-and
              nfa1
              nfa2
          list
            *
              3
      $.equal-to
        eq.
          s0.
            regex.match.nfa-by-and
              nfa1
              nfa2
          0
      $.equal-to
        eq.
          max-state.
            regex.match.nfa-by-and
              nfa1
              nfa2
          3

[] > r-match-nfa-by-and-3
  regex.match.nfa-by-sym "a" > nfa1!
  regex.match.nfa-by-sym "b" > nfa2!
  assert-that > @
    TRUE
    $.equal-to
      eq.
        regex.match.nfa-by-and
          nfa1
          nfa2
        regex.match.nfa
          list
            *
              regex.match.transition "a" 0 1
              regex.match.transition "b" 2 3
              regex.match.transition "" 1 2
          list
            *
              3
          0
          3

[] > print-s0
  regex.match.nfa-by-sym "a" > nfa1!
  regex.match.nfa-by-sym "b" > nfa2!
  QQ.io.stdout > @
    QQ.txt.sprintf
      "s0 = %d\n"
      s0.
        regex.match.nfa-by-and
          nfa1
          nfa2
