# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+junit
+version 0.0.0

[] > negative-infinity-eq-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      neg-inf.eq neg-inf
      (neg-inf.eq positive-infinity).eq FALSE
      (neg-inf.eq nan).eq FALSE
      (neg-inf.eq 42).eq FALSE
      (neg-inf.eq 42.5).eq FALSE
    $.equal-to TRUE

[] > negative-infinity-neq-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      (neg-inf.neq neg-inf).eq FALSE
      neg-inf.neq positive-infinity
      neg-inf.neq nan
      neg-inf.neq 42
      neg-inf.neq 42.5
    $.equal-to TRUE

[] > negative-infinity-gt-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      (neg-inf.gt neg-inf).eq FALSE
      (neg-inf.gt positive-infinity).eq FALSE
      (neg-inf.gt nan).eq FALSE
      (neg-inf.gt 42).eq FALSE
      (neg-inf.gt 42.5).eq FALSE
    $.equal-to TRUE

[] > negative-infinity-gte-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      neg-inf.gte negative-infinity
      (neg-inf.gte positive-infinity).eq FALSE
      (neg-inf.gte nan).eq FALSE
      (neg-inf.gte 42).eq FALSE
      (neg-inf.gte 42.5).eq FALSE
    $.equal-to TRUE

[] > negative-infinity-lt-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      (neg-inf.lt neg-inf).eq FALSE
      neg-inf.lt positive-infinity
      (neg-inf.lt nan).eq FALSE
      neg-inf.lt 42
      neg-inf.lt 42.5
    $.equal-to TRUE

[] > negative-infinity-lte-is-valid
  negative-infinity > neg-inf!

  assert-that > @
    and.
      neg-inf.lte neg-inf
      neg-inf.lte positive-infinity
      (neg-inf.lte nan).eq FALSE
      neg-inf.lte 42
      neg-inf.lte 42.5
    $.equal-to TRUE

[] > negative-infinity-times-is-valid
  negative-infinity > neg-inf!
  positive-infinity > pos-inf!
  nan.as-bytes > nan-as-bytes!

  assert-that > @
    and.
      (neg-inf.times 0.0).as-bytes.eq nan-as-bytes
      (neg-inf.times 0).as-bytes.eq nan-as-bytes
      (neg-inf.times nan).as-bytes.eq nan-as-bytes
      (neg-inf.times neg-inf).eq pos-inf
      (neg-inf.times neg-inf).eq pos-inf
      (neg-inf.times 42).eq neg-inf
      (neg-inf.times -42).eq neg-inf
      (neg-inf.times 42.5).eq neg-inf
      (neg-inf.times -42.5).eq neg-inf
    $.equal-to TRUE

[] > negative-infinity-plus-is-valid
  negative-infinity > neg-inf!
  nan.as-bytes > nan-as-bytes!

  assert-that > @
    and.
      (neg-inf.plus positive-infinity).as-bytes.eq nan-as-bytes
      (neg-inf.plus nan).as-bytes.eq nan-as-bytes
      (neg-inf.plus 0.0).eq neg-inf
      (neg-inf.plus neg-inf).eq neg-inf
      (neg-inf.plus 42).eq neg-inf
      (neg-inf.plus 42.5).eq neg-inf
    $.equal-to TRUE

[] > negative-infinity-neg-is-positive-infinity
  assert-that > @
    negative-infinity.neg
    $.equal-to positive-infinity

[] > negative-infinity-signum-float-minus-one
  assert-that > @
    negative-infinity.signum
    $.equal-to -1.0

[] > negative-infinity-minus-is-valid
  negative-infinity > neg-inf!
  nan.as-bytes > nan-as-bytes!

  assert-that > @
    and.
      (neg-inf.minus neg-inf).as-bytes.eq nan-as-bytes
      (neg-inf.minus nan).as-bytes.eq nan-as-bytes
      (neg-inf.minus 0.0).eq neg-inf
      (neg-inf.minus positive-infinity).eq neg-inf
      (neg-inf.minus 42).eq neg-inf
      (neg-inf.minus 42.5).eq neg-inf
    $.equal-to TRUE

[] > negative-infinity-div-is-valid
  negative-infinity > neg-inf!
  nan.as-bytes > nan-as-bytes!

  assert-that > @
    and.
      (neg-inf.div nan).as-bytes.eq nan-as-bytes
      (neg-inf.div neg-inf).as-bytes.eq nan-as-bytes
      (neg-inf.div neg-inf).as-bytes.eq nan-as-bytes
      (neg-inf.div 0.0).eq neg-inf
      (neg-inf.div 42).eq neg-inf
      (neg-inf.div -42).eq neg-inf
      (neg-inf.div 42.5).eq neg-inf
      (neg-inf.div -42.5).eq neg-inf
    $.equal-to TRUE

[] > negative-infinity-is-equal-to-one-div-zero
  assert-that > @
    negative-infinity
    $.equal-to (-1.0.div 0.0)

[] > negative-infinity-as-bytes-is-valid
  assert-that > @
    negative-infinity.as-bytes
    $.equal-to (-1.0.div 0.0).as-bytes

[] > cannot-convert-negative-infinity-to-int
  assert-that > @
    try
      []
        negative-infinity.as-int > @
      [e]
        e > @
      nop
    $.equal-to "You can not convert negative infinity to int"

[] > negative-infinity-as-string-is-valid
  assert-that > @
    negative-infinity.as-string
    $.equal-to "-âˆž"
