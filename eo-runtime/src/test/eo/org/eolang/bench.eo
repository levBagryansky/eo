# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.0.0

## Empty object.
#[] > bench-empty
#  TRUE > @
# Plus.
[] > bench-times
  1.times 2 > @

## One action
#[] > bench-mem-write
#  memory 1 > mem
#  mem.write > @
#    mem.as-int.times 2
# simple seq
[] > bench-seq-0
  memory 1 > mem
  seq > @
    *
      mem

# simple seq
[] > bench-seq-1
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-2
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-3
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-4
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-5
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
      mem

# simple seq
[] > bench-seq-6
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-7
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-8
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem

# simple seq
[] > bench-seq-9
  memory 1 > mem
  seq > @
    *
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem.write
        mem.as-int.times 2
      mem
