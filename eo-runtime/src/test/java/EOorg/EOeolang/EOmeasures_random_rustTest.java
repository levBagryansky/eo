
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5f50eb 2023-08-23T18:33:26) on 2023-08-29T12:47:41.031279Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.AtComposite;
import org.eolang.AtOnce;
import org.eolang.Data;
import org.eolang.Dataized;
import org.eolang.PhCopy;
import org.eolang.PhDefault;
import org.eolang.PhLocated;
import org.eolang.PhMethod;
import org.eolang.PhWith;
import org.eolang.Phi;
import org.eolang.XmirObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="331" loc="Φ.org.eolang.random-rust" name="random-rust" original-name="random-rust" pos="0"> 
//   <o base=".rust" line="332" loc="Φ.org.eolang.random-rust.r" name="r" pos="4"> 
//     <o base=".eolang" line="332" loc="Φ.org.eolang.random-rust.r.ρ" pos="2"> 
//       <o base=".org" line="332" loc="Φ.org.eolang.random-rust.r.ρ.ρ" pos="2"> 
//         <o base="Q" line="332" loc="Φ.org.eolang.random-rust.r.ρ.ρ.ρ" pos="2"/>
//       </o>
//     </o>
//     <o base="org.eolang.string" data="string" line="333" loc="Φ.org.eolang.random-rust.r.α0" pos="4">use eo_env::EOEnv;\nuse eo_env::eo_enum::EO;\nuse eo_env::eo_enum::EO::{EOInt};\n\npub fn foo(_env: &mut EOEnv) -> EO {\n  EOInt(rand::random::<i64>())\n}</o>
//     <o base="org.eolang.tuple" data="tuple" line="342" loc="Φ.org.eolang.random-rust.r.α1" pos="4"> 
//       <o base="random-rust$t0$t2$a0" cut="241" line="343" loc="Φ.org.eolang.random-rust.r.α1.α0" pos="6" ref="343"/>
//       <o base="org.eolang.string" data="string" line="344" loc="Φ.org.eolang.random-rust.r.α1.α1" pos="6">rand:0.4.5</o>
//     </o>
//   </o>
//   <o base="org.eolang.bool" data="bool" line="345" loc="Φ.org.eolang.random-rust.φ" name="@" pos="2">TRUE</o>
// </o>
@XmirObject(name = "random-rustTest", oname = "random-rust", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOmeasures_random_rustTest extends PhDefault {
    
  public EOmeasures_random_rustTest() {
    this.add("r", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base_base_base = Phi.Φ;
        ret_base_base_base = new PhLocated(ret_base_base_base, 332, 2, "Φ.org.eolang.random-rust.r.ρ.ρ.ρ");
      Phi ret_base_base = new PhMethod(ret_base_base_base, "org");
        ret_base_base = new PhLocated(ret_base_base, 332, 2, "Φ.org.eolang.random-rust.r.ρ.ρ");
      Phi ret_base = new PhMethod(ret_base_base, "eolang");
        ret_base = new PhLocated(ret_base, 332, 2, "Φ.org.eolang.random-rust.r.ρ");
      Phi ret = new PhMethod(ret_base, "rust");
        ret = new PhLocated(ret, 332, 4, "Φ.org.eolang.random-rust.r");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOstring(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 333, 4, "Φ.org.eolang.random-rust.r.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>("use eo_env::EOEnv;\nuse eo_env::eo_enum::EO;\nuse eo_env::eo_enum::EO::{EOInt};\n\npub fn foo(_env: &mut EOEnv) -> EO {\n  EOInt(rand::random::<i64>())\n}"));
        Phi ret_2 = Phi.Φ.attr("org").get().attr("eolang").get().attr("tuple").get();
          ret_2 = new PhLocated(ret_2, 342, 4, "Φ.org.eolang.random-rust.r.α1");
          Phi[] ret_2_a = new Phi[2];
          Phi ret_2_a0 = new EOω1t0$EOt2$EOa0(rho);
            ret_2_a0 = new PhLocated(ret_2_a0, 343, 6, "Φ.org.eolang.random-rust.r.α1.α0");
          ret_2_a[0] = ret_2_a0;
          Phi ret_2_a1 = new EOstring(Phi.Φ);
            ret_2_a1 = new PhLocated(ret_2_a1, 344, 6, "Φ.org.eolang.random-rust.r.α1.α1");
            ret_2_a1 = new PhWith(ret_2_a1, "Δ", new Data.Value<>("rand:0.4.5"));
          ret_2_a[1] = ret_2_a1;
          ret_2 = new PhWith(new PhCopy(ret_2), "Δ", new Data.Value<Phi[]>(ret_2_a));
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EObool(Phi.Φ);
        ret = new PhLocated(ret, 345, 2, "Φ.org.eolang.random-rust.φ");
        ret = new PhWith(ret, "Δ", new Data.Value<>(Boolean.TRUE));
      return ret;
    })));
  }

  @Test
  // 0.044 with jit (warmup = 15000)
  // 5.16 without jit
  public void works() throws Exception {
    final Phi plus = new EOmeasures_random_rustTest().attr("r").get();
    final Dataized dataized = new Dataized(plus);
    final int warmup = 500;
    for (int i = 0; i < warmup; i++) {
      dataized.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      dataized.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }

// <o abstract="" ancestors="1" line="343" loc="Φ.org.eolang.random-rust$t0$t2$a0" name="random-rust$t0$t2$a0" parent="random-rust" pos="6"/>
@XmirObject(name = "ω1t0$t2$a0", oname = "ω1t0$t2$a0", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOω1t0$EOt2$EOa0 extends PhDefault {
    
  public EOω1t0$EOt2$EOa0(final Phi sigma) {
    super(sigma);
  }
}
}
