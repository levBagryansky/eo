
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5f50eb 2023-08-23T18:33:26) on 2023-08-29T12:47:41.031279Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.AtComposite;
import org.eolang.AtOnce;
import org.eolang.Data;
import org.eolang.Dataized;
import org.eolang.PhDefault;
import org.eolang.PhLocated;
import org.eolang.PhMethod;
import org.eolang.PhWith;
import org.eolang.Phi;
import org.eolang.XmirObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="327" loc="Φ.org.eolang.random-eo" name="random-eo" original-name="random-eo" pos="0"> 
//   <o base=".pseudo" line="328" loc="Φ.org.eolang.random-eo.r" name="r" pos="8"> 
//     <o base="org.eolang.math.random" line="328" loc="Φ.org.eolang.random-eo.r.ρ" pos="2"/>
//   </o>
//   <o base="org.eolang.bool" data="bool" line="329" loc="Φ.org.eolang.random-eo.φ" name="@" pos="2">TRUE</o>
// </o>
@XmirObject(name = "random-eoTest", oname = "random-eo", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOmeasures_random_eoTest extends PhDefault {

  public EOmeasures_random_eoTest() {
    this.add("r", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = Phi.Φ.attr("org").get().attr("eolang").get().attr("math").get().attr("random").get();
      ret_base = new PhLocated(ret_base, 328, 2, "Φ.org.eolang.random-eo.r.ρ");
      Phi ret = new PhMethod(ret_base, "pseudo");
      ret = new PhLocated(ret, 328, 8, "Φ.org.eolang.random-eo.r");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EObool(Phi.Φ);
      ret = new PhLocated(ret, 329, 2, "Φ.org.eolang.random-eo.φ");
      ret = new PhWith(ret, "Δ", new Data.Value<>(Boolean.TRUE));
      return ret;
    })));
  }

  @Test
  // 0.212 with jit (warmup = 15000)
  // 8.61 without jit
  public void works() throws Exception {
    final Phi plus = new EOmeasures_random_eoTest().attr("r").get();
    final Dataized dataized = new Dataized(plus);
    final int warmup = 500;
    for (int i = 0; i < warmup; i++) {
      dataized.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      dataized.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }
}
