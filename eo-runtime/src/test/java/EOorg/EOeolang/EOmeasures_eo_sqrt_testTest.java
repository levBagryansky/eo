
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-21T15:22:26.634504Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.AtComposite;
import org.eolang.AtFree;
import org.eolang.AtOnce;
import org.eolang.Data;
import org.eolang.Dataized;
import org.eolang.PhCopy;
import org.eolang.PhDefault;
import org.eolang.PhLocated;
import org.eolang.PhMethod;
import org.eolang.PhWith;
import org.eolang.Phi;
import org.eolang.XmirObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="274" loc="Φ.org.eolang.measures-eo-sqrt" name="measures-eo-sqrt" original-name="measures-eo-sqrt" pos="0"> 
//   <o base="org.eolang.float" data="float" line="275" loc="Φ.org.eolang.measures-eo-sqrt.a" name="a" pos="2">4.0</o>
//   <o base="measures-eo-sqrt$babylonian-method" cut="174" line="276" loc="Φ.org.eolang.measures-eo-sqrt.babylonian-method" name="babylonian-method" pos="2" ref="276"> 
//     <o as="a" base="a" level="1" loc="Φ.org.eolang.measures-eo-sqrt.babylonian-method.α0" ref="275"/>
//   </o>
//   <o base=".eq" line="303" loc="Φ.org.eolang.measures-eo-sqrt.φ" name="@" pos="2"> 
//     <o base="babylonian-method" line="304" loc="Φ.org.eolang.measures-eo-sqrt.φ.ρ" pos="4" ref="276"/>
//     <o base="org.eolang.float" data="float" line="305" loc="Φ.org.eolang.measures-eo-sqrt.φ.α0" pos="4">2.0</o>
//   </o>
// </o>
@XmirObject(name = "measures-eo-sqrtTest", oname = "measures-eo-sqrt", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOmeasures_eo_sqrt_testTest extends PhDefault {
  public EOmeasures_eo_sqrt_testTest() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOfloat(Phi.Φ);
        ret = new PhLocated(ret, 275, 2, "Φ.org.eolang.measures-eo-sqrt.a");
        ret = new PhWith(ret, "Δ", new Data.Value<>(4.0d));
      return ret;
    })));
    this.add("babylonian-method", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOω1babylonian_method(rho);
        ret = new PhLocated(ret, 276, 2, "Φ.org.eolang.measures-eo-sqrt.babylonian-method");
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "babylonian-method");
        ret_base = new PhLocated(ret_base, 304, 4, "Φ.org.eolang.measures-eo-sqrt.φ.ρ");
      Phi ret = new PhMethod(ret_base, "eq");
        ret = new PhLocated(ret, 303, 2, "Φ.org.eolang.measures-eo-sqrt.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 305, 4, "Φ.org.eolang.measures-eo-sqrt.φ.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(2.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
  }

  @Test
  public void works() throws Exception {
    Object obj = new Dataized(new EOmeasures_eo_sqrtTest()).take();
    if (obj instanceof String) {
      Assertions.fail(obj.toString());
    } else {
      Assertions.assertTrue((Boolean) obj);
    }
  }

  @Test
  // 0.3 ms with jit
  // 24 ms
  public void full()throws Exception {
    final int warmup = 1000;
    final Dataized full_test = new Dataized(new EOmeasures_eo_sqrtTest());
    for (int i = 0; i < warmup; i++) {
      full_test.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      full_test.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }

  @Test
  // 0.352 ms with jit
  // 24.89 ms without jit
  public void sqrt_only() throws Exception {
    final Phi sqrt = new EOmeasures_eo_sqrtTest().attr("babylonian-method").get();
    final Dataized dataized = new Dataized(sqrt);
    final int warmup = 500;
    for (int i = 0; i < warmup; i++) {
      dataized.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      dataized.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }


  // <o abstract="" ancestors="1" line="276" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method" name="measures-eo-sqrt$babylonian-method" original-name="babylonian-method" parent="measures-eo-sqrt" pos="2">
//   <o base="org.eolang.memory" line="277" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-new" name="x-new" pos="4"> 
//     <o base="org.eolang.float" data="float" line="277" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-new.α0" pos="11">1.0</o>
//   </o>
//   <o base="org.eolang.memory" line="278" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-old" name="x-old" pos="4"> 
//     <o base="org.eolang.float" data="float" line="278" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-old.α0" pos="11">0.0</o>
//   </o>
//   <o base="org.eolang.memory" line="279" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.diff" name="diff" pos="4"> 
//     <o base="org.eolang.float" data="float" line="279" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.diff.α0" pos="11">1.0</o>
//   </o>
//   <o base="org.eolang.memory" line="280" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.counter" name="counter" pos="4"> 
//     <o base="org.eolang.int" data="int" line="280" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.counter.α0" pos="11">0</o>
//   </o>
//   <o base="org.eolang.seq" line="281" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ" name="@" pos="4"> 
//     <o base=".while" line="282" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0" pos="6"> 
//       <o base=".gt" line="283" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ" pos="8"> 
//         <o base="diff" line="284" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ.ρ" pos="10" ref="279"/>
//         <o base="org.eolang.float" data="float" line="285" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ.α0" pos="10">1.0E-15</o>
//       </o>
//       <o base="measures-eo-sqrt$babylonian-method$t4$t0$a1" cut="185" line="286" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0" pos="8" ref="286"> 
//         <o as="x-new" base="x-new" level="1" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0.α0" ref="277"/>
//         <o as="x-old" base="x-old" level="1" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0.α1" ref="278"/>
//         <o as="diff" base="diff" level="1" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0.α2" ref="279"/>
//         <o as="a" base="a" level="2" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0.α3" ref="276.275.463"/>
//       </o>
//     </o>
//     <o base="x-new" line="302" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α1" pos="6" ref="277"/>
//   </o>
//   <o level="1" line="276.275.463" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method.a" name="a"/>
// </o>
@XmirObject(name = "ω1babylonian-method", oname = "babylonian-method", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOω1babylonian_method extends PhDefault {
  public EOω1babylonian_method(final Phi sigma) {
    super(sigma);
    this.add("x-new", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 277, 4, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-new");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 277, 11, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-new.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("x-old", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 278, 4, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-old");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 278, 11, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.x-old.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("diff", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 279, 4, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.diff");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOfloat(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 279, 11, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.diff.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1.0d));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("counter", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
        ret = new PhLocated(ret, 280, 4, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.counter");
      ret = new PhCopy(ret);
        Phi ret_1 = new EOint(Phi.Φ);
          ret_1 = new PhLocated(ret_1, 280, 11, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.counter.α0");
          ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret = new PhLocated(ret, 281, 4, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base_base = new PhMethod(rho, "diff");
          ret_1_base_base = new PhLocated(ret_1_base_base, 284, 10, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ.ρ");
        Phi ret_1_base = new PhMethod(ret_1_base_base, "gt");
          ret_1_base = new PhLocated(ret_1_base, 283, 8, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ");
        ret_1_base = new PhCopy(ret_1_base);
          Phi ret_1_base_1 = new EOfloat(Phi.Φ);
            ret_1_base_1 = new PhLocated(ret_1_base_1, 285, 10, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.ρ.α0");
            ret_1_base_1 = new PhWith(ret_1_base_1, "Δ", new Data.Value<>(1.0E-15d));
          ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
        Phi ret_1 = new PhMethod(ret_1_base, "while");
          ret_1 = new PhLocated(ret_1, 282, 6, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new EOω2t4$EOt0$EOa1(rho);
            ret_1_1 = new PhLocated(ret_1_1, 286, 8, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2 = new PhMethod(rho, "x-new");
          ret_2 = new PhLocated(ret_2, 302, 6, "Φ.org.eolang.measures-eo-sqrt$babylonian-method.φ.α1");
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

// <o abstract="" ancestors="2" line="286" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1" name="measures-eo-sqrt$babylonian-method$t4$t0$a1" parent="measures-eo-sqrt$babylonian-method" pos="8"> 
//   <o line="286" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.i" name="i" pos="9"/>
//   <o base="org.eolang.seq" line="287" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ" name="@" pos="10"> 
//     <o base=".write" line="288" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0" pos="17"> 
//       <o base="x-old" line="288" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.ρ" pos="12" ref="286.278.464"/>
//       <o base="x-new" line="289" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.α0" pos="14" ref="286.277.464"/>
//     </o>
//     <o base=".write" line="290" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1" pos="17"> 
//       <o base="x-new" line="290" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.ρ" pos="12" ref="286.277.464"/>
//       <o base=".times" line="291" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0" pos="14"> 
//         <o base="org.eolang.float" data="float" line="292" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.ρ" pos="16">0.5</o>
//         <o base=".plus" line="293" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0" pos="16"> 
//           <o base=".div" line="294" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ" pos="18"> 
//             <o base="a" line="295" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.ρ" pos="20" ref="286.275.464"/>
//             <o base="x-old" line="296" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.α0" pos="20" ref="286.278.464"/>
//           </o>
//           <o base="x-old" line="297" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.α0" pos="18" ref="286.278.464"/>
//         </o>
//       </o>
//     </o>
//     <o base=".write" line="298" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2" pos="16"> 
//       <o base="diff" line="298" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.ρ" pos="12" ref="286.279.464"/>
//       <o base=".abs" line="299" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0" pos="14"> 
//         <o base=".number" line="300" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ" pos="23"> 
//           <o base=".math" line="300" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ" pos="18"> 
//             <o base=".eolang" line="300" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ" pos="16"> 
//               <o base=".org" line="300" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ.ρ" pos="16"> 
//                 <o base="Q" line="300" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ.ρ.ρ" pos="16"/>
//               </o>
//             </o>
//           </o>
//           <o base=".minus" line="301" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0" pos="23"> 
//             <o base="x-new" line="301" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0.ρ" pos="18" ref="286.277.464"/>
//             <o base="x-old" line="301" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0.α0" pos="30" ref="286.278.464"/>
//           </o>
//         </o>
//       </o>
//     </o>
//   </o>
//   <o level="1" line="286.277.464" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.x-new" name="x-new"/>
//   <o level="1" line="286.278.464" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.x-old" name="x-old"/>
//   <o level="1" line="286.279.464" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.diff" name="diff"/>
//   <o level="2" line="286.275.464" loc="Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.a" name="a"/>
// </o>
@XmirObject(name = "ω2t4$t0$a1", oname = "ω2t4$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOω2t4$EOt0$EOa1 extends PhDefault {
  public EOω2t4$EOt0$EOa1(final Phi sigma) {
    super(sigma);
    this.add("i", new AtFree(/* default */));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
        ret = new PhLocated(ret, 287, 10, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ");
      ret = new PhCopy(ret);
        Phi ret_1_base = new PhMethod(new PhMethod(rho, "σ"), "x-old");
          ret_1_base = new PhLocated(ret_1_base, 288, 12, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.ρ");
        Phi ret_1 = new PhMethod(ret_1_base, "write");
          ret_1 = new PhLocated(ret_1, 288, 17, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0");
        ret_1 = new PhCopy(ret_1);
          Phi ret_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-new");
            ret_1_1 = new PhLocated(ret_1_1, 289, 14, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.α0");
          ret_1 = new PhWith(ret_1, 0, ret_1_1);
        Phi ret_2_base = new PhMethod(new PhMethod(rho, "σ"), "x-new");
          ret_2_base = new PhLocated(ret_2_base, 290, 12, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "write");
          ret_2 = new PhLocated(ret_2, 290, 17, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1_base = new EOfloat(Phi.Φ);
            ret_2_1_base = new PhLocated(ret_2_1_base, 292, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.ρ");
            ret_2_1_base = new PhWith(ret_2_1_base, "Δ", new Data.Value<>(0.5d));
          Phi ret_2_1 = new PhMethod(ret_2_1_base, "times");
            ret_2_1 = new PhLocated(ret_2_1, 291, 14, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0");
          ret_2_1 = new PhCopy(ret_2_1);
            Phi ret_2_1_1_base_base = new PhMethod(new PhMethod(new PhMethod(rho, "σ"), "σ"), "a");
              ret_2_1_1_base_base = new PhLocated(ret_2_1_1_base_base, 295, 20, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.ρ");
            Phi ret_2_1_1_base = new PhMethod(ret_2_1_1_base_base, "div");
              ret_2_1_1_base = new PhLocated(ret_2_1_1_base, 294, 18, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ");
            ret_2_1_1_base = new PhCopy(ret_2_1_1_base);
              Phi ret_2_1_1_base_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                ret_2_1_1_base_1 = new PhLocated(ret_2_1_1_base_1, 296, 20, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.α0");
              ret_2_1_1_base = new PhWith(ret_2_1_1_base, 0, ret_2_1_1_base_1);
            Phi ret_2_1_1 = new PhMethod(ret_2_1_1_base, "plus");
              ret_2_1_1 = new PhLocated(ret_2_1_1, 293, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0");
            ret_2_1_1 = new PhCopy(ret_2_1_1);
              Phi ret_2_1_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                ret_2_1_1_1 = new PhLocated(ret_2_1_1_1, 297, 18, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.α0");
              ret_2_1_1 = new PhWith(ret_2_1_1, 0, ret_2_1_1_1);
            ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        Phi ret_3_base = new PhMethod(new PhMethod(rho, "σ"), "diff");
          ret_3_base = new PhLocated(ret_3_base, 298, 12, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.ρ");
        Phi ret_3 = new PhMethod(ret_3_base, "write");
          ret_3 = new PhLocated(ret_3, 298, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2");
        ret_3 = new PhCopy(ret_3);
          Phi ret_3_1_base_base_base_base_base = Phi.Φ;
            ret_3_1_base_base_base_base_base = new PhLocated(ret_3_1_base_base_base_base_base, 300, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ.ρ.ρ");
          Phi ret_3_1_base_base_base_base = new PhMethod(ret_3_1_base_base_base_base_base, "org");
            ret_3_1_base_base_base_base = new PhLocated(ret_3_1_base_base_base_base, 300, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ.ρ");
          Phi ret_3_1_base_base_base = new PhMethod(ret_3_1_base_base_base_base, "eolang");
            ret_3_1_base_base_base = new PhLocated(ret_3_1_base_base_base, 300, 16, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ.ρ");
          Phi ret_3_1_base_base = new PhMethod(ret_3_1_base_base_base, "math");
            ret_3_1_base_base = new PhLocated(ret_3_1_base_base, 300, 18, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.ρ");
          Phi ret_3_1_base = new PhMethod(ret_3_1_base_base, "number");
            ret_3_1_base = new PhLocated(ret_3_1_base, 300, 23, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ");
          ret_3_1_base = new PhCopy(ret_3_1_base);
            Phi ret_3_1_base_1_base = new PhMethod(new PhMethod(rho, "σ"), "x-new");
              ret_3_1_base_1_base = new PhLocated(ret_3_1_base_1_base, 301, 18, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0.ρ");
            Phi ret_3_1_base_1 = new PhMethod(ret_3_1_base_1_base, "minus");
              ret_3_1_base_1 = new PhLocated(ret_3_1_base_1, 301, 23, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0");
            ret_3_1_base_1 = new PhCopy(ret_3_1_base_1);
              Phi ret_3_1_base_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                ret_3_1_base_1_1 = new PhLocated(ret_3_1_base_1_1, 301, 30, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.ρ.α0.α0");
              ret_3_1_base_1 = new PhWith(ret_3_1_base_1, 0, ret_3_1_base_1_1);
            ret_3_1_base = new PhWith(ret_3_1_base, 0, ret_3_1_base_1);
          Phi ret_3_1 = new PhMethod(ret_3_1_base, "abs");
            ret_3_1 = new PhLocated(ret_3_1, 299, 14, "Φ.org.eolang.measures-eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0");
          ret_3 = new PhWith(ret_3, 0, ret_3_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
        ret = new PhWith(ret, 2, ret_3);
      return ret;
    })));
  }
}
}
}
