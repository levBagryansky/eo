
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-21T15:22:26.634504Z; your changes will be discarded on the next build */
package EOorg.EOeolang;

import org.eolang.AtComposite;
import org.eolang.AtOnce;
import org.eolang.Data;
import org.eolang.Dataized;
import org.eolang.PhCopy;
import org.eolang.PhDefault;
import org.eolang.PhLocated;
import org.eolang.PhMethod;
import org.eolang.PhWith;
import org.eolang.Phi;
import org.eolang.XmirObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

// <o abstract="" line="241" loc="Φ.org.eolang.measures-eo-plus" name="measures-eo-plus" original-name="measures-eo-plus" pos="0"> 
//   <o base="org.eolang.int" data="int" line="242" loc="Φ.org.eolang.measures-eo-plus.a" name="a" pos="2">5</o>
//   <o base="org.eolang.int" data="int" line="243" loc="Φ.org.eolang.measures-eo-plus.b" name="b" pos="2">10</o>
//   <o base=".plus" line="244" loc="Φ.org.eolang.measures-eo-plus.plus" name="plus" pos="3"> 
//     <o base="a" line="244" loc="Φ.org.eolang.measures-eo-plus.plus.ρ" pos="2" ref="242"/>
//     <o base="b" line="244" loc="Φ.org.eolang.measures-eo-plus.plus.α0" pos="9" ref="243"/>
//   </o>
//   <o base="org.eolang.hamcrest.assert-that" line="245" loc="Φ.org.eolang.measures-eo-plus.φ" name="@" pos="2"> 
//     <o base="plus" line="246" loc="Φ.org.eolang.measures-eo-plus.φ.α0" pos="4" ref="244"/>
//     <o base=".equal-to" line="247" loc="Φ.org.eolang.measures-eo-plus.φ.α1" pos="5"> 
//       <o base="$" line="247" loc="Φ.org.eolang.measures-eo-plus.φ.α1.ρ" pos="4"/>
//       <o base="org.eolang.int" data="int" line="247" loc="Φ.org.eolang.measures-eo-plus.φ.α1.α0" pos="15">15</o>
//     </o>
//   </o>
// </o>
@XmirObject(name = "measures-eo-plusTest", oname = "measures-eo-plus", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EOmeasures_eo_plus_testTest extends PhDefault {
  public EOmeasures_eo_plus_testTest() {
    this.add("a", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint(Phi.Φ);
        ret = new PhLocated(ret, 242, 2, "Φ.org.eolang.measures-eo-plus.a");
        ret = new PhWith(ret, "Δ", new Data.Value<>(5L));
      return ret;
    })));
    this.add("b", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = new EOint(Phi.Φ);
        ret = new PhLocated(ret, 243, 2, "Φ.org.eolang.measures-eo-plus.b");
        ret = new PhWith(ret, "Δ", new Data.Value<>(10L));
      return ret;
    })));
    this.add("plus", new AtOnce(new AtComposite(this, rho -> {
      Phi ret_base = new PhMethod(rho, "a");
        ret_base = new PhLocated(ret_base, 244, 2, "Φ.org.eolang.measures-eo-plus.plus.ρ");
      Phi ret = new PhMethod(ret_base, "plus");
        ret = new PhLocated(ret, 244, 3, "Φ.org.eolang.measures-eo-plus.plus");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "b");
          ret_1 = new PhLocated(ret_1, 244, 9, "Φ.org.eolang.measures-eo-plus.plus.α0");
        ret = new PhWith(ret, 0, ret_1);
      return ret;
    })));
    this.add("φ", new AtOnce(new AtComposite(this, rho -> {
      Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("hamcrest").get().attr("assert-that").get();
        ret = new PhLocated(ret, 245, 2, "Φ.org.eolang.measures-eo-plus.φ");
      ret = new PhCopy(ret);
        Phi ret_1 = new PhMethod(rho, "plus");
          ret_1 = new PhLocated(ret_1, 246, 4, "Φ.org.eolang.measures-eo-plus.φ.α0");
        Phi ret_2_base = rho;
          ret_2_base = new PhLocated(ret_2_base, 247, 4, "Φ.org.eolang.measures-eo-plus.φ.α1.ρ");
        Phi ret_2 = new PhMethod(ret_2_base, "equal-to");
          ret_2 = new PhLocated(ret_2, 247, 5, "Φ.org.eolang.measures-eo-plus.φ.α1");
        ret_2 = new PhCopy(ret_2);
          Phi ret_2_1 = new EOint(Phi.Φ);
            ret_2_1 = new PhLocated(ret_2_1, 247, 15, "Φ.org.eolang.measures-eo-plus.φ.α1.α0");
            ret_2_1 = new PhWith(ret_2_1, "Δ", new Data.Value<>(15L));
          ret_2 = new PhWith(ret_2, 0, ret_2_1);
        ret = new PhWith(ret, 0, ret_1);
        ret = new PhWith(ret, 1, ret_2);
      return ret;
    })));
  }

  @Test
  // 0.548 ms with jit
  public void full() throws Exception {
    final int warmup = 1000;
    final Dataized full_test = new Dataized(new EOmeasures_eo_plusTest());
    for (int i = 0; i < warmup; i++) {
      full_test.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      full_test.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }

  @Test
  // 0.152 with jit
  public void plus_only() throws Exception {
    final Phi plus = new EOmeasures_eo_plusTest().attr("plus").get();
    final Dataized dataized = new Dataized(plus);
    final int warmup = 500;
    for (int i = 0; i < warmup; i++) {
      dataized.take();
    }
    final int count = 500;
    final long start = System.currentTimeMillis();
    for (int i = 0; i < count; i++) {
      dataized.take();
    }
    final long finish = System.currentTimeMillis();
    System.out.println((0.0 + finish - start) / count);
    Assertions.assertTrue(true);
  }
}
