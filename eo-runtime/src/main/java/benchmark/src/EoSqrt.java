package benchmark.src;
/* This file was auto-generated by eo-maven-plugin (1.0-SNAPSHOT b5a4c9a 2023-08-17T12:29:38) on 2023-08-21T10:17:20.691436Z; your changes will be discarded on the next build */

import org.eolang.*;

// <o abstract="" line="266" loc="Φ.org.eolang.eo-sqrt" name="eo-sqrt" original-name="eo-sqrt" pos="0"> 
//   <o base="org.eolang.float" data="float" line="267" loc="Φ.org.eolang.eo-sqrt.a" name="a" pos="2">4.0</o>
//   <o base="eo-sqrt$abs" cut="163" line="268" loc="Φ.org.eolang.eo-sqrt.abs" name="abs" pos="2" ref="268"/>
//   <o base="eo-sqrt$babylonian-method" cut="173" line="273" loc="Φ.org.eolang.eo-sqrt.babylonian-method" name="babylonian-method" pos="2" ref="273"> 
//     <o as="a" base="a" level="1" loc="Φ.org.eolang.eo-sqrt.babylonian-method.α0" ref="267"/>
//     <o as="abs" base="abs" level="1" loc="Φ.org.eolang.eo-sqrt.babylonian-method.α1" ref="268"/>
//   </o>
//   <o base=".eq" line="299" loc="Φ.org.eolang.eo-sqrt.φ" name="@" pos="2"> 
//     <o base="babylonian-method" line="300" loc="Φ.org.eolang.eo-sqrt.φ.ρ" pos="4" ref="273"/>
//     <o base="org.eolang.float" data="float" line="301" loc="Φ.org.eolang.eo-sqrt.φ.α0" pos="4">2.0</o>
//   </o>
// </o>
@XmirObject(name = "eo-sqrtTest", oname = "eo-sqrt", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
public final class EoSqrt extends PhDefault {
    public EoSqrt() {
        this.add("a", new AtOnce(new AtComposite(this, rho -> {
            Phi ret = new EOorg.EOeolang.EOfloat(Phi.Φ);
            ret = new PhLocated(ret, 267, 2, "Φ.org.eolang.eo-sqrt.a");
            ret = new PhWith(ret, "Δ", new Data.Value<>(4.0d));
            return ret;
        })));
        this.add("abs", new AtOnce(new AtComposite(this, rho -> {
            Phi ret = new EOω1abs(rho);
            ret = new PhLocated(ret, 268, 2, "Φ.org.eolang.eo-sqrt.abs");
            return ret;
        })));
        this.add("babylonian-method", new AtOnce(new AtComposite(this, rho -> {
            Phi ret = new EOω1babylonian_method(rho);
            ret = new PhLocated(ret, 273, 2, "Φ.org.eolang.eo-sqrt.babylonian-method");
            return ret;
        })));
        this.add("φ", new AtOnce(new AtComposite(this, rho -> {
            Phi ret_base = new PhMethod(rho, "babylonian-method");
            ret_base = new PhLocated(ret_base, 300, 4, "Φ.org.eolang.eo-sqrt.φ.ρ");
            Phi ret = new PhMethod(ret_base, "eq");
            ret = new PhLocated(ret, 299, 2, "Φ.org.eolang.eo-sqrt.φ");
            ret = new PhCopy(ret);
            Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
            ret_1 = new PhLocated(ret_1, 301, 4, "Φ.org.eolang.eo-sqrt.φ.α0");
            ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(2.0d));
            ret = new PhWith(ret, 0, ret_1);
            return ret;
        })));
    }

    // <o abstract="" ancestors="1" line="268" loc="Φ.org.eolang.eo-sqrt$abs" name="eo-sqrt$abs" original-name="abs" parent="eo-sqrt" pos="2"> 
//   <o line="268" loc="Φ.org.eolang.eo-sqrt$abs.diff" name="diff" pos="3"/>
//   <o base=".if" line="269" loc="Φ.org.eolang.eo-sqrt$abs.φ" name="@" pos="4"> 
//     <o base=".gt" line="270" loc="Φ.org.eolang.eo-sqrt$abs.φ.ρ" pos="10"> 
//       <o base="diff" line="270" loc="Φ.org.eolang.eo-sqrt$abs.φ.ρ.ρ" pos="6" ref="268"/>
//       <o base="org.eolang.float" data="float" line="270" loc="Φ.org.eolang.eo-sqrt$abs.φ.ρ.α0" pos="14">0.0</o>
//     </o>
//     <o base="diff" line="271" loc="Φ.org.eolang.eo-sqrt$abs.φ.α0" pos="6" ref="268"/>
//     <o base=".minus" line="272" loc="Φ.org.eolang.eo-sqrt$abs.φ.α1" pos="9"> 
//       <o base="org.eolang.float" data="float" line="272" loc="Φ.org.eolang.eo-sqrt$abs.φ.α1.ρ" pos="6">0.0</o>
//       <o base="diff" line="272" loc="Φ.org.eolang.eo-sqrt$abs.φ.α1.α0" pos="16" ref="268"/>
//     </o>
//   </o>
// </o>
    @XmirObject(name = "ω1abs", oname = "abs", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
    public final class EOω1abs extends PhDefault {
        public EOω1abs(final Phi sigma) {
            super(sigma);
            this.add("diff", new AtFree(/* default */));
            this.add("φ", new AtOnce(new AtComposite(this, rho -> {
                Phi ret_base_base = new PhMethod(rho, "diff");
                ret_base_base = new PhLocated(ret_base_base, 270, 6, "Φ.org.eolang.eo-sqrt$abs.φ.ρ.ρ");
                Phi ret_base = new PhMethod(ret_base_base, "gt");
                ret_base = new PhLocated(ret_base, 270, 10, "Φ.org.eolang.eo-sqrt$abs.φ.ρ");
                ret_base = new PhCopy(ret_base);
                Phi ret_base_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_base_1 = new PhLocated(ret_base_1, 270, 14, "Φ.org.eolang.eo-sqrt$abs.φ.ρ.α0");
                ret_base_1 = new PhWith(ret_base_1, "Δ", new Data.Value<>(0.0d));
                ret_base = new PhWith(ret_base, 0, ret_base_1);
                Phi ret = new PhMethod(ret_base, "if");
                ret = new PhLocated(ret, 269, 4, "Φ.org.eolang.eo-sqrt$abs.φ");
                ret = new PhCopy(ret);
                Phi ret_1 = new PhMethod(rho, "diff");
                ret_1 = new PhLocated(ret_1, 271, 6, "Φ.org.eolang.eo-sqrt$abs.φ.α0");
                Phi ret_2_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_2_base = new PhLocated(ret_2_base, 272, 6, "Φ.org.eolang.eo-sqrt$abs.φ.α1.ρ");
                ret_2_base = new PhWith(ret_2_base, "Δ", new Data.Value<>(0.0d));
                Phi ret_2 = new PhMethod(ret_2_base, "minus");
                ret_2 = new PhLocated(ret_2, 272, 9, "Φ.org.eolang.eo-sqrt$abs.φ.α1");
                ret_2 = new PhCopy(ret_2);
                Phi ret_2_1 = new PhMethod(rho, "diff");
                ret_2_1 = new PhLocated(ret_2_1, 272, 16, "Φ.org.eolang.eo-sqrt$abs.φ.α1.α0");
                ret_2 = new PhWith(ret_2, 0, ret_2_1);
                ret = new PhWith(ret, 0, ret_1);
                ret = new PhWith(ret, 1, ret_2);
                return ret;
            })));
        }
    }

    // <o abstract="" ancestors="1" line="273" loc="Φ.org.eolang.eo-sqrt$babylonian-method" name="eo-sqrt$babylonian-method" original-name="babylonian-method" parent="eo-sqrt" pos="2"> 
//   <o base="org.eolang.memory" line="274" loc="Φ.org.eolang.eo-sqrt$babylonian-method.x-new" name="x-new" pos="4"> 
//     <o base="org.eolang.float" data="float" line="274" loc="Φ.org.eolang.eo-sqrt$babylonian-method.x-new.α0" pos="11">1.0</o>
//   </o>
//   <o base="org.eolang.memory" line="275" loc="Φ.org.eolang.eo-sqrt$babylonian-method.x-old" name="x-old" pos="4"> 
//     <o base="org.eolang.float" data="float" line="275" loc="Φ.org.eolang.eo-sqrt$babylonian-method.x-old.α0" pos="11">0.0</o>
//   </o>
//   <o base="org.eolang.memory" line="276" loc="Φ.org.eolang.eo-sqrt$babylonian-method.diff" name="diff" pos="4"> 
//     <o base="org.eolang.float" data="float" line="276" loc="Φ.org.eolang.eo-sqrt$babylonian-method.diff.α0" pos="11">1.0</o>
//   </o>
//   <o base="org.eolang.memory" line="277" loc="Φ.org.eolang.eo-sqrt$babylonian-method.counter" name="counter" pos="4"> 
//     <o base="org.eolang.int" data="int" line="277" loc="Φ.org.eolang.eo-sqrt$babylonian-method.counter.α0" pos="11">0</o>
//   </o>
//   <o base="org.eolang.seq" line="278" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ" name="@" pos="4"> 
//     <o base=".while" line="279" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0" pos="6"> 
//       <o base=".gt" line="280" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ" pos="8"> 
//         <o base="diff" line="281" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ.ρ" pos="10" ref="276"/>
//         <o base="org.eolang.float" data="float" line="282" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ.α0" pos="10">1.0E-15</o>
//       </o>
//       <o base="eo-sqrt$babylonian-method$t4$t0$a1" cut="184" line="283" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0" pos="8" ref="283"> 
//         <o as="x-new" base="x-new" level="1" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0.α0" ref="274"/>
//         <o as="x-old" base="x-old" level="1" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0.α1" ref="275"/>
//         <o as="diff" base="diff" level="1" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0.α2" ref="276"/>
//         <o as="a" base="a" level="2" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0.α3" ref="273.267.471"/>
//         <o as="abs" base="abs" level="2" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0.α4" ref="273.268.471"/>
//       </o>
//     </o>
//     <o base="x-new" line="298" loc="Φ.org.eolang.eo-sqrt$babylonian-method.φ.α1" pos="6" ref="274"/>
//   </o>
//   <o level="1" line="273.267.471" loc="Φ.org.eolang.eo-sqrt$babylonian-method.a" name="a"/>
//   <o level="1" line="273.268.471" loc="Φ.org.eolang.eo-sqrt$babylonian-method.abs" name="abs"/>
// </o>
    @XmirObject(name = "ω1babylonian-method", oname = "babylonian-method", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
    public final class EOω1babylonian_method extends PhDefault {
        public EOω1babylonian_method(final Phi sigma) {
            super(sigma);
            this.add("x-new", new AtOnce(new AtComposite(this, rho -> {
                Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
                ret = new PhLocated(ret, 274, 4, "Φ.org.eolang.eo-sqrt$babylonian-method.x-new");
                ret = new PhCopy(ret);
                Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_1 = new PhLocated(ret_1, 274, 11, "Φ.org.eolang.eo-sqrt$babylonian-method.x-new.α0");
                ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1.0d));
                ret = new PhWith(ret, 0, ret_1);
                return ret;
            })));
            this.add("x-old", new AtOnce(new AtComposite(this, rho -> {
                Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
                ret = new PhLocated(ret, 275, 4, "Φ.org.eolang.eo-sqrt$babylonian-method.x-old");
                ret = new PhCopy(ret);
                Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_1 = new PhLocated(ret_1, 275, 11, "Φ.org.eolang.eo-sqrt$babylonian-method.x-old.α0");
                ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0.0d));
                ret = new PhWith(ret, 0, ret_1);
                return ret;
            })));
            this.add("diff", new AtOnce(new AtComposite(this, rho -> {
                Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
                ret = new PhLocated(ret, 276, 4, "Φ.org.eolang.eo-sqrt$babylonian-method.diff");
                ret = new PhCopy(ret);
                Phi ret_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_1 = new PhLocated(ret_1, 276, 11, "Φ.org.eolang.eo-sqrt$babylonian-method.diff.α0");
                ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(1.0d));
                ret = new PhWith(ret, 0, ret_1);
                return ret;
            })));
            this.add("counter", new AtOnce(new AtComposite(this, rho -> {
                Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("memory").get();
                ret = new PhLocated(ret, 277, 4, "Φ.org.eolang.eo-sqrt$babylonian-method.counter");
                ret = new PhCopy(ret);
                Phi ret_1 = new EOorg.EOeolang.EOint(Phi.Φ);
                ret_1 = new PhLocated(ret_1, 277, 11, "Φ.org.eolang.eo-sqrt$babylonian-method.counter.α0");
                ret_1 = new PhWith(ret_1, "Δ", new Data.Value<>(0L));
                ret = new PhWith(ret, 0, ret_1);
                return ret;
            })));
            this.add("φ", new AtOnce(new AtComposite(this, rho -> {
                Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
                ret = new PhLocated(ret, 278, 4, "Φ.org.eolang.eo-sqrt$babylonian-method.φ");
                ret = new PhCopy(ret);
                Phi ret_1_base_base = new PhMethod(rho, "diff");
                ret_1_base_base = new PhLocated(ret_1_base_base, 281, 10, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ.ρ");
                Phi ret_1_base = new PhMethod(ret_1_base_base, "gt");
                ret_1_base = new PhLocated(ret_1_base, 280, 8, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ");
                ret_1_base = new PhCopy(ret_1_base);
                Phi ret_1_base_1 = new EOorg.EOeolang.EOfloat(Phi.Φ);
                ret_1_base_1 = new PhLocated(ret_1_base_1, 282, 10, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.ρ.α0");
                ret_1_base_1 = new PhWith(ret_1_base_1, "Δ", new Data.Value<>(1.0E-15d));
                ret_1_base = new PhWith(ret_1_base, 0, ret_1_base_1);
                Phi ret_1 = new PhMethod(ret_1_base, "while");
                ret_1 = new PhLocated(ret_1, 279, 6, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0");
                ret_1 = new PhCopy(ret_1);
                Phi ret_1_1 = new EOω2t4$EOt0$EOa1(rho);
                ret_1_1 = new PhLocated(ret_1_1, 283, 8, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α0.α0");
                ret_1 = new PhWith(ret_1, 0, ret_1_1);
                Phi ret_2 = new PhMethod(rho, "x-new");
                ret_2 = new PhLocated(ret_2, 298, 6, "Φ.org.eolang.eo-sqrt$babylonian-method.φ.α1");
                ret = new PhWith(ret, 0, ret_1);
                ret = new PhWith(ret, 1, ret_2);
                return ret;
            })));
        }

        // <o abstract="" ancestors="2" line="283" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1" name="eo-sqrt$babylonian-method$t4$t0$a1" parent="eo-sqrt$babylonian-method" pos="8"> 
//   <o line="283" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.i" name="i" pos="9"/>
//   <o base="org.eolang.seq" line="284" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ" name="@" pos="10"> 
//     <o base=".write" line="285" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0" pos="17"> 
//       <o base="x-old" line="285" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.ρ" pos="12" ref="283.275.472"/>
//       <o base="x-new" line="286" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.α0" pos="14" ref="283.274.472"/>
//     </o>
//     <o base=".write" line="287" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1" pos="17"> 
//       <o base="x-new" line="287" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.ρ" pos="12" ref="283.274.472"/>
//       <o base=".times" line="288" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0" pos="14"> 
//         <o base="org.eolang.float" data="float" line="289" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.ρ" pos="16">0.5</o>
//         <o base=".plus" line="290" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0" pos="16"> 
//           <o base=".div" line="291" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ" pos="18"> 
//             <o base="a" line="292" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.ρ" pos="20" ref="283.267.472"/>
//             <o base="x-old" line="293" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.α0" pos="20" ref="283.275.472"/>
//           </o>
//           <o base="x-old" line="294" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.α0" pos="18" ref="283.275.472"/>
//         </o>
//       </o>
//     </o>
//     <o base=".write" line="295" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2" pos="16"> 
//       <o base="diff" line="295" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.ρ" pos="12" ref="283.276.472"/>
//       <o base="abs" line="296" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0" pos="14" ref="283.268.472"> 
//         <o base=".minus" line="297" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0" pos="21"> 
//           <o base="x-new" line="297" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0.ρ" pos="16" ref="283.274.472"/>
//           <o base="x-old" line="297" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0.α0" pos="28" ref="283.275.472"/>
//         </o>
//       </o>
//     </o>
//   </o>
//   <o level="1" line="283.274.472" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.x-new" name="x-new"/>
//   <o level="1" line="283.275.472" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.x-old" name="x-old"/>
//   <o level="1" line="283.276.472" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.diff" name="diff"/>
//   <o level="2" line="283.267.472" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.a" name="a"/>
//   <o level="2" line="283.268.472" loc="Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.abs" name="abs"/>
// </o>
        @XmirObject(name = "ω2t4$t0$a1", oname = "ω2t4$t0$a1", source = "/home/tardis3/eo/eo-runtime/src/test/eo/org/eolang/rust-tests.eo")
        public final class EOω2t4$EOt0$EOa1 extends PhDefault {
            public EOω2t4$EOt0$EOa1(final Phi sigma) {
                super(sigma);
                this.add("i", new AtFree(/* default */));
                this.add("φ", new AtOnce(new AtComposite(this, rho -> {
                    Phi ret = Phi.Φ.attr("org").get().attr("eolang").get().attr("seq").get();
                    ret = new PhLocated(ret, 284, 10, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ");
                    ret = new PhCopy(ret);
                    Phi ret_1_base = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                    ret_1_base = new PhLocated(ret_1_base, 285, 12, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.ρ");
                    Phi ret_1 = new PhMethod(ret_1_base, "write");
                    ret_1 = new PhLocated(ret_1, 285, 17, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0");
                    ret_1 = new PhCopy(ret_1);
                    Phi ret_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-new");
                    ret_1_1 = new PhLocated(ret_1_1, 286, 14, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α0.α0");
                    ret_1 = new PhWith(ret_1, 0, ret_1_1);
                    Phi ret_2_base = new PhMethod(new PhMethod(rho, "σ"), "x-new");
                    ret_2_base = new PhLocated(ret_2_base, 287, 12, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.ρ");
                    Phi ret_2 = new PhMethod(ret_2_base, "write");
                    ret_2 = new PhLocated(ret_2, 287, 17, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1");
                    ret_2 = new PhCopy(ret_2);
                    Phi ret_2_1_base = new EOorg.EOeolang.EOfloat(Phi.Φ);
                    ret_2_1_base = new PhLocated(ret_2_1_base, 289, 16, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.ρ");
                    ret_2_1_base = new PhWith(ret_2_1_base, "Δ", new Data.Value<>(0.5d));
                    Phi ret_2_1 = new PhMethod(ret_2_1_base, "times");
                    ret_2_1 = new PhLocated(ret_2_1, 288, 14, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0");
                    ret_2_1 = new PhCopy(ret_2_1);
                    Phi ret_2_1_1_base_base = new PhMethod(new PhMethod(new PhMethod(rho, "σ"), "σ"), "a");
                    ret_2_1_1_base_base = new PhLocated(ret_2_1_1_base_base, 292, 20, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.ρ");
                    Phi ret_2_1_1_base = new PhMethod(ret_2_1_1_base_base, "div");
                    ret_2_1_1_base = new PhLocated(ret_2_1_1_base, 291, 18, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ");
                    ret_2_1_1_base = new PhCopy(ret_2_1_1_base);
                    Phi ret_2_1_1_base_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                    ret_2_1_1_base_1 = new PhLocated(ret_2_1_1_base_1, 293, 20, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.ρ.α0");
                    ret_2_1_1_base = new PhWith(ret_2_1_1_base, 0, ret_2_1_1_base_1);
                    Phi ret_2_1_1 = new PhMethod(ret_2_1_1_base, "plus");
                    ret_2_1_1 = new PhLocated(ret_2_1_1, 290, 16, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0");
                    ret_2_1_1 = new PhCopy(ret_2_1_1);
                    Phi ret_2_1_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                    ret_2_1_1_1 = new PhLocated(ret_2_1_1_1, 294, 18, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α1.α0.α0.α0");
                    ret_2_1_1 = new PhWith(ret_2_1_1, 0, ret_2_1_1_1);
                    ret_2_1 = new PhWith(ret_2_1, 0, ret_2_1_1);
                    ret_2 = new PhWith(ret_2, 0, ret_2_1);
                    Phi ret_3_base = new PhMethod(new PhMethod(rho, "σ"), "diff");
                    ret_3_base = new PhLocated(ret_3_base, 295, 12, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.ρ");
                    Phi ret_3 = new PhMethod(ret_3_base, "write");
                    ret_3 = new PhLocated(ret_3, 295, 16, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2");
                    ret_3 = new PhCopy(ret_3);
                    Phi ret_3_1 = new PhMethod(new PhMethod(new PhMethod(rho, "σ"), "σ"), "abs");
                    ret_3_1 = new PhLocated(ret_3_1, 296, 14, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0");
                    ret_3_1 = new PhCopy(ret_3_1);
                    Phi ret_3_1_1_base = new PhMethod(new PhMethod(rho, "σ"), "x-new");
                    ret_3_1_1_base = new PhLocated(ret_3_1_1_base, 297, 16, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0.ρ");
                    Phi ret_3_1_1 = new PhMethod(ret_3_1_1_base, "minus");
                    ret_3_1_1 = new PhLocated(ret_3_1_1, 297, 21, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0");
                    ret_3_1_1 = new PhCopy(ret_3_1_1);
                    Phi ret_3_1_1_1 = new PhMethod(new PhMethod(rho, "σ"), "x-old");
                    ret_3_1_1_1 = new PhLocated(ret_3_1_1_1, 297, 28, "Φ.org.eolang.eo-sqrt$babylonian-method$t4$t0$a1.φ.α2.α0.α0.α0");
                    ret_3_1_1 = new PhWith(ret_3_1_1, 0, ret_3_1_1_1);
                    ret_3_1 = new PhWith(ret_3_1, 0, ret_3_1_1);
                    ret_3 = new PhWith(ret_3, 0, ret_3_1);
                    ret = new PhWith(ret, 0, ret_1);
                    ret = new PhWith(ret, 1, ret_2);
                    ret = new PhWith(ret, 2, ret_3);
                    return ret;
                })));
            }
        }
    }
}
