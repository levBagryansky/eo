# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.txt
+rt jvm org.eolang:eo-runtime:0.0.0
+version 0.0.0

# Regular expression in Perl format.
# Free attribute "r" is a string represenation of regex object.
# It starts and ends with slash (e.g. "/(your-pattern)/s"),
# Also it can be specified by the flag option,
# e.g. (QQ.txt.regex "/(word)/i").compile.matches "WORD".
# other flags:
# /d - Enables Unix lines mode.
# /i - Enables case-insensitive matching.
# /x - Permits whitespace and comments in pattern.
# /m - Enables multiline mode.
# /s - Enables dotall mode.
# /u - Enables Unicode-aware case folding.
#
[r] > regex

  [] > compile /regex

  # Match the text and return the array of matched blocks.
  # Each matched block consists of
  #  - start position in which match was found
  #  - matched string
  #  - array of identified matched groups
  [txt] > match
    text r > regex-with-options

    regex-with-options.slice > regex-txt
      plus. 2
        regex-with-options.index-of ")"
      minus. 0
        minus.
          plus. 3
            regex-with-options.index-of ")"
          regex-with-options.length

    # pair object
    [first second] > pair
      plus. > as-hash
        second.as-hash
        first.as-hash.times 100

    # give a list with length len and elems
    [len elem] > list-by-len-elem
      if. > @
        len.lte 0
        list *
        (list-by-len-elem (len.minus 1) elem).with elem

    [sym src dest] > transition
      [num] > increase-by
        seq > @
          src.write
            src.plus num
          dest.write
            dest.plus num
      [num] > increased-by
        transition > @
          sym
          src.plus
            num
          dest.plus
            num
      [x] > eq
        and. > @
          eq.
            sym
            x.sym
          and.
            src.eq
              x.src
            dest.eq
              x.dest

    #Non-deterministic finite automation
    [transitions final-states s0 max-state] > nfa
      [num] > increase-states-by
        seq > @
          transitions.each
            [tr]
              tr.increase-by > @
                num
          final-states.each
            [state-i]
              state-i.write > @
                state-i.plus num
          s0.write
            s0.plus num
          max-state.write
            max-state.plus num

      [num] > increased-states-by
        nfa > @
          transitions.mapped
            [tr]
              tr.increased-by > @
                num
          final-states.mapped
            [item]
              item.plus > @
                num
          s0.plus num
          max-state.plus num

      [other] > eq
        [list1 list2] > eq-sets
          reducedi. > @
            list1
            TRUE
            [acc i item]
              and. > @
                acc
                gte.
                  found.
                    list2
                    item
                  0
        and. > @
          eq-sets
            transitions
            other.transitions
          and.
            eq-sets
              final-states
              other.final-states
            and.
              eq.
                s0
                other.s0
              eq.
                max-state
                other.max-state

    #Non-deterministic finite automata for symbol
    [sym] > nfa-by-sym
      nfa > @
        list:transitions
          (list *).with
            transition
              text sym
              memory 0
              memory 1
        list:final-states
          with.
            list
              *
            memory 1
        memory:s0
          0
        memory:max-state
          1

    #Non-deterministic finite automata concatenating nfa1 & nfa2
    [nfa1 nfa2] > nfa-by-and
      nfa2.increased-states-by > increased-nfa2!
        plus. 1
          nfa1.max-state

      [] > new-transitions
        concat. > @
          increased-nfa2.transitions
          concat.
            nfa1.transitions
            reduced.
              nfa1.final-states
              list *
              [acc item]
                acc.with > @
                  transition
                    text ""
                    item
                    increased-nfa2.s0

      nfa > @
        list:transitions
          new-transitions
        final-states.:final-states
          increased-nfa2
        s0.:s0
          nfa1
        max-state.:max-state
          increased-nfa2

    #Non-deterministic finite automata for nfa1 || nfa1
    [nfa1 nfa2] > nfa-by-or
      nfa2.increased-states-by > increased-nfa2!
        plus. 1
          nfa1.max-state
      [] > new-transitions
        list > @
          concat.
            list
              with.
                transitions.
                  nfa1
                transition
                  ""
                  s0.
                    nfa1
                  s0.
                    increased-nfa2
            transitions.
              increased-nfa2
      nfa > @
        new-transitions:transitions
        list:final-states
          concat.
            final-states.
              nfa1
            final-states.
              increased-nfa2
        s0.:s0
          nfa1
        max-state.:max-state
          increased-nfa2

    #Non-deterministic finite automata for nfa1*
    [nfa1] > nfa-by-star
      [] > new-transitions
        reducedi. > @
          nfa1.final-states
          nfa1.transitions
          [acc i final-state]
            list > @
              with.
                acc
                transition
                  ""
                  final-state
                  s0.
                    nfa1

  # Matches
  [txt] > matches
    not. > @
      is-empty.
        list (^.match txt)

  # A string with all encounters of pattern in txt
  # replaced with rpl
  [txt rpl] > replaced

    # Perform partial replace operation for
    # pt - next unhandled index in text
    # acc - replaced text so far
    # pa - next unhandled index in replaced text
    # m - matched segments array
    [pt acc pa m] > replacedi

      [] > nextpt
        plus. > @!
          mitem.at 0
          length.
            mitem.at 1

      [] > mitem
        m.at 0 > @!

      [] > part
        joined. > @!
          (text "")
          *
            slice.
              acc
              0
              pa
            slice.
              txt
              pt
              minus.
                mitem.at 0
                pt
            rpl

      [] > nextacc
        joined. > @!
          (text "")
          *
            part
            slice.
              txt
              nextpt
              minus.
                txt.length
                nextpt

      if. > @
        not.
          is-empty.
            list m
        ^.replacedi
          nextpt
          nextacc
          part.length
          without.
            list m
            0
        acc

    replacedi > @
      0
      txt
      0
      (match txt)
